000100000000       IDENTIFICATION DIVISION.
000200000000       PROGRAM-ID.    DLRSATRN.
000300000000       AUTHOR.        REECE TAM
000400000000       INSTALLATION.  JEWELSTONE SYSTEMS INC.
000500000000       DATE-WRITTEN.  APR   2001.
000600000000       DATE-COMPILED.
000700000000      ******************************************************************
000800000000      *                                                                *
000900000000      *    Dealer Rep Sales Assets Transactions Summary                *
001000000000      *                                                                *
001100000000      ******************************************************************
001200000000      *    C H A N G E   H I S T O R Y                                 *
001300000000      ******************************************************************
001400000000      * PROGRAMMER *DATE OF CHANGE* DESCRIPTION OF CHANGE              *
001500000000      ******************************************************************
001600000000      * Reece Tam  * 2001/04/11   * RFS9627 - Extract trans for a      *
001700000000      *            *              * given dealer rep investment for    *
001800000000      *            *              * a given process date or a range of *
001900000000      *            *              * days.                              *
002000011108      * Reece Tam  * 2001/11/08   * RFS11661- Add option 'C' to inquire*
002100011108      *            *              * for summary from the TRANS file for*
002200011108      *            *              * all existing CON trades (buys and  *
002300011108      *            *              * sells) with any process date.      *
002400011130      * Daisy Ly   * 2001/11/30   * RFS12281- recompile                *
002500080417      * Pawel A.   * 2008/04/17   * RFS51170- SQL error handling when  *
002600080417      *            *              * creating cursor causes program to  *
002700080417      *            *              * loop. Change to go to MSGW if      *
002800080417      *            *              * cursor cannot be created           *
002900000000      ******************************************************************
003000090717      * Brian L.   * 2009/07/17   * RFS68593- Added Distribution       *
003100090717      *            *              * transactions                       *
003200090902      ******************************************************************
003300090902      * Andy Chan  * 2009/09/02   * RFS73100- Re-invest Distribution   *
003400090902      *            *              * more than 1 trans                  *
003500100629      * Fatema Haji* 2010/06/25   * RFS83999- Buy transactions that    *
003600100629      *            *              * that have contrbution redemption
003700100629      *            *              * code 'CFMIK' should be treated like
003800100629      *            *              * transfers
003900090717      ******************************************************************
004000000000
004100000000       ENVIRONMENT DIVISION.
004200000000       CONFIGURATION SECTION.
004300000000       SOURCE-COMPUTER. IBM-AS400.
004400000000       OBJECT-COMPUTER. IBM-AS400.
004500000000       SPECIAL-NAMES.
004600000000      /
004700000000       INPUT-OUTPUT SECTION.
004800000000       FILE-CONTROL.
004900000000      **
005000000000
005100000000       DATA DIVISION.
005200000000       FILE SECTION.
005300000000      **
005400000000
005500000000       WORKING-STORAGE SECTION.
005600080417      * RFS 51170 Begin
005700080417           Copy Cpysqlfld
005800080417               REPLACING == "CURRENT_PROGRAM" == BY == "DLRSATRN" ==.
005900080417      * RFS51170 End
006000000000
006100000000           EXEC SQL
006200000000              INCLUDE SQLCA
006300000000              END-EXEC.
006400000000
006500000000
006600000000       01 END-OF-DATA                  PIC X(3) VALUE "EOD".
006700000000
006800000000      *   Trans fetch area
006900000000
007000000000       01 DIT-CNT                      PIC S9(5) COMP-3.
007100090720R68593 01 DIT-IDX-MAX                  PIC S9(5) COMP-3 VALUE 30.
007200000000       01 DIT-FETCH-TABLE.
007300090720R68593    02 DIT-FETCH-ARRAY OCCURS 30 TIMES.
007400000000            05 DIT-TRANS-TYPE-CODE     PIC X(3).
007500000000            05 DIT-TRANS-STATUS-CODE   PIC X(3).
007600000000            05 DIT-NET-AMT             PIC S9(11)V9(02) PACKED-DECIMAL.
007700000000            05 DIT-GROSS-AMT           PIC S9(11)V9(02) PACKED-DECIMAL.
007800000000            05 DIT-UNIT-AMT            PIC S9(10)V9(03) PACKED-DECIMAL.
007900000000            05 DIT-TRANS-CNT           PIC S9(9)        PACKED-DECIMAL.
008000000000
008100080417      * RFS 51170 Begin
008200080417       01  Ws-Err-Code                     PIC X(02) VALUE SPACES.
008300080417           88  lncc_Err_Ok                           VALUE SPACES.
008400080417           88  lncc_Err_10                           VALUE "10".
008500080417           88  lncc_Err_11                           VALUE "11".
008600080417           88  lncc_Err_12                           VALUE "12".
008700080417
008800080417       01  Constants.
008900080417           03  lncc_ErrorOpeningDLRTRNDCUR     PIC X(80)
009000080417               VALUE "Error while opening DLRTRNDCUR".
009100080417           03  lncc_ErrorOpeningDLRTRNRCUR     PIC X(80)
009200080417               VALUE "Error while opening DLRTRNRCUR".
009300080417           03  lncc_ErrorOpeningDLRTRNCCUR     PIC X(80)
009400080417               VALUE "Error while opening DLRTRNCCUR".
009500080417      * RFS 51170 End
009600000000
009700000000       01  CURR-CONTROLS.
009800000000          03 CURR-LEVEL1.
009900000000           05 CURR-TRANS-TYPE-CODE       PIC X(3).
010000000000           05 CURR-TRANS-STATUS-CODE     PIC X(3).
010100000000
010200000000       01  PREV-CONTROLS.
010300000000          03 PREV-LEVEL1.
010400000000           05 PREV-TRANS-TYPE-CODE       PIC X(3).
010500000000           05 PREV-TRANS-STATUS-CODE     PIC X(3).
010600000000
010700000000
010800000000       LINKAGE SECTION.
010900000000        01 COMM-AREA                     PIC X(200).
011000000000        01 COMM-AREA-BUFFER REDEFINES COMM-AREA.
011100000000           03 COMM-PROCESS-OPTION        PIC X(1).
011200000000      * Process option:
011300000000      *   'D' - Daily process
011400000000      *   'R' - A range of dates process or conversion process
011500011108R11661*   'C' - CON trades summary in TRANS file, any process date
011600000000
011700000000           03 COMM-ACTION-OPTION         PIC X(1).
011800000000      * Action option:
011900000000      *   'S' - Start SQL to get trans for a dealer rep investment
012000000000      *         for a specific process date or
012100000000      *         from a start date to end date.
012200000000      *   'F' - Fetch the next entry from the result set.
012300000000
012400000000           03 COMM-PROCESS-DATE          PIC S9(8).
012500000000           03 COMM-START-DATE            PIC S9(8).
012600000000           03 COMM-END-DATE              PIC S9(8).
012700000000           03 COMM-DEALER-CODE           PIC X(4).
012800000000           03 COMM-DEALER-REP-CODE       PIC X(6).
012900000000           03 COMM-INVESTMENT-CODE       PIC X(5).
013000000000
013100000000      * return result set
013200000000           03 COMM-RETURN-CODE           PIC X(3).
013300000000      *   'EOD' - End of data for the result set
013400000000
013500000000           03 COMM-TRANS-TYPE-CODE       PIC X(3).
013600000000           03 COMM-TRANS-STATUS-CODE     PIC X(3).
013700000000           03 COMM-NET-AMT               PIC S9(13)V9(2).
013800000000           03 COMM-GROSS-AMT             PIC S9(13)V9(2).
013900000000           03 COMM-UNIT-AMT              PIC S9(12)V9(3).
014000000000           03 COMM-TRANS-CNT             PIC S9(9).
014100000000
014200000000       PROCEDURE DIVISION USING  COMM-AREA.
014300000000      *----------------------------------
014400000000       MAINLINE SECTION.
014500000000      *----------------------------------
014600000000       ML-0000.
014700000000           PERFORM INITIAL-LOGIC.
014800000000           IF CURR-CONTROLS IS EQUAL TO HIGH-VALUES
014900000000              GO TO ML-1200.
015000000000       ML-0010.
015100000000           PERFORM GET-CURRENT-RECORD.
015200000000       ML-0020.
015300000000           IF PREV-LEVEL1 IS EQUAL TO CURR-LEVEL1
015400000000              GO TO ML-1100.
015500000000           IF PREV-CONTROLS IS EQUAL TO LOW-VALUES
015600000000              GO TO ML-0040.
015700000000       ML-0030.
015800000000       ML-0040.
015900000000           IF CURR-CONTROLS IS EQUAL TO HIGH-VALUES
016000000000              GO TO ML-1200.
016100000000       ML-0050.
016200000000       ML-0100.
016300000000           MOVE CURR-CONTROLS          TO PREV-CONTROLS.
016400000000       ML-1100.
016500000000           PERFORM DETAIL-PROCESSING.
016600000000           GO TO ML-0010.
016700000000       ML-1200.
016800000000           PERFORM END-JOB.
016900000000           GOBACK.
017000000000      /
017100000000      *----------------------------------
017200000000       INITIAL-LOGIC SECTION.
017300000000      *----------------------------------
017400000000
017500000000       INL-0010.
017600000000
017700000000           EXEC SQL
017800080417      *    WHENEVER SQLERROR GOTO STOPPGM-0010
01790008041751170      WHENEVER SQLERROR CONTINUE
018000000000           END-EXEC.
018100000000
018200000000           EXEC SQL
018300000000           WHENEVER NOT FOUND GOTO INL-HIGH-VALUES
018400000000           END-EXEC.
018500000000
018600000000
018700000000           MOVE LOW-VALUES   TO  CURR-CONTROLS
018800000000                                 PREV-CONTROLS.
018900000000
019000000000           MOVE SPACES       TO  COMM-RETURN-CODE
019100000000                                 COMM-TRANS-TYPE-CODE
019200000000                                 COMM-TRANS-STATUS-CODE.
019300000000
019400000000           MOVE ZEROS        TO  COMM-NET-AMT
019500000000                                 COMM-GROSS-AMT
019600000000                                 COMM-UNIT-AMT
019700000000                                 COMM-TRANS-CNT.
019800000000
019900000000
020000000000           IF COMM-PROCESS-DATE IS NOT NUMERIC OR
020100000000              COMM-PROCESS-DATE = ZEROS
020200000000              GO TO INL-HIGH-VALUES.
020300000000
020400011108R11661     IF COMM-PROCESS-OPTION NOT = "D" AND "R" AND "C"
020500000000              GO TO INL-HIGH-VALUES.
020600000000
020700000000           IF COMM-ACTION-OPTION  NOT = "S" AND "F"
020800000000              GO TO INL-HIGH-VALUES.
020900000000
021000000000
021100000000           IF COMM-PROCESS-OPTION = "R"
021200000000              IF COMM-START-DATE IS NOT NUMERIC OR
021300000000                 COMM-START-DATE = ZEROS
021400000000                 MOVE COMM-PROCESS-DATE TO COMM-START-DATE
021500000000              END-IF
021600000000
021700000000              IF COMM-END-DATE IS NOT NUMERIC OR
021800000000                 COMM-END-DATE = ZEROS
021900000000                 MOVE COMM-PROCESS-DATE TO COMM-END-DATE
022000000000              END-IF
022100000000           END-IF.
022200000000
022300000000
022400000000           IF COMM-ACTION-OPTION NOT = "S"
022500000000              GO TO INL-EXIT.
022600000000
022700000000           MOVE ZEROS        TO  DIT-CNT.
022800000000
022900000000
023000000000      *    Process Option 'D', extract daily trans,
023100000000      *    include wire orders, CON and CAN:
023200000000      *    Trans Type        Trans Status     Wire Order
023300000000      *      BUY               HST              <> Y
023400000000      *      BUY               CON
023500000000      *      BUY               RVS
023600000000      *      BUY               CAN
023700000000      *      SEL or CQD        HST              <> Y
023800000000      *      SEL               CON
023900000000      *      SEL or CQD        RVS
024000000000      *      SEL               CAN
024100000000      *      TRO               HST
024200000000      *      TRO               RVS
024300000000      *      TRI               HST
024400000000      *      TRI               RVS
024500000000      *      SWO               HST
024600000000      *      SWO               RVS
024700000000      *      SWI               HST
024800000000      *      SWI               RVS
024900000000
025000100629      * RFS 83999 - Instead of the trans file use the SQTRNP which is
025100100629      * the temporary file that has the transaction selection for
025200100629      * a particular process date with BUY transaction with a
025300100629      * contribution redemption code of CFMIK treated like a transfer.
025400100629      * SQTRNP is created in DLRSACAL
025500100629
025600000000           IF COMM-PROCESS-OPTION = "D"
025700000000
025800000000           EXEC SQL
025900000000           DECLARE DLRTRNDCUR CURSOR FOR SELECT TRANS_TYPE_CODE,
026000000000           TRANS_STATUS_CODE, SUM(NET_AMT), SUM(GROSS_AMT),
026100100629           SUM(UNIT_AMT), COUNT(*) FROM QTEMP/SQTRNP
026200100629           WHERE ((DEALER_CODE = :comm-dealer-code and
026300100629           DEALER_REP_CODE = :comm-dealer-rep-code and INVESTMENT_CODE
026400100629           = :comm-investment-code ))
026500100629           GROUP BY TRANS_TYPE_CODE, TRANS_STATUS_CODE
026600100629R83999*    SUM(UNIT_AMT), COUNT(*) FROM MFATRNP WHERE ((PROCESS_DATE =
026700100629  |   *    :comm-process-date and DEALER_CODE = :comm-dealer-code and
026800100629  |   *    DEALER_REP_CODE = :comm-dealer-rep-code and INVESTMENT_CODE
026900100629   |  *    = :comm-investment-code )) and ((TRANS_TYPE_CODE in ("BUY",
027000100629   |  *    "SEL", "CQD" ) and TRANS_STATUS_CODE = "HST" and
027100100629   |  *    WIRE_ORDER_FLAG <> "Y") or (TRANS_TYPE_CODE in ("BUY",
027200100629   |  *    "SEL") and TRANS_STATUS_CODE = "CON") or (TRANS_TYPE_CODE in
027300100629   |  *    ("BUY", "SEL", "CQD") and TRANS_STATUS_CODE = "RVS") or
027400100629   |  *    (TRANS_TYPE_CODE in ("BUY", "SEL") and TRANS_STATUS_CODE =
027500100629   |  *    "CAN") or (TRANS_TYPE_CODE in ("TRO", "TRI", "SWI", "SWO")
027600100629R83999*    and TRANS_STATUS_CODE in ("HST", "RVS"))) GROUP BY
027700100629R68593*    TRANS_TYPE_CODE, TRANS_STATUS_CODE
027800090719  ]
02790009090273100 *    UNION
02800009090273100 *      SELECT
02810009090273100 *         CASE
02820009090273100 *         WHEN Trnp.TRANS_TYPE_CODE IN ("INC","CPG","INT") AND
02830009090273100 *             (Trnddp.DISTR_OPTION_CODE = "R"  OR
02840009090273100 *             (Trnp.Unit_Amt > 0 AND
02850009090273100 *               trnddp.DISTR_OPTION_CODE = " "))
02860009090273100 *         THEN "DSR"
02870009090273100 *         WHEN Trnp.TRANS_TYPE_CODE IN ("INC","CPG","INT") AND
02880009090273100 *              Trnddp.DISTR_OPTION_CODE = "C"
02890009090273100 *         THEN "DSC"
02900009090273100 *         ELSE Trnp.TRANS_TYPE_CODE
02910009090273100 *         END AS Trans_Type_Code,
02920009090273100
02930009090273100      UNION
02940009090273100        Select
02950009090273100           Trnp.TRANS_TYPE_CODE,
029600090902R68593          Trnp.TRANS_STATUS_CODE,
029700090719  |             SUM(Trnp.NET_AMT),
029800090719  |             SUM(Trnp.GROSS_AMT),
029900090719  |             SUM(Trnp.UNIT_AMT), COUNT(*)
030000090719  |
03010009090273100        FROM QTEMP/SQDSTRN Trnp
03020009090273100        WHERE
03030009090273100             Trnp.DEALER_CODE     = :comm-dealer-code     and
03040009090273100             Trnp.DEALER_REP_CODE = :comm-dealer-rep-code and
03050009090273100             Trnp.INVESTMENT_CODE = :comm-investment-code
03060009090273100        GROUP BY Trnp.TRANS_TYPE_CODE, Trnp.TRANS_STATUS_CODE
03070009090273100        ORDER BY 1,2
030800090902
03090009090273100 *      FROM MFATRNP Trnp
03100009090273100 *
03110009090273100 *      LEFT OUTER JOIN MFATRNDDP Trnddp ON
03120009090273100 *           trnddp.placement_date = Trnp.placement_date AND
03130009090273100 *           trnddp.trans_no       = Trnp.trans_no
03140009090273100 *
03150009090273100 *      WHERE
03160009090273100 *          (Trnp.PROCESS_DATE    = :comm-process-date    and
03170009090273100 *           Trnp.DEALER_CODE     = :comm-dealer-code     and
03180009090273100 *           Trnp.DEALER_REP_CODE = :comm-dealer-rep-code and
03190009090273100 *           Trnp.INVESTMENT_CODE = :comm-investment-code )
03200009090273100 *       AND (Trnp.TRANS_TYPE_CODE in ("INC","CPG","INT") and
03210009090273100 *            Trnp.TRANS_STATUS_CODE in ("HST", "HSC", "RVS"))
03220009090273100 *
03230009090273100 *      GROUP BY TRANS_TYPE_CODE, Trnp.TRANS_STATUS_CODE,
03240009090273100 *               trnddp.DISTR_OPTION_CODE, Trnp.Unit_Amt
03250009090273100 *      ORDER BY 1,2
032600090719
032700000000           END-EXEC
032800000000
032900000000           EXEC SQL
033000000000           OPEN DLRTRNDCUR
033100000000           END-EXEC
033200000000
033300080417      * RFS51170 Begin
033400080417           MOVE SQLSTATE TO lc_sqlStates
033500080417           IF NOT lncc_sqlSuccessful
033600080417              SET lncc_Err_10 TO TRUE
033700080417              MOVE lncc_ErrorOpeningDLRTRNDCUR TO lc_sqlErrShortDESCR
033800080417              PERFORM SQLFailProcess
033900080417           END-IF
034000080417      * RFS51170 End
034100000000           END-IF.
034200000000
034300000000
034400000000      *    Process Option 'R', extract trans for a range of days or
034500000000      *    conversion process, will not consider wire orders,
034600000000      *    CON and CAN:
034700000000      *    Trans Type        Trans Status     Wire Order
034800000000      *      BUY               HST
034900000000      *      BUY               RVS
035000000000      *      SEL or CQD        HST
035100000000      *      SEL or CQD        RVS
035200000000      *      TRO               HST
035300000000      *      TRO               RVS
035400000000      *      TRI               HST
035500000000      *      TRI               RVS
035600000000      *      SWO               HST
035700000000      *      SWO               RVS
035800000000      *      SWI               HST
035900000000      *      SWI               RVS
036000000000
036100000000           IF COMM-PROCESS-OPTION = "R"
036200000000
036300000000           EXEC SQL
036400000000           DECLARE DLRTRNRCUR CURSOR FOR SELECT TRANS_TYPE_CODE,
036500000000           TRANS_STATUS_CODE, SUM(NET_AMT), SUM(GROSS_AMT),
036600000000           SUM(UNIT_AMT), COUNT(*) FROM MFATRNP WHERE ((PROCESS_DATE >=
036700000000           :comm-start-date and PROCESS_DATE <= :comm-end-date and
036800000000           DEALER_CODE = :comm-dealer-code and DEALER_REP_CODE =
036900000000           :comm-dealer-rep-code and INVESTMENT_CODE =
037000000000           :comm-investment-code )) and (( TRANS_TYPE_CODE in ("BUY",
037100000000           "SEL", "CQD", "TRO", "TRI", "SWI", "SWO") and
037200000000           TRANS_STATUS_CODE in ("HST", "RVS"))) GROUP BY
037300000000           TRANS_TYPE_CODE, TRANS_STATUS_CODE ORDER BY TRANS_TYPE_CODE,
037400000000           TRANS_STATUS_CODE FOR READ ONLY
037500000000           END-EXEC
037600000000
037700000000           EXEC SQL
037800000000           OPEN DLRTRNRCUR
037900000000           END-EXEC
038000000000
038100080417      * RFS51170 Begin
038200080417           MOVE SQLSTATE TO lc_sqlStates
038300080417           IF NOT lncc_sqlSuccessful
038400080417              SET lncc_Err_11 TO TRUE
038500080417              MOVE lncc_ErrorOpeningDLRTRNRCUR TO lc_sqlErrShortDESCR
038600080417              PERFORM SQLFailProcess
038700080417           END-IF
038800080417      * RFS51170 End
038900000000           END-IF.
039000000000
039100011108
039200011108R11661*    Process Option 'C', extract CON trans in the existing
039300011108R11661*    TRANS file with no restriction on the process date:
039400011108R11661*    Trans Type        Trans Status     Wire Order
039500011108R11661*      BUY               CON
039600011108R11661*      SEL               CON
039700011108R11661
039800011108R11661     IF COMM-PROCESS-OPTION = "C"
039900011108R11661
040000011108R11661     EXEC SQL
040100011108           DECLARE DLRTRNCCUR CURSOR FOR SELECT TRANS_TYPE_CODE,
040200011108           TRANS_STATUS_CODE, SUM(NET_AMT), SUM(GROSS_AMT),
040300011108           SUM(UNIT_AMT), COUNT(*) FROM MFATRNP WHERE DEALER_CODE =
040400011108           :comm-dealer-code and DEALER_REP_CODE =
040500011108           :comm-dealer-rep-code and INVESTMENT_CODE =
040600011108           :comm-investment-code and TRANS_STATUS_CODE = "CON" and
040700011108           TRANS_TYPE_CODE in ("BUY", "SEL") GROUP BY TRANS_TYPE_CODE,
040800011108           TRANS_STATUS_CODE ORDER BY TRANS_TYPE_CODE,
040900011108           TRANS_STATUS_CODE FOR READ ONLY
041000011108R11661     END-EXEC
041100011108R11661
041200011108R11661     EXEC SQL
041300011108R11661     OPEN DLRTRNCCUR
041400011108R11661     END-EXEC
041500011108R11661
041600080417      * RFS51170 Begin
041700080417           MOVE SQLSTATE TO lc_sqlStates
041800080417           IF NOT lncc_sqlSuccessful
041900080417              SET lncc_Err_12 TO TRUE
042000080417              MOVE lncc_ErrorOpeningDLRTRNCCUR TO lc_sqlErrShortDESCR
042100080417              PERFORM SQLFailProcess
042200080417           END-IF
042300080417      * RFS51170 End
042400011108R11661     END-IF.
042500011108
042600011108
042700000000           GO TO INL-EXIT.
042800000000
042900000000
043000000000       INL-HIGH-VALUES.
043100000000
043200000000           MOVE HIGH-VALUES  TO CURR-CONTROLS.
043300000000           MOVE END-OF-DATA  TO COMM-RETURN-CODE.
043400000000
043500000000       INL-EXIT.
043600000000           EXIT.
043700000000      /
043800000000      *----------------------------------
043900000000       GET-CURRENT-RECORD SECTION.
044000000000      *----------------------------------
044100000000
044200000000       GCR-0010.
044300000000
044400000000           EXEC SQL
044500000000           WHENEVER SQLERROR GO TO GCR-END
044600000000           END-EXEC.
044700000000
044800000000           EXEC SQL
044900000000           WHENEVER NOT FOUND GO TO GCR-END
045000000000           END-EXEC.
045100000000
045200000000
045300000000           IF DIT-CNT = ZEROS
045400000000              GO TO GCR-0020.
045500000000
045600000000           IF DIT-CNT > DIT-IDX-MAX
045700000000              GO TO GCR-0020.
045800000000
045900000000           IF DIT-TRANS-TYPE-CODE   (DIT-CNT) NOT = SPACES OR
046000000000              DIT-TRANS-STATUS-CODE (DIT-CNT) NOT = SPACES
046100000000              GO TO GCR-0030.
046200000000
046300000000           GO TO GCR-END.
046400000000
046500000000       GCR-0020.
046600000000
046700000000           PERFORM VARYING DIT-CNT FROM 1 BY 1
046800000000             UNTIL DIT-CNT > DIT-IDX-MAX
046900000000             INITIALIZE      DIT-FETCH-ARRAY (DIT-CNT)
047000000000           END-PERFORM.
047100000000
047200000000
047300000000
047400000000           IF COMM-PROCESS-OPTION = "D"
047500000000
047600000000           EXEC SQL
047700090720R68593     FETCH DLRTRNDCUR FOR 30 ROWS INTO :dit-fetch-array
047800000000           END-EXEC
047900000000
048000000000           END-IF.
048100000000
048200000000
048300000000           IF COMM-PROCESS-OPTION = "R"
048400000000
048500000000           EXEC SQL
048600090720R68593     FETCH DLRTRNRCUR FOR 30 ROWS INTO :dit-fetch-array
048700000000           END-EXEC
048800000000
048900000000           END-IF.
049000000000
049100011108
049200011108R11661     IF COMM-PROCESS-OPTION = "C"
049300011108R11661
049400011108R11661     EXEC SQL
049500090720R68593     FETCH DLRTRNCCUR FOR 30 ROWS INTO :dit-fetch-array
049600011108R11661     END-EXEC
049700011108R11661
049800011108R11661     END-IF.
049900011108
050000011108
050100000000           MOVE 1            TO DIT-CNT.
050200000000
050300000000
050400000000       GCR-0030.
050500000000
050600000000           MOVE DIT-TRANS-TYPE-CODE   (DIT-CNT)
050700000000                             TO COMM-TRANS-TYPE-CODE.
050800000000           MOVE DIT-TRANS-STATUS-CODE (DIT-CNT)
050900000000                             TO COMM-TRANS-STATUS-CODE.
051000000000           MOVE DIT-NET-AMT           (DIT-CNT)
051100000000                             TO COMM-NET-AMT.
051200000000           MOVE DIT-GROSS-AMT         (DIT-CNT)
051300000000                             TO COMM-GROSS-AMT.
051400000000           MOVE DIT-UNIT-AMT          (DIT-CNT)
051500000000                             TO COMM-UNIT-AMT.
051600000000           MOVE DIT-TRANS-CNT         (DIT-CNT)
051700000000                             TO COMM-TRANS-CNT.
051800000000
051900000000           ADD  1            TO DIT-CNT.
052000000000
052100000000
052200000000           MOVE HIGH-VALUES  TO CURR-CONTROLS.
052300000000           GO TO GCR-EXIT.
052400000000
052500000000       GCR-END.
052600000000
052700000000           MOVE HIGH-VALUES  TO CURR-CONTROLS.
052800000000           MOVE END-OF-DATA  TO COMM-RETURN-CODE.
052900000000
053000000000       GCR-EXIT.
053100000000           EXIT.
053200000000      /
053300000000      *----------------------------------
053400000000       DETAIL-PROCESSING SECTION.
053500000000      *----------------------------------
053600000000
053700000000       DPR-EXIT.
053800000000           EXIT.
053900000000      /
054000080417      * RFS 51170 Begin
054100080417      * ---------------------------------
054200080417       SQLFailProcess.
054300080417      * ---------------------------------
054400080417           PERFORM Dsp-Error.
054500080417           PERFORM Force-Msgw.
054600080417      * RFS 51170 End
054700000000
054800000000      *----------------------------------
054900000000       END-JOB SECTION.
055000000000      *----------------------------------
055100000000
055200000000       EOJ-0010.
055300000000
055400000000           EXEC SQL
055500000000           WHENEVER SQLERROR GOTO EOJ-EXIT
055600000000           END-EXEC.
055700000000
055800000000           EXEC SQL
055900000000           WHENEVER NOT FOUND GO TO EOJ-EXIT
056000000000           END-EXEC.
056100000000
056200000000
056300000000           IF COMM-RETURN-CODE NOT = END-OF-DATA
056400000000              GO TO EOJ-EXIT.
056500000000
056600000000           IF COMM-PROCESS-OPTION = "D"
056700000000
056800000000           EXEC SQL
056900000000           CLOSE DLRTRNDCUR
057000000000           END-EXEC
057100000000
057200000000           END-IF.
057300000000
057400000000
057500000000           IF COMM-PROCESS-OPTION = "R"
057600000000
057700000000           EXEC SQL
057800000000           CLOSE DLRTRNRCUR
057900000000           END-EXEC
058000000000
058100000000           END-IF.
058200000000
058300011108
058400011108R11661     IF COMM-PROCESS-OPTION = "C"
058500011108R11661
058600011108R11661     EXEC SQL
058700011108R11661     CLOSE DLRTRNCCUR
058800011108R11661     END-EXEC
058900011108R11661
059000011108R11661     END-IF.
059100011108
059200011108
059300000000       EOJ-EXIT.
059400000000           EXIT.
059500080417
059600000000
059700000000      *----------------------------------
059800000000       STOPPGM SECTION.
059900000000      *----------------------------------
060000000000
060100000000       STOPPGM-0010.
060200000000
060300000000           DISPLAY "PROGRAM DLRSATRN ENDED IN ERROR".
060400000000           STOP RUN.
060500000000
060600000000       STOPRUN-EXIT.
060700000000           EXIT.
060800080417
060900080417      * RFS 51170 Begin
061000080417      * DSP-ERROR and FORCE-MSGW Routines
061100080417           COPY CPYSQLRTN.
061200080417      * RFS 51170 End
061300000000
