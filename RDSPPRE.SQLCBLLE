000100191010       IDENTIFICATION DIVISION.
000200191010       PROGRAM-ID.    RDSPPRE.
000300191010       AUTHOR.        Waldi R.
000400191010       INSTALLATION.  Citigroup Fund Services Canada.
000500191010       DATE-WRITTEN.  Mar 02, 2010.
000600201118       DATE-COMPILED.
000700200914      * _____________ _________________________________________________*
000800191010      *    RFS-NUMBER : RFS 68035                                      *
000900191010      *                                                                *
001000191010      *    DESCRIPTION: This program does the following:               *
001100191010      *
001200191010      *    1. Cleans up rejected DAP/AHA groups:                       *
001300200914      *       - checks if entire group is rejected
001400191010      *       - adjusts user batch for closure records when ALL unit
001500191010      *         redemption was changed to $ Net
001600191010      *       - changes closure record back to ALL unit redemption
001700191010      *       - deletes trans approval records within the group
001800191010      *       - deletes trans reason records within the group
001900191010      *       - deletes trans redemption details within the group
002000191010      *       - adjusts SYSAHA batch header for trans. to be deleted
002100191010      *       - deletes SYSAHA if all trans. deleted within the batch
002200191010R88074*       - deletes trans pay to cheque within the group
002300191010R88074*       - deletes trans pay to bank within the group
002400191010      *       - deletes transactions within the group
002500191010      *       - deletes the group - trans header
002600191010      *
002700200529      *    2. Deletes stand alone DAPs from trans approval.            *
002800191010      *
002900191010      *    3. Clears the rejection code for all PND/UNC/VER            *
003000191010      *       transaction for all RDSP accounts.                       *
003100191010      *
003200191010      *    4. Rejects all PND/UNC/VER transactions with rule 13/14     *
003300191010      *       where there is missing trans approval record.            *
003400191010      *
003500191010      *    5. Checks if there is any partially processed group for     *
003600191010      *       an account being processed.                              *
003700191010      *
003800191010      *    6. Pre-processes all SEL/SWO/TRO transactions per account   *
003900191010      *       in calculator mode.                                      *
004000191010      *
004100191010      *    7. Updates rejection code for rejected transactions within  *
004200191010      *       the account.                                             *
004300191010      *
004400191010      *    8. Generates trans approval records for DAPs/AHAs.          *
004500191010      *                                                                *
004600191010      *    9. Generates transactions for new DAPs/AHAs.                *
004700191010      *                                                                *
004800191010      *   10. Generates trans redemption details for new DAPs/AHAs.    *
004900191010      *                                                                *
005000191010      *   11. Generates trans header for DAPs/AHAs.                    *
005100191010      *                                                                *
005200191010      *   12. Generates trans reason for new AHAs.                     *
005300191010      *                                                                *
005400191010      *   13. Generates SYSAHA batch header for the new DAPs/AHAs.     *
005500191010      *                                                                *
005600191010      *   14. Updates trans approval for closure trigger record.       *
005700191010      *                                                                *
005800191010      *   15. Updates transaction  for closure trigger record.         *
005900191010      *                                                                *
006000191010      *   15. Adjusts user batch for closure trigger record.           *
006100191010      *                                                                *
006200191010      *    CALLED BY: JOBDAILY                                         *
006300191010      * _______________________________________________________________*
006400191010      * Waldi R.    * 2010/03/02 * RFS 68035 - New program.            *
006500191010      * Waldi R.    * 2010/06/14 * RFS 68035.22 - Reject rule 13, 14   *
006600191010      *                          * transactions with missing MFATRNHDP.*
006700191010      * Waldi R.    * 2010/06/16 * RFS 68035.33 - Changes to GET_MKV_T *
006800191010      *             *            * for opening balance *before* trans  *
006900191010      * Waldi R.    * 2010/06/16 * RFS 68035.29 - Recalculate grant and*
007000191010      *             *            * bond portions for closure AHAs when *
007100191010      *             *            * not enough assets to repay total AHA*
007200191010      * Waldi R.    * 2010/06/16 * RFS 68035.37 - Calculate and update *
007300191010      *             *            * total grant/bond in trans approval  *
007400191010      *             *            * with termination adjustment totals  *
007500191010      *             *            * for closure AHAs.                   *
007600191010      * Waldi R.    * 2010/06/24 * RFS 84456 - Store notional values   *
007700191010      *             *            * in trans-approval for each trade dt.*
007800191010      *             *            * Store AHA totals up to the trade dt.*
007900191010      *             *            * of the DAP including AHA totals from*
008000191010      *             *            * the previous AHA groups.            *
008100191010      *             *            * Store notional values for closure   *
008200191010      *             *            * DAPs as of the As-at-Date.          *
008300191010      *             * 2010/07/09 * Changed files in the FROM clause    *
008400191010      *             *            * separated by commas to INNER JOIN.  *
008500191010      *             * 2010/07/13 * Change split option from % to Units *
008600191010      *             *            * in DAP trans if there is AHA to pay.*
008700191010      * Waldi R.    * 2010/06/23 * RFS 80658 - Waive DS5 rejection     *
008800191010      *             *            * based on the flag in trans-approval.*
008900191010      * _______________________________________________________________*
009000191010      * Waldi R.    * 2010/09/07 * RFS 86707 - If partially processed  *
009100191010      *             *            * group exists for an account, reject *
009200191010      *             *            * all new transactions for that       *
009300191010      *             *            * account except BUY/INC/INT/CPG/MFR. *
009400191010      * Richard S.  * 2010/09/10 * RFS 74620 - Recompile               *
009500191010      * _______________________________________________________________*
009600191010      * Emman. Yala * 2010/09/24 * RFS85040 - RDSP Phase 5.1 Part2     *
009700191010      *             *            * Reject transactions backdated prior *
009800191010      *             *            * to Start-Date or Transfer-In-Date   *
009900191010      * Esin A.     * 2010/10/28 * RFS 88074 - Carry over the payment  *
010000191010      *             *            * info into DAP transactions created  *
010100191010      *             *            * when AHA all units processed        *
010200191010      *             *            *(C/R = '13' and and split option ='A'*
010300191010      * Deepthi     * 2011/04/26 * RFS91990 - Modification to include  *
010400191010      *             *            * only specific header type in        *
010500191010      *             *            * selection/update criteria.          *
010600191010      * Nasra F     * 2011/06/30 * RFS97154 - Modify the ln_CurrentTransNo
010700191010      *             *            * incrementing.Fix SQL stmt go faster *
010800191010      * Sai Kiran I* 2011/09/02   * RFS 92499 - Recompile
010900191010      * Waldi R     * 2011/11/02 * RFS102179- Use reason type when     *
011000191010      *             *            * searching for reason code.          *
011100191010      * Thilaga K   * 2012/04/23 * RFS108826 - Defect Fix              *
011200191010      *             *            * Duplicate record key error on       *
011300191010      *             *            * MFATRHDRP.                          *
011400191010      * Muthu       * 2012/07/30 * RFS91272 - RDSP ITS Version 2.2     *
011500191010      * lakshmi M   *            *            Changes.                 *
011600191010      * Boopathy D  * 2012/10/01 * RFS98866- New SDSP Account Type     *
011700191010      * Daniel M.   * 2012/12/18 * RFS117402 - Set MFATRNHDP correctly *
011800191010      *             *            * for RDSP DAP/LDAP                   *
011900191010      * Daniel M.   * 2012/12/18 * RFS120417 - Init ln_TotalCapital    *
012000191010      * Nasra F     * 2013/04/24 * RFS108486 - Commission payment on   *
012100191010      *             *            * grant and bond purchases            *
012200191010      * Bhanu D     * 2013/09/12 * RFS127195 - AHA Repayments are
012300191010      *             *            * not reporting Correctly.
012400191010      * Thilaga K   * 2013/09/03 * RFS123925 - ITS 3.1- BUDGET 2012    *
012500191010      *             *            * Changes                             *
012600191010      * Daniel M    * 2013/09/27 * RFS123925 - QC 33940 - Range of     *
012700191010      *             *            * subscript error                     *
012800191010      * Thilaga K   * 2013/10/08 * RFS128265 - Recompile for MFATRNHDP *
012900191010      * Uday K A    * 2013/09/27 * RFS126482 - RDSP-ITS 3.1 Budget 2012*
013000191010      *             *            * Changes Part 1 - Withholding Tax    *
013100191010      * Daniel M    * 2013/11/04 * RFS126482 - QC 34510 - taxable not  *
013200191010      *             *            * accumulating                        *
013300191010      * Daniel M    * 2013/11/04 * RFS126482 - QC 34515 - Tax not      *
013400191010      *             *            * withheld                            *
013500191010      * Thilaga K   * 2013/08/28 * RFS127129- Recompile only
013600191010      * Uday K A    * 2013/12/04 * RFS126482 - QC 34863 - calculation  *
013700191010      *             *            * wrong for tax amount                *
013800191010      * Thilaga K   * 2013/12/04 * RFS131316 - DAP when MV is less than*
013900191010      *             *            * total AHA is not rejecting          *
014000191010      * Boopathy D  * 2013/06/12 * RFS125258 - Added New parameters to *
014100191010      *             *            * SETCALENV2
014200191010      * Michael Fan * 2014/01/14 * RFS132956 - Recompile because of    *
014300191010      *             *            *  copy book CPTRNPST1 changes.       *
014400191010      * Shu Yin/DM  * 2014/01/17 * RFS132353 - Fix decimal data error  *
014500191010      * Daniel M    * 2014/01/15 * RFS133011 - Initialize ln_TotalAfter*
014600191010      *             *            * for SDSP transactions               *
014700191010      * K Naveen    * 2014/01/29 * RFS132349 - Withholding tax not appl*
014800191010      *             *            * when redemption type is not $-Dollar*
014900191010      * Boopathy D  * 2014/02/28 * RFS134243 - Withholding tax on All  *
015000191010      *             *            * unit AHA withdrawals (Closure)      *
015100191010      * Antony S    * 2014/02/21 * RFS132895 - Redemption in RDSP      *
015200191010      *             *            * account incorrectly rejected        *
015300191010      * Thilaga K   * 2014/04/16 * RFS134936 - Recompile for MFATRNREP *
015400191010      * Sushmita J  * 2014/05/29 * RFS127070 - To check for the special*
015500191010      *             *            * module RDSPTSFTAX and to add the new*
015600191010      *             *            * logic for DSD Rejection code and to *
015700191010      *             *            * retrieve the total taxable DAP/LDAP *
015800191010      *             *            * from notional transfer .            *
015900191010      * Sangeetha V * 2014/08/01 * RFS 133572 - Grant Bond repayment   *
016000191010      *             *            * happening incorrectly upon closure.
016100191010      * Daniel M.   * 2014/07/09 * RFS135764 - Pass rule to FXLDAPMAX  *
016200191010      * Tamilselvi * 2015/02/18   * RFS139288 - Recompile for MFAACCPMP
016300191010      * Michael Fan * 2015/03/10 * RFS138770 - Recompile because of
016400191010      *             *            *  copy book CPTRNPST1 changes.
016500191010      * Michael Fan * 2015/07/23 * RFS149620 - Recompile because of
016600191010      *             *            *  copy book CPTRNPST1 changes.
016700191010      *MUTHULAKSHMI * 2015/04/07 * RFS145157 - RECOMPILE MFAACCBNP     *
016800191010      *Amruta A     * 2015/06/01 * RFS143313 - Ability to backdate     *
016900191010      *                            RDSP AHA repayments(grant/bond)     *
017000191010      *Amruta A     * 2015/08/08 * RFS146254 - AHA repayment trade     *
017100191010      *                            reported incorrectly                *
017200191010      * Muthu      *              * RFS130936 - AHA amount is not
017300191010      * Lakshmi M  *              * reflected for matured grants and
017400191010      *            *              * bonds.
017500191010      *Zaheer A     * 2015/08/28 * RFS135385 - Transfer-in repayments  *
017600191010      *                            are not allocated to grant/bond     *
017700191010      *                            purchases                           *
017800191010      *Geethanjali * 2015/12/16   * RFS151632 - AHA and DAP trades     *
017900191010      *T G         *              * backdated in error                 *
018000191010      * Muthu      *  2015/11/17  * RFS143702 - System generated AHA
018100191010      * lakshmi M  *              * sell based on the NET DAP.
018200191010      *Zaheer A    *  2016/06/29 * RFS158078 - Incorrect  AHA          *
018300191010      *                            Proportional Repayment amount       *
018400191010      *                          + SDSP Grant/Bond proportion when     *
018500191010      *                            LDAP Max is waived (SDSP flag not   *
018600191010      *                            set) RFS 1 5 8 7 3 9                *
018700191010      * Daniel M    * 2016/04/04 * RFS147652 - Transfer-in DSC clawback*
018800191010      * Muthu       * 2016/04/18 * RFS147652 - Reduce DSC Encroaching  *
018900191010      * Lakshmi M   *            * on AHA for Transfer-Out             *
019000191010      * Zaheer A    * 2016/08/25 * RFS161743 - Manual RDSP Closure via *
019100191010      *             *            * transfer causes JOBDAILY failure    *
019200191010      *             *            * (MSGW)                              *
019300191010      * Muthu       * 2017/01/04 * RFS162133 - Rejected RDSP trades    *
019400191010      * Lakshmi M   *            * are not captured in daily           *
019500191010      *             *            * reject report DLYRJTDR.             *
019600191010      * B Vergara   * 2017/08/11 * RFS170212 - Set SUPPRESS-CONFIRM to *
019700191010      *             *            * 'N' when updating or generating     *
019800191010      *             *            * transaction record                  *
019900191010      * Ragavi S    * 2017/10/24 * RFS171801 - DAP rejected with DS4   *
020000191010      *             *            * (ACC MV < AHA after Wthdrw)         *
020100191010      * Ragavi S    * 2018/01/24 * RFS1000622- Backdated DAP rejected  *
020200191010      *             *            * where MV is sufficient for DAP & AHA*
020300191010      * Kiruthika G * 2018/02/23 * RFS1000873- rejected AHA sell       *
020400191010      *             *            * not appearing on DLYRJTDR           *
020500191010      * KIRUTHIKA G * 2018/06/29 * RFS1002416 - Termination Adjustments*
020600191010      *             *            * can sometimes be inaccurate*        *
020700191010      * Marita      * 2018/09/24 * RFS1004568 - AHA Calculation issue  *
020800191010      * Sequiera    *            * on DAP/LDAP Transaction             *
020900191010      * Gomathi S   * 2018/10/12 * RFS1001480 - AHA Calculation issue  *
021000191010      *             *            * on DAP/LDAP Transaction             *
021100191010      * Swathi J    * 2019/05/16 * RFS181301  - AHA Calculation issue  *
021200191010      *             *            * on DAP/LDAP Transaction             *
021300191010      * Swathi J    * 2019/07/23 * RFS184329 - JOBDAILY in loop - unab
021400191010      *             *            * le to complete
021500191010      * Jebastin K  * 2019/07/23 * RFS1015022 - Recompile of mfatrnbp
021600191010      *             *            *              Recompile of mfatrnehp
021700191010      * Gomathi     * 2019/07/15 * RFS181302  - *nsufficient Unit      *
021800191010      *             *            * balance rejection reason  received  *
021900191010      *             *            * When we process RDRAHA              *
022000191010      * Jason Joshua* 2019/10/08 * RFS1019285 - DAP not fully taxed    *
022100191010      *             *            * when beneficiary deceased           *
022200191101      * Poojasri M  * 2019/10/25 * RFS1008981 - AHA incorrectly        *
022300191101      *             *            * calculated in backdated closure     *
022400191205      * suresh P    * 2019/05/12 * RFS1020656 - Issue DS5 rejection    *
022500191205      *             *            * to exclude SDSP account type logic  *
022600191205      *             *            * chnages.                            *
022700200605      * Gomathi S   * 2020/05/27 * RFS1099376- No AHA Closure          *
022800200918      * Swathi J    * 2020/08/21 * RFS1103281 - Tax Applied before
022900200918      *             *            * DTC And BPA have been reached for
023000200918      *             *            * SDSP Account.
023100201118      * Suresh P    * 2020/09/18 * RFS1102330 - Call New PGM FXRDSPDS5 *
023200201218      * Swathi J    * 2020/12/18 * RFS1108840 - JOBDAILY in MSGW       *
023300210106      * Suresh P    * 2021/01/06 * RFS1106828 - Backdated DAP-AHA      *
023400210106      *             *            * placed with multiple funds as Units *
023500210106      *             *            * and the Repayment date is not       *
023600210106      *             *            * populated in AHA transaction.       *
023700210122      * M K SINDHU  * 2020/12/02 * RFS1103329 - RDSP - DAP/LDAP        *
023800210122      *             *            * no breakdown                        *
023900210405      * Suresh P    * 2021/03/16 * RFS1112868 - Backdated DAP-AHA      *
024000210405      *             *            * placed with multiple funds as Units *
024100210405      *             *            * and the Repayment date is not       *
024200210405      *             *            * populated in AHA transaction.       *
024300210226      * Ashwini B   * 2021/02/09 * RFS187046 - Recompile for MFATRNREP *
024400210226      * Gomathi S   * 2021/01/07 * RFS1101968 - No Tax charged for RDSP
024500210226      *             *            * closure account
024600210225      * Suresh P    * 2020/02/17 * RFS1110840 - Data population for    *
024700210225      *             *            * the systematically generated AHA    *
024800210405      *             *            * transaction.                        *
024900210719      * Swathi J    * 2021/07/19 * RFS186761- Issue RDSP tax receipts
025000210719      *             *            * to the estate of the beneficiary
025100210805      * Poojasri M  * 2021/08/06 * RFS1118141 - Recompile of MFAADTNTP *
025200210929      * Swathi J    * 2021/08/16 * RFS1116830 -No Tax charged on DAP
025300210929      *             *            * trans for RDSP Account closure
025400191101      * ______________________________________________________________ *
025500210122
025600191010
025700191010
025800191010
025900191010
026000191010       ENVIRONMENT DIVISION.
026100191010       CONFIGURATION SECTION.
026200191010       SOURCE-COMPUTER. IBM-AS400.
026300191010       OBJECT-COMPUTER. IBM-AS400.
026400191010       SPECIAL-NAMES.
026500191010           LINKAGE TYPE IS PROCEDURE FOR "FXCTLP"
026600191010126482     LINKAGE TYPE IS PROCEDURE FOR "FXREMPAY"
02670019101098866      DATA-AREA IS WS-DTAARA-WKRDSPDATA
026800191010123925     DATA-AREA  IS lc_DataArea
026900191010           LOCAL-DATA IS WS-LOCAL.
027000191010       INPUT-OUTPUT SECTION.
027100191010       FILE-CONTROL.
027200191010
027300191010      *RFS126482-Start
027400191010           SELECT  Account-Type-Parms
027500191010                   ASSIGN TO DATABASE-MFAACCPMP
027600191010                   ORGANIZATION IS INDEXED
027700191010                   ACCESS IS DYNAMIC
027800191010                   FILE STATUS  IS lc_filestatus
027900191010                   RECORD KEY IS EXTERNALLY-DESCRIBED-KEY.
028000191010      *RFS126482-End
028100191010       DATA DIVISION.
028200191010       FILE SECTION.
028300191010
028400191010      *RFS126482-Start
028500191010       FD  Account-Type-Parms
028600191010           LABEL RECORDS ARE STANDARD.
028700191010       01  Account-Type-Parms-Rec.
028800191010                             COPY DD-ALL-FORMATS OF MFAACCPMP.
028900191010      *RFS126482-End
029000191010
029100191010       WORKING-STORAGE SECTION.
029200191010
029300191010           Copy Cpysqlfld
029400191010           REPLACING == "CURRENT_PROGRAM" == BY == "RDSPPRE" ==.
029500191010
029600191010           EXEC SQL
029700191010             INCLUDE SQLCA
029800191010           END-EXEC.
029900191010
03000019101085040      Copy CPRDSPCHK.
030100191010108486     copy CPSCEDTAL1.
030200191010123925     COPY CPYAHARED.
030300191010
030400191010      * Error Codes, Uniquely Identify where the error happened
030500191010       01  Ws-Err-Code          PIC X(02)  VALUE SPACES.
030600191010           88  lncc_Err_OK                 VALUE "  ".
030700191010           88  lncc_Err_10                 VALUE "10".
030800191010           88  lncc_Err_11                 VALUE "11".
030900191010           88  lncc_Err_12                 VALUE "12".
031000191010           88  lncc_Err_13                 VALUE "13".
031100191010           88  lncc_Err_14                 VALUE "14".
031200191010           88  lncc_Err_15                 VALUE "15".
031300191010           88  lncc_Err_16                 VALUE "16".
031400191010           88  lncc_Err_17                 VALUE "17".
031500191010           88  lncc_Err_18                 VALUE "18".
031600191010           88  lncc_Err_19                 VALUE "19".
031700191010           88  lncc_Err_20                 VALUE "20".
031800191010           88  lncc_Err_21                 VALUE "21".
031900191010           88  lncc_Err_22                 VALUE "22".
032000191010           88  lncc_Err_23                 VALUE "23".
032100191010           88  lncc_Err_24                 VALUE "24".
032200191010           88  lncc_Err_25                 VALUE "25".
032300191010           88  lncc_Err_26                 VALUE "26".
032400191010           88  lncc_Err_27                 VALUE "27".
032500191010           88  lncc_Err_28                 VALUE "28".
032600191010           88  lncc_Err_29                 VALUE "29".
032700191010           88  lncc_Err_30                 VALUE "30".
032800191010           88  lncc_Err_31                 VALUE "31".
032900191010           88  lncc_Err_32                 VALUE "32".
033000191010           88  lncc_Err_33                 VALUE "33".
033100191010           88  lncc_Err_34                 VALUE "34".
033200191010           88  lncc_Err_35                 VALUE "35".
033300191010           88  lncc_Err_36                 VALUE "36".
033400191010           88  lncc_Err_37                 VALUE "37".
033500191010           88  lncc_Err_38                 VALUE "38".
033600191010           88  lncc_Err_39                 VALUE "39".
033700191010           88  lncc_Err_40                 VALUE "40".
033800191010           88  lncc_Err_41                 VALUE "41".
033900191010           88  lncc_Err_42                 VALUE "42".
034000191010           88  lncc_Err_43                 VALUE "43".
034100191010           88  lncc_Err_44                 VALUE "44".
034200191010           88  lncc_Err_45                 VALUE "45".
034300191010           88  lncc_Err_46                 VALUE "46".
034400191010           88  lncc_Err_47                 VALUE "47".
034500191010           88  lncc_Err_48                 VALUE "48".
034600191010           88  lncc_Err_49                 VALUE "49".
034700191010           88  lncc_Err_50                 VALUE "50".
034800191010           88  lncc_Err_51                 VALUE "51".
034900191010           88  lncc_Err_52                 VALUE "52".
035000191010           88  lncc_Err_53                 VALUE "53".
035100191010           88  lncc_Err_54                 VALUE "54".
035200191010           88  lncc_Err_55                 VALUE "55".
035300191010           88  lncc_Err_56                 VALUE "56".
035400191010           88  lncc_Err_57                 VALUE "57".
035500191010           88  lncc_Err_58                 VALUE "58".
035600191010           88  lncc_Err_59                 VALUE "59".
035700191010           88  lncc_Err_60                 VALUE "60".
035800191010           88  lncc_Err_61                 VALUE "61".
035900191010           88  lncc_Err_62                 VALUE "62".
036000191010           88  lncc_Err_63                 VALUE "63".
036100191010           88  lncc_Err_64                 VALUE "64".
036200191010           88  lncc_Err_65                 VALUE "65".
036300191010           88  lncc_Err_66                 VALUE "66".
036400191010           88  lncc_Err_67                 VALUE "67".
03650019101084456      88  lncc_Err_68                 VALUE "68".
03660019101084456      88  lncc_Err_69                 VALUE "69".
03670019101080658      88  lncc_Err_70                 VALUE "70".
03680019101086707      88  lncc_Err_71                 VALUE "71".
03690019101085040      88  lncc_Err_72                 VALUE "72".
037000191010  |        88  lncc_Err_73                 VALUE "73".
03710019101085040      88  lncc_Err_74                 VALUE "74".
037200191010R88074     88  lncc_Err_75                 VALUE "75".
037300191010  |        88  lncc_Err_76                 VALUE "76".
037400191010  |        88  lncc_Err_77                 VALUE "77".
037500191010  |        88  lncc_Err_78                 VALUE "78".
037600191010  |        88  lncc_Err_79                 VALUE "79".
037700191010R88074     88  lncc_Err_80                 VALUE "80".
037800191010108486     88  lncc_Err_81                 VALUE "81".
037900191010108486     88  lncc_Err_82                 VALUE "82".
038000191010      *RFS126482 - Start
038100191010           88  lncc_Err_83                 VALUE "83".
038200191010           88  lncc_Err_84                 VALUE "84".
038300191010           88  lncc_Err_85                 VALUE "85".
038400191010           88  lncc_Err_86                 VALUE "86".
038500191010           88  lncc_Err_87                 VALUE "87".
038600191010           88  lncc_Err_88                 VALUE "88".
038700191010      *RFS126482 - End
038800191010132349     88  lncc_Err_89                 VALUE "89".
038900191010132349     88  lncc_Err_90                 VALUE "90".
039000191010147652     88  lncc_Err_91                 VALUE "91".
039100191010147652     88  lncc_Err_92                 VALUE "92".
039200191010147652     88  lncc_Err_93                 VALUE "93".
039300191010147652     88  lncc_Err_94                 VALUE "94".
039400191010147652     88  lncc_Err_95                 VALUE "95".
039500191010147652     88  lncc_Err_96                 VALUE "96".
039600191010001480     88  lncc_Err_97                 VALUE "97".
039700200529      *RFS1099376 -STARTS *
039800200529           88  lncc_Err_98                 VALUE "98".
039900200529
040000200529       01 Lc_NoAHAClosure     PIC X(02)    VALUE SPACES.
040100200529           88  Lb_NoAHAClosureYes          VALUE "Y".
040200200529           88  Lb_NoAHAClosureNo           VALUE "N".
040300200529      *RFS1099376 -ENDS   *
040400191010
040500191010       01  Constants.
040600191010           03  lncc_AHANumType          PIC  X(04) VALUE "AHA#".
040700191010           03  lncc_STRNumType          PIC  X(04) VALUE "STR#".
040800191010           03  lncc_SBTNumType          PIC  X(04) VALUE "SBT#".
040900191010           03  lncc_RDSP                PIC  X(10) VALUE "RDSP".
041000191010           03  lncc_SEL                 PIC  X(03) VALUE "SEL".
041100191010           03  lncc_SWO                 PIC  X(03) VALUE "SWO".
041200191010           03  lncc_TRO                 PIC  X(03) VALUE "TRO".
04130019101086707      03  lncc_BUY                 PIC  X(03) VALUE "BUY".
04140019101086707      03  lncc_INT                 PIC  X(03) VALUE "INT".
04150019101086707      03  lncc_INC                 PIC  X(03) VALUE "INC".
04160019101086707      03  lncc_CPG                 PIC  X(03) VALUE "CPG".
04170019101086707      03  lncc_MFR                 PIC  X(03) VALUE "MFR".
04180019101086707      03  lncc_SWI                 PIC  X(03) VALUE "SWI".
04190019101086707      03  lncc_TRI                 PIC  X(03) VALUE "TRI".
042000191010           03  lncc_PND                 PIC  X(03) VALUE "PND".
042100191010           03  lncc_UNC                 PIC  X(03) VALUE "UNC".
042200191010           03  lncc_VER                 PIC  X(03) VALUE "VER".
042300191010           03  lncc_DS4                 PIC  X(03) VALUE "DS4".
042400191010           03  lncc_DS5                 PIC  X(03) VALUE "DS5".
042500191010           03  lncc_DS6                 PIC  X(03) VALUE "DS6".
042600191010           03  lncc_DS7                 PIC  X(03) VALUE "DS7".
042700191010126482     03  lncc_HST                 PIC  X(03) VALUE "HST".
042800191010126482     03  lncc_FED                 PIC  X(03) VALUE "FED".
042900191010126482     03  lnc_Ac                   PIC  X(02) VALUE "AC".
043000191010126482     03  lnc_500                  PIC  9(03) VALUE  500.
043100191010126482     03  lnc_10000                PIC  9(05) VALUE  10000.
043200191010127070     03  lnc_C                    PIC  X(01) VALUE "C".
043300191010127070     03  lnc_RdspTsfTax           PIC  X(10) VALUE "RDSPTSFTAX".
043400191010      *RFS1000622 Starts
043500191010           03  lncc_T                   PIC  X(01) VALUE "T".
043600191010      *RFS1000622 Ends
043700191010           03  lncc_DS8                 PIC  X(03) VALUE "DS8".
043800191010           03  lncc_DS9                 PIC  X(03) VALUE "DS9".
043900191010           03  lncc_DSA                 PIC  X(03) VALUE "DSA".
044000191010           03  lncc_AHA                 PIC  X(03) VALUE "AHA".
044100191010           03  lncc_DIR                 PIC  X(03) VALUE "DIR".
044200191010           03  lncc_DSB                 PIC  X(03) VALUE "DSB".
044300191010           03  lncc_WSB                 PIC  X(03) VALUE "WSB".
044400191010           03  lncc_CAD                 PIC  X(03) VALUE "CAD".
044500191010           03  lncc_PEND                PIC  X(04) VALUE "PEND".
044600191010           03  lncc_SYSAHA              PIC  X(06) VALUE "SYSAHA".
044700191010           03  lncc_RDSPPRE             PIC  X(07) VALUE "RDSPPRE".
044800191010           03  lncc_CloseRep            PIC  X(10) VALUE "CLOSE/REP".
044900191010102179     03  lncc_Repayment           PIC  X(10) VALUE "REPAYMENT".
045000191010           03  lncc_Space               PIC  X(01) VALUE " ".
045100191010           03  lncc_Dollar              PIC  X(01) VALUE "$".
045200191010           03  lncc_Percent             PIC  X(01) VALUE "%".
045300191010           03  lncc_Y                   PIC  X(01) VALUE "Y".
045400191010           03  lncc_N                   PIC  X(01) VALUE "N".
045500191010           03  lncc_G                   PIC  X(01) VALUE "G".
045600191010           03  lncc_A                   PIC  X(01) VALUE "A".
045700191010           03  lncc_U                   PIC  X(01) VALUE "U".
045800191010           03  lncc_X                   PIC  X(01) VALUE "X".
045900191010           03  lncc_0                   PIC  X(01) VALUE "0".
046000191010126482     03  lncc_00                  PIC  X(02) VALUE "00".
046100191010           03  lncc_11                  PIC  X(02) VALUE "11".
046200191010           03  lncc_12                  PIC  X(02) VALUE "12".
046300191010           03  lncc_13                  PIC  X(02) VALUE "13".
046400191010           03  lncc_14                  PIC  X(02) VALUE "14".
046500191010147652     03  lncc_15                  PIC  X(02) VALUE "15".
046600191010181302*    03  lnci_0                   PIC S9(01) VALUE 0.
046700191010181302     03  lncc_O                   PIC X(01) VALUE "O".
046800191010181302     03  lnci_0                   PIC S9(09)V99 VALUE 0.
046900191010           03  lnci_1                   PIC S9(01) VALUE 1.
047000191010           03  lncc_CleanMode           PIC  X(01) VALUE "C".
047100191010           03  lncc_InitMode            PIC  X(01) VALUE "I".
047200191010           03  lncc_DeleteMode          PIC  X(01) VALUE "D".
04730019101098866      03  lncc_B                   PIC  X(01) VALUE "B".
047400191010147652     03  lncc_R                   PIC  X(01) VALUE "R".
04750019101098866      03  lncc_DSD                 PIC  X(03) VALUE "DSD".
047600191010108486     03  lncc_CDSC                PIC  X(04) VALUE "CDSC".
047700191010147652     03  lncc_DSE                 PIC  X(03) VALUE "DSE".
047800210720186761     03  lncc_DEAD                PIC  X(04) VALUE "DEAD".
047900191010123925     03  Lnci_LegChg20140101      PIC  S9(9) VALUE 20140101.
048000200529      *RFS1099376 -STARTS *
048100200529           03  Lc_ContrRedemCode        PIC X(06).
048200200529      *RFS1099376 -ENDS   *
048300200529
048400191010           03  lncc_ErrOpeningCursor       PIC X(80)
048500191010               VALUE "Error while opening cursor".
048600191010           03  lncc_ErrFetchingCursor      PIC X(80)
048700191010               VALUE "Error while fetching cursor".
048800191010           03  lncc_ErrClosingCursor       PIC X(80)
048900191010               VALUE "Error while closing cursor".
049000191010           03  lncc_ErrDeletingMFATRNHDP   PIC X(80)
049100191010               VALUE "Error while deleting MFATRNHDP".
049200191010           03  lncc_ErrDeletingMFATRNRRP   PIC X(80)
049300191010               VALUE "Error while deleting MFATRNRRP".
049400191010           03  lncc_ErrDeletingMFATRNREP   PIC X(80)
049500191010               VALUE "Error while deleting MFATRNREP".
049600191010           03  lncc_ErrDeletingMFATRHDRP   PIC X(80)
049700191010               VALUE "Error while deleting MFATRHDRP".
049800191010           03  lncc_ErrDeletingMFATRNP   PIC X(80)
049900191010               VALUE "Error while deleting MFATRNP".
050000191010           03  lncc_ErrUpdatingMFATRNP   PIC X(80)
050100191010               VALUE "Error while updating MFATRNP".
050200191010           03  lncc_ErrUpdatingMFATRNHDP PIC X(80)
050300191010               VALUE "Error while updating MFATRNHDP".
050400191010           03  lncc_ErrReadingMFABCHHDP   PIC X(80)
050500191010               VALUE "Error while reading MFABCHHDP".
050600191010           03  lncc_ErrDeletingMFABCHHDP   PIC X(80)
050700191010               VALUE "Error while deleting MFABCHHDP".
050800191010           03  lncc_ErrInsertingMFABCHHDP   PIC X(80)
050900191010               VALUE "Error while inserting MFABCHHDP".
051000191010           03  lncc_ErrUpdatingMFABCHHDP PIC X(80)
051100191010               VALUE "Error while updating MFABCHHDP".
051200191010           03  lncc_ErrUpdatingMFAACCIVP PIC X(80)
051300191010               VALUE "Error while updating MFAACCIVP".
051400191010           03  lncc_ErrGettingAccountMV    PIC X(80)
051500191010               VALUE "Error getting account MV".
051600191010           03  lncc_ErrGettingHighestMV    PIC X(80)
051700191010               VALUE "Error getting highest MV".
051800191010           03  lncc_ErrGettingUnitBal      PIC X(80)
051900191010               VALUE "Error getting Unit Bal".
052000191010           03  lncc_ErrGettingRPinfo       PIC X(80)
052100191010               VALUE "Error getting repayment info".
052200191010           03  lncc_ErrGettingRedemCode    PIC X(80)
052300191010               VALUE "Error getting redem code".
052400191010           03  lncc_ErrGettingReasonCode    PIC X(80)
052500191010               VALUE "Error getting reason code".
052600191010           03  lncc_ErrGettingLDAPmax      PIC X(80)
052700191010               VALUE "Error getting LDAP max".
052800191010           03  lncc_ErrGettingBatchInfo    PIC X(80)
052900191010               VALUE "Error while getting batch info".
053000191010           03  lncc_ErrGettingHeaderInfo  PIC X(80)
053100191010               VALUE "Error while getting header info".
053200191010           03  lncc_ErrGettingClosureInfo  PIC X(80)
053300191010               VALUE "Error while getting closure info".
053400191010           03  lncc_ErrInsertingWKACCIVP   PIC X(80)
053500191010               VALUE "Error while inserting WKACCIVP  ".
053600191010           03  lncc_ErrDeletingWKACCIVP    PIC  X(80)
053700191010               VALUE "Error while deleting WKACCIVP".
053800191010           03  lncc_ErrDroppingWKACCIVL    PIC  X(80)
053900191010               VALUE "Error while dropping WKACCIVL".
054000191010           03  lncc_ErrDroppingWKACCIVP    PIC  X(80)
054100191010               VALUE "Error while dropping WKACCIVP".
054200191010           03  lncc_ErrCreatingWKACCIVL    PIC  X(80)
054300191010               VALUE "Error while creating WKACCIVL".
054400191010           03  lncc_ErrCreatingWKACCIVP    PIC  X(80)
054500191010               VALUE "Error while creating WKACCIVP".
054600191010           03  lncc_ErrInsertingMFATRNP    PIC  X(80)
054700191010               VALUE "Error while inserting MFATRNP".
054800191010           03  lncc_ErrInsertingMFATRHDRP  PIC  X(80)
054900191010               VALUE "Error while inserting MFATRHDRP".
055000191010           03  lncc_ErrInsertingMFATRNHDP  PIC  X(80)
055100191010               VALUE "Error while inserting MFATRNHDP".
055200191010           03  lncc_ErrInsertingMFATRNRRP  PIC  X(80)
055300191010               VALUE "Error while inserting MFATRNRRP".
055400191010           03  lncc_ErrInsertingMFATRNREP  PIC  X(80)
055500191010               VALUE "Error while inserting MFATRNREP".
055600191010           03  lncc_ErrReadingMFATRNTYP   PIC  X(80)
055700191010               VALUE "Error while reading MFATRNTYP".
055800191010           03  lncc_GetSTRNum                 PIC X(45)
055900191010               VALUE "Error while retrieving trans #".
056000191010           03  lncc_GetAHANum                 PIC X(45)
056100191010               VALUE "Error while retrieving header #".
056200191010           03  lncc_GetSBTNum                 PIC X(45)
056300191010               VALUE "Error while retrieving batch #".
056400191010           03  lncc_UpdateSTRNum              PIC X(45)
056500191010               VALUE "Error while updating next trans #".
056600191010           03  lncc_UpdateAHANum              PIC X(45)
056700191010               VALUE "Error while updating next header #".
056800191010R88074     03  lncc_ErrInsertingMFATRNCP      PIC X(45)
056900191010  |            VALUE "Error while inserting into MFATRNCP".
057000191010  |        03  lncc_ErrInsertingMFATRNBP      PIC X(45)
057100191010  |            VALUE "Error while inserting into MFATRNBP".
057200191010  |        03  lncc_ErrDeletingMFATRNCP       PIC X(45)
057300191010  |            VALUE "Error while deleting  into MFATRNCP".
057400191010  |        03  lncc_ErrDeletingMFATRNBP       PIC X(45)
057500191010R88074         VALUE "Error while deleting  into MFATRNBP".
057600191010108486     03  lncc_ErrDeletingWKRDSPDSC      PIC X(45)
057700191010108486         VALUE "Error while deleting  from WKRDSPDSC".
057800191010108486     03  lncc_ErrInsertingWKRDSPDSC     PIC X(45)
057900191010108486         VALUE "Error while inserting into WKRDSPDSC".
058000191010      *RFS126482 - Start
058100191010           03  lncc_ErrGettingAccntTyp        PIC X(45)
058200191010               VALUE "Error while Retrieving MFAACCTYP".
058300191010           03  lncc_ErrGettingAccntTypCde     PIC X(45)
058400191010               VALUE "Error while Retrieving MFAACCNTP".
058500191010           03  lncc_ErrGettingProvCode        PIC X(45)
058600191010               VALUE "Error while Retrieving Province Code".
058700191010           03  lncc_ErrGettingAwdInfo         PIC X(45)
058800191010               VALUE "Error while Retrieving AWD Info".
058900191010           03  lncc_ErrGethstclPymtAmt        PIC X(45)
059000191010               VALUE "Error while Retrieving Pay amount".
059100191010           03  lncc_ErrOpenMfaaccpmp          PIC X(45)
059200191010               VALUE "Error Opening Mfaaccpmp".
059300191010      *RFS126482 - End
059400191010      * RFS 132349 - Start
059500191010           03  lncc_ErrReadCurrUntBal         PIC X(45)
059600191010               VALUE "Error while Reading Current Unit Bal".
059700191010           03  lncc_ErrReadUnitprice          PIC X(45)
059800191010               VALUE "Error while Reading Unit price".
059900191010      * RFS 132349 - End
060000191010147652     03  lncc_ErrGetAccrual             PIC X(45)
060100191010147652         VALUE "Error while Reading Accrual MFAACCIAP".
060200191010147652     03  lncc_ErrSelectRule             PIC X(45)
060300191010147652         VALUE "Error Selecting Contr/Redem Rule".
060400191010001480     03  lncc_ErrGettingAccrued         PIC X(45)
060500191010001480         VALUE "Error while fetching accrual ACCIAP".
060600191010
060700191010       01  Flags.
060800191010           03  lb_EndOfC1                  PIC 1.
060900191010               88  lb_EndOfC1True          VALUE B"1".
061000191010               88  lb_EndOfC1False         VALUE B"0".
061100191010           03  lb_EndOfC2                  PIC 1.
061200191010               88  lb_EndOfC2True          VALUE B"1".
061300191010               88  lb_EndOfC2False         VALUE B"0".
06140019101085040      03  lb_EndOfC3                  PIC 1.
061500191010  |            88  lb_EndOfC3True          VALUE B"1".
06160019101085040          88  lb_EndOfC3False         VALUE B"0".
061700191010147652     03  lb_EndOfC4                  PIC 1.
061800191010147652         88  lb_EndOfC4True          VALUE B"1".
061900191010147652         88  lb_EndOfC4False         VALUE B"0".
062000191010           03  lb_DAPExists                PIC 1.
062100191010               88  lb_DAPExistsTrue        VALUE B"1".
062200191010               88  lb_DAPExistsFalse       VALUE B"0".
062300191010147652     03  lb_TROExists                PIC 1.
062400191010147652         88  lb_TROExistsTrue        VALUE B"1".
062500191010147652         88  lb_TROExistsFalse       VALUE B"0".
062600191010           03  lb_AllRejected              PIC 1.
062700191010               88  lb_AllRejectedTrue      VALUE B"1".
062800191010               88  lb_AllRejectedFalse     VALUE B"0".
062900191010           03  lb_ClosureExists            PIC 1.
063000191010               88  lb_ClosureExistsTrue    VALUE B"1".
063100191010               88  lb_ClosureExistsFalse   VALUE B"0".
063200191010           03  lb_ClosureTrigger           PIC 1.
063300191010               88  lb_ClosureTriggerTrue   VALUE B"1".
063400191010               88  lb_ClosureTriggerFalse  VALUE B"0".
063500191010           03  lb_ProcessedClosure         PIC 1.
063600191010               88  lb_ProcessedClosureTrue  VALUE B"1".
063700191010               88  lb_ProcessedClosureFalse VALUE B"0".
063800191010           03  lb_GrantBondAfterChecked    PIC 1.
063900191010               88  lb_GrantBondAfterCheckedTrue  VALUE B"1".
064000191010               88  lb_GrantBondAfterCheckedFalse VALUE B"0".
064100191010           03  lb_OtherTrans               PIC 1.
064200191010               88  lb_OtherTransTrue       VALUE B"1".
064300191010               88  lb_OtherTransFalse      VALUE B"0".
064400191010           03  lb_GroupOK                  PIC 1.
064500191010               88  lb_GroupOKTrue          VALUE B"1".
064600191010               88  lb_GroupOKFalse         VALUE B"0".
064700191010           03  lb_PartiallyProcessed       PIC 1.
064800191010               88  lb_PartiallyProcessedTrue  VALUE B"1".
064900191010               88  lb_PartiallyProcessedFalse VALUE B"0".
065000191010      * RFS 158078 - Start
065100191010           03  lb_PlacedAsNet              PIC 1.
065200191010               88  lb_PlacedAsNetTrue      VALUE B"1".
065300191010               88  lb_PlacedAsNetFalse     VALUE B"0".
065400191010      * RFS 158078 - End
065500191010      * RFS 98866 - Start
065600191010           03  Lc_PriorWasSDSP             PIC X(01).
065700191010             88  Lb_PriorWasSDSPYes        VALUE "Y".
065800191010             88  Lb_PriorWasSDSPNo         VALUE "N".
065900191010      * RFS 98866 - End
066000191010      * RFS126482 - Start
066100191010           03  lc_EndOfMfaaccpmp          PIC X(1) VALUE Space.
066200191010             88  lb_EndOfMfaaccpmpYes              VALUE "Y".
066300191010             88  lb_EndOfMfaaccpmpNo               VALUE "N".
066400191010
066500191010       01  lc_filestatus                  PIC X(2).
066600191010         88  lc_FileSuccesfull                     VALUE "00".
066700191010         88  lc_EndOfFile                          VALUE "10".
066800191010         88  lc_NotFound                           VALUE "23".
066900191010
067000191010       01  lc_OpenFilesFlag               PIC X(1) VALUE "Y".
067100191010      * RFS126482 - End
067200191010
067300191010004568 01  lc_RejectionCode               PIC X(03).
067400191010
067500191010      * RFS134243 - Start
067600191010       01  lc_TradeRule        PIC  X(02).
067700191010         88  lb_TrDAP        VALUE "11", "12".
067800191010         88  lb_TrAHA        VALUE "13".
067900191010         88  lb_TrRep        VALUE "14".
068000191010147652   88  lb_TrTRO        VALUE "15".
068100191010      * RFS134243 - End
068200191010
068300191010       01  WorkingStorageFields.
068400191010           03  lc_RDSPModFlag              PIC X(01).
068500191010               88 lb_RDSPModYes    VALUE "Y".
068600191010               88 lb_RDSPModNo     VALUE "N".
068700191010           03  lc_X                        PIC  X(01).
068800191010      *RFS127070 - Start.
068900191010           03  lc_RdspTsfTaxModFlag        PIC X(01).
069000191010               88  lb_RdspTsfYes    VALUE "Y".
069100191010               88  lb_RdspTsfNo     VALUE "N".
069200191010      *RFS127070 - End.
069300191010      *RFS143702 - START
069400191010           03  li_GrossNetGap              PIC S9(09)V99.
069500191010           03  li_OrigMaxAHA               PIC S9(09)V99.
069600191010      *RFS143702 - END
069700191010           03  li_AsAtDate                 PIC S9(08).
069800191010           03  li_CalcAsAtDate             PIC S9(08).
069900191010           03  li_Idx                      PIC S9(04).
070000191010           03  li_TRNidx                   PIC S9(04).
070100191010           03  li_LastTRNidx               PIC S9(04).
070200191010           03  li_TDidx                    PIC S9(04).
070300191010           03  li_LastTDidx                PIC S9(04).
070400191010           03  li_DAPidx                   PIC S9(04).
070500191010           03  li_LastDAPidx               PIC S9(04).
070600191010           03  li_AHAidx                   PIC S9(04).
070700191010           03  lc_ReturnCode               PIC X(02).
070800191010               88  lb_ValidReturnCode      VALUE "00", "  ".
070900191010
071000191010           03  ln_AccountMV                PIC S9(15)V99.
071100191010           03  ln_TotalGrant               PIC S9(15)V99.
071200191010           03  ln_TotalBond                PIC S9(15)V99.
071300191010           03  ln_TermAdjustGrant          PIC S9(15)V99.
071400191010           03  ln_TermAdjustBond           PIC S9(15)V99.
071500191010120417*    03  ln_TotalCapital             PIC S9(15)V99.
071600191010120417     03  ln_TotalCapital             PIC S9(15)V99  VALUE 0.
071700191010           03  ln_TotalAHA                 PIC S9(15)V99.
071800191010147652     03  ln_DSE_AccountNo            PIC S9(09).
071900191010147652     03  ln_DSE_tradedate            PIC S9(09) COMP-3.
072000191010147652     03  ln_TransferAHA              PIC S9(15)V99.
072100191010147652     03  ln_InvestmentAccrual        PIC S9(10)V99999.
072200191010147652     03  li_Pass_CDSC_Account        PIC S9(9).
072300191010147652     03  lc_Pass-CDSC-Investment     PIC X(05).
072400191010131316     03  ln_AHADifferce              PIC S9(15)V99.
072500191010      *RFS1002416 begins
072600191010           03  ln_AHAToApply               PIC S9(15)V99.
072700191010      *RFS1002416 ends
072800191010           03  ln_TotAHAGrant              PIC S9(15)V99.
072900191010           03  ln_TotAHABond               PIC S9(15)V99.
073000191010           03  ln_AHAGrantLeft             PIC S9(15)V99.
073100191010           03  ln_AHABondLeft              PIC S9(15)V99.
073200191010           03  ln_GrantPortion             PIC S9(15)V99.
073300191010           03  ln_BondPortion              PIC S9(15)V99.
073400191010      * RFS 68035.29 - begins.
073500191010           03  ln_TotGrantPortion          PIC S9(15)V99.
073600191010      * RFS 68035.29- ends.
073700191010           03  ln_TotalAfter               PIC S9(15)V99.
073800191010           03  ln_GrantAfter               PIC S9(15)V99.
073900191010           03  ln_BondAfter                PIC S9(15)V99.
074000191010           03  ln_MarketValue              PIC S9(15)V99.
074100191010           03  lc_InvCode                  PIC  X(05).
074200191010           03  ln_SaveAccountNo            PIC S9(09).
074300191010           03  ln_SaveTradeDate            PIC S9(09).
074400191010           03  ln_SaveTradeYear            PIC S9(05).
074500191010           03  ln_TradeDate                PIC S9(09).
074600191010           03  ln_TradeDt REDEFINES ln_TradeDate.
074700191010               05  ln_TradeYear            PIC S9(05).
074800191010               05  FILLER                  PIC S9(04).
074900191010           03  ln_LastTradeDate            PIC S9(09).
07500019101080658 *    03  ln_RepaymentDate            PIC S9(09).
07510019101080658 *    03  ln_RepaymentReason          PIC S9(02).
075200191010           03  lc_HighestMVInv             PIC  X(05).
075300191010           03  lc_RedemCodeDAP             PIC  X(06).
075400191010           03  lc_RedemCodeAHA             PIC  X(06).
075500191010           03  lc_ReasonCodeDAP            PIC  X(02).
075600191010           03  lc_ReasonCodeLDAP           PIC  X(02).
075700191010           03  ln_DAPDate                  PIC S9(08).
075800191010      *        RFS68035.33 - Begins - Add PriceDate
075900191010           03  ln_PriceDate                PIC S9(08).
076000191010      *        RFS68035.33 - Ends
076100191010           03  ld_FormatD      FORMAT DATE "@Y%m%d".
076200191010           03  ln_RejPlacementDate         PIC S9(09).
076300191010           03  ln_RejTransNo               PIC S9(09).
076400191010           03  ln_RejTradeDate             PIC S9(09).
076500191010           03  lc_RejCode                  PIC  X(03).
076600191010           03  ln_AHAStartDate             PIC S9(09).
076700191010           03  ln_AHAEndDate               PIC S9(09).
076800191010           03  ln_LDAPMax                  PIC S9(13)V99.
076900191010           03  ln_LDAPYTD                  PIC S9(13)V99.
077000191010           03  lc_RestrictedYear           PIC  X(01).
077100191010           03  ln_PlacementDate            PIC S9(09) COMP-3.
077200191010           03  ln_TransNo                  PIC S9(09) COMP-3.
077300191010126482     03  ln_Whtax                    PIC S9(11)V99.
077400191010126482     03  ln_ActaualTax               PIC S9(11)V99.
077500191010126482     03  ln_ActaualPTax              PIC S9(11)V99.
077600191010           03  lc_BatchCode                PIC  X(04).
077700191010      *        RFS158078 - 1 5 8 7 3 9 - Begins
077800191010158078     03  lc_SDSPFlag                 PIC  X(01).
077900191010      *        RFS158078 - Ends
078000191010           03  ln_BatchDate                PIC S9(09).
078100191010           03  lc_SplitOption              PIC  X(01).
078200191010           03  lc_GrossOrNet               PIC  X(01).
078300191010           03  ln_GrossAmt                 PIC S9(11)V99 COMP-3.
078400191010           03  ln_NetAmt                   PIC S9(11)V99 COMP-3.
07850019101084456      03  ln_PercentAmt               PIC S9(07)V99 COMP-3.
07860019101084456      03  ln_UnitAmt                  PIC S9(13)V999 COMP-3.
078700191010           03  ln_UnitBal                  PIC S9(13)V999 COMP-3.
078800191010           03  lc_IndFundCode              PIC  X(05).
078900191010           03  ln_TrnCnt                   PIC S9(07).
079000191010           03  ln_BatchTransCount          PIC S9(07).
079100191010           03  ln_HeaderCnt                PIC S9(07).
07920019101084456 *    03  ln_MaxSeqNo                 PIC S9(04).
079300191010           03  ln_TotalBatchAmt            PIC S9(14)V99.
079400191010           03  ln_SELTransProcSeqNo        PIC S9(03).
079500191010           03  ln_DetailSeqNo              PIC S9(03).
079600191010           03  ln_CurrentTransNo           PIC S9(09).
079700191010           03  ln_CurrentBatchNo           PIC S9(04).
079800191010           03  ln_BatchTotalAmt            PIC S9(11)V9(02) COMP-3.
079900191010           03  ln_BatchTransCnt            PIC S9(07) COMP-3.
080000191010           03  ln_CurrentHeaderNo          PIC S9(04).
080100191010           03  li_ParmSysDate              PIC S9(08) VALUE 0.
080200191010           03  li_ParmSysTime              PIC S9(04) VALUE 0.
080300191010R88074     03  lc_SavePaymentType          PIC X(01).
080400191010  |        03  ln_SavePlacementDate        PIC S9(09).
080500191010  |        03  ln_SaveTransNo              PIC S9(09).
080600191010  |        03  lc_DeleteforPayment         PIC X(01).
080700191010  |            88  lb_DeleteForCheque      VALUE "C".
080800191010  |            88  lb_DeleteForEFT         VALUE "E".
080900191010R88074         88  lb_DeleteForNone        VALUE "N".
08100019101091272      03  ln_TotalRollover            PIC S9(15)V99.
081100191010127070     03  ln_SdspTaxPortion           PIC S9(11)V99.
081200191010      * RFS 98866 - Start
081300191010           03  li_TotalDAPGrant            PIC S9(11)V9(02).
081400191010           03  li_TotalDAPBond             PIC S9(11)V9(02).
081500191010           03  li_TotalProcessedTaxable    PIC S9(09)V99.
081600191010           03  ld-PrevDate                 FORMAT DATE "@Y%m%d".
081700191010      * RFS 98866 - End
081800191010      * RFS117402 - Begins
081900191010           03  lc_SDSPSet                  PIC X(01).
082000191010               88  lb_SDSPSetYes           VALUE "Y".
082100191010               88  lb_SDSPSetNo            VALUE "N".
082200191010      * RFS117402 - Ends
082300191010147652     03  li_TotalTransferNet         PIC S9(09)V99.
082400191010147652     03  li_TotalTransferCDSC        PIC S9(09)V99.
082500191010147652     03  li_TotalTransferClawback    PIC S9(09)V99.
082600191010147652     03  li_DescendingClawback       PIC S9(09)V99.
082700191010147652     03  Lc_DSEDAPFlag               PIC X(01).
082800191010147652     03  Lc_DSEXFRFlag               PIC X(01).
082900191010108486     03  li_CDSC_Charged             PIC S9(09)V99.
083000191010108486     03  lc_GRNTNFFlag               PIC  X(01).
083100191010108486         88 lc_GRNTNFFound           VALUE B"1".
083200191010108486         88 lc_GRNTNFNotFound        VALUE B"0".
083300191010108486     03  li_Calc_CDSC                PIC S9(09)V99.
083400191010108486     03  li_CDSCClawedBack           PIC S9(09)V99.
083500191010108486     03  li_Counter                  PIC S9(09).
083600191010      *RFS126482 - Start
083700191010           03  li_ArraySize                PIC S9(09).
083800191010           03  lc_LDAPPeriodsSet           PIC X(01).
083900191010           03  lc_AccTypCde                PIC X(05).
084000200914      *RFS1103281 Begins
084100200914           03  lc_PrevAccTypCde            PIC X(05).
084200200914      *RFS1103281 Ends
084300191010           03  lc_AccntpAccTypCde          PIC X(05).
084400191010           03  li_Year                     PIC S9(04).
084500191010           03  lc_Province                 PIC X(03).
084600191010           03  li_DTCAmt                   PIC 9(11)V99.
084700191010           03  li_BPAAmt                   PIC 9(11)V99.
084800191010           03  li_TempDTCBPA               PIC 9(11)V99.
084900191010           03  li_DTCBPA                   PIC 9(11)V99.
085000191010           03  li_ProvDTCBPA               PIC 9(11)V99.
085100191010           03  lc_FreCode                  PIC X(02).
085200191010           03  li_historyDAPLDAPtotal      PIC S9(11)V99.
085300191010           03  li_historyDAPLDAPNTtotal    PIC S9(11)V99.
085400191010           03  li_historyLDAPtotal         PIC S9(11)V99.
085500191010           03  li_historyLDAPNTtotal       PIC S9(11)V99.
085600191010           03  li_YTDDAPLDAPTaxable        PIC 9(11)V99.
085700191010           03  li_YTDLDAPTaxable           PIC 9(11)V99.
085800191010           03  lc_ProvinceCode             PIC X(03).
085900191010001480     03  li_AccruedInterest          PIC S9(09)V99.
086000191010   |       03  lc_AllUnitRedem             PIC X(01).
086100191010   |           88 lb_AllUnitRedemYes       VALUE "Y".
086200191010001480         88 lb_AllUnitRedemNo        VALUE "N".
086300191010181302     03  li_AccrualCount             PIC S9(09).
086400200918102330     03  li_QualifyingDAPCount       PIC S9(03).
086500191010
086600191010
086700191010       01  li_StartDate                    PIC S9(08).
086800191010       01  li_AccountNo                    PIC S9(09).
086900191010       01  lc_Frequency                    PIC  X(02).
087000191010       01  li_PayPerAnnum                  PIC S9(03).
087100191010134243 01  li_TotalClosureDAPTaxable       PIC S9(09)V99.
087200191010133572 01  li_TotalClosureDAPGross         PIC S9(09)V99.
087300191010181302 01  li_TotalClosureAHAGross         PIC S9(09)V99.
087400191010133572 01  li_UpdateMV                     PIC S9(15)V99.
087500210723186761 01  Lc_ReversalCode                 PIC X(04) VALUE SPACES.
087600191010
087700191010      * RFS 132349 - Start
087800191010       01  lc_calGrosAmt.
087900191010         03  li_AcctNo                     PIC S9(09).
088000191010         03  lc_InvCde                     PIC  X(05).
088100191010         03  li_TradDat                    PIC S9(09).
088200191010         03  lc_SplOption                  PIC  X(01).
088300191010         03  ln_UntBal                     PIC S9(13)V999 COMP-3.
088400191010         03  ln_UntAmt                     PIC S9(13)V999 COMP-3.
088500191010         03  ln_UntPric                    PIC S9(09)V9(4) COMP-3.
088600191010         03  ln_CalGross                   PIC S9(13)V99.
088700191010         03  ln_PerAmt                     PIC S9(07)V99.
088800191010      * RFS 132349 - End
088900191010
089000191010       01  lr_AccountTypeParmArray.
089100191010         03  lr_AccountTypeParm  OCCURS 1 TO 30000
089200191010                                 DEPENDING ON li_ArraySize
089300191010                                 INDEXED BY ATPIDX.
089400191010           05  lc_ATPAccountTypeCode  PIC X(05).
089500191010           05  lc_ATPTaxYear          PIC 9(05).
089600191010           05  lc_ATPProvinceCode     PIC X(03).
089700191010           05  lc_ATPDTCAmt           PIC 9(11)V99.
089800191010           05  lc_ATPBPAAmt           PIC 9(11)V99.
089900191010      *RFS126482-End
090000191010
090100191010      * RFS123925 - Start
090200191010           03  ldd_Date         OCCURS  90 TIMES.
090300191010               05  ldd_TD                    PIC S9(09).
090400191010               05  ldd_TotalDAP              PIC S9(13)V99.
090500191010126482         05  ldd_TotalDAPLDAP          PIC S9(13)V99.
090600191010126482         05  ldd_TotalLDAP             PIC S9(13)V99.
090700191010143313         05  ldd_UseDAPtd              PIC X.
090800191010
090900191010           03  ln_NewAHA                   PIC S9(15)V99.
091000191010dm         03  li_SaveTRNidx               PIC S9(04).
091100191010      * RFS123925 - End
091200191010
091300191010125258 01  ld_TradeDate                    PIC S9(08) COMP-3.
091400191010      *_______________________________________________________________*
091500191010      * This array is used to hold transactions for an account
091600191010      *_______________________________________________________________*
091700191010       01  ltr_AccountTransArray.
091800191010           03  ltr_AccountTrans  OCCURS 500 TIMES.
091900191010               05  ltr_PlacementDate   PIC S9(09).
092000191010               05  ltr_TransNo         PIC S9(09).
092100191010               05  ltr_ProcessDate     PIC S9(09).
092200191010               05  ltr_TradeDate       PIC S9(09).
092300191010               05  ltr_TransType       PIC  X(03).
092400191010               05  ltr_TransOrigin     PIC  X(03).
092500191010               05  ltr_AccountNo       PIC S9(09).
092600191010               05  ltr_InvCode         PIC  X(05).
092700191010               05  ltr_IndFundCode     PIC  X(05).
092800191010               05  ltr_DealerCode      PIC  X(04).
092900191010               05  ltr_DealerRepCode   PIC  X(06).
093000191010               05  ltr_GrossAmt        PIC S9(13)V99.
093100191010               05  ltr_NetAmt          PIC S9(13)V99.
093200191010               05  ltr_UnitAmt         PIC S9(13)V999.
093300191010               05  ltr_PerAmt          PIC S9(07)V99.
093400191010               05  ltr_GrossOrNet      PIC  X(01).
093500191010               05  ltr_SplitOption     PIC  X(01).
093600191010               05  ltr_RedemCode       PIC  X(06).
093700191010               05  ltr_RedemRule       PIC  X(02).
093800191010                   88  ltr_DAP         VALUE "11", "12".
093900191010                   88  ltr_AHA         VALUE "13".
094000191010                   88  ltr_REP         VALUE "14".
094100191010147652             88  ltr_TRO         VALUE "15".
094200191010               05  ltr_WaiveDSC        PIC  X(01).
094300191010               05  ltr_WaiveERF        PIC  X(01).
094400191010               05  ltr_TreatAWD        PIC  X(01).
094500191010               05  ltr_RejectCode      PIC  X(03).
094600191010                   88  ltr_RejectionOK      VALUES SPACES
094700191010                             "000" "00 " "0  " "  0" " 00".
094800191010                   88  ltr_InsufficientBal    VALUES "11 " " 11".
094900191010               05  ltr_TotAHAGrant     PIC S9(13)V99.
095000191010               05  ltr_TotAHABond      PIC S9(13)V99.
095100191010               05  ltr_AHAGrant        PIC S9(13)V99.
095200191010               05  ltr_AHABond         PIC S9(13)V99.
095300191010               05  ltr_ResultGross     PIC S9(13)V99.
095400191010               05  ltr_ResultNet       PIC S9(13)V99.
095500191010               05  ltr_RepaymentDate   PIC S9(09).
095600191010               05  ltr_RepaymentReason PIC S9(02).
095700191010               05  ltr_ProcessedDAP    PIC  X(01).
095800191010               05  ltr_DetailSeqNo     PIC S9(03).
09590019101080658          05  ltr_WaiveDS5        PIC  X(01).
09600019101084456          05  ltr_TotalCapital    PIC S9(15)V99.
09610019101091272          05  ltr_TotalRollover   PIC S9(15)V99.
09620019101084456          05  ltr_TotalGrant      PIC S9(15)V99.
09630019101084456          05  ltr_TotalBond       PIC S9(15)V99.
096400191010R88074         05  ltr_PaymentType     PIC  X(01).
09650019101098866          05  ltr_TaxableAmount   PIC S9(11)V9(02).
09660019101098866          05  ltr_DAPBond         PIC S9(11)V9(02).
09670019101098866          05  ltr_DAPGrant        PIC S9(11)V9(02).
096800191010      *        RFS117402 - Begins - Add SDSP flag
096900191010               05  ltr_SDSP            PIC  X(01).
097000191010                   88 ltr_SDSPYes       VALUE "Y".
097100191010                   88 ltr_SDSPNo        VALUE "N".
097200191010      *        RFS117402 - Ends
097300191010      *        RFS108486 - Starts
097400191010               05  ltr_CDSC_Charged    PIC S9(09)v99.
097500191010               05  ltr_CDSC_ToCharge   PIC S9(09)v99.
097600191010126482         05  ltr_WHTaxRateBasis  PIC S9(11)V99.
097700191010126482         05  ltr_ActualTax       PIC S9(11)V99.
097800191010126482         05  ltr_ActualProvTax   PIC S9(11)V99.
097900191010143313         05  ltr_AHATDFlag       PIC X.
098000191010      *        RFS108486 - End
098100191010      *
098200191010      *_______________________________________________________________*
098300191010      * This array is used to hold DAP and new AHA/DAP transactions
098400191010      *_______________________________________________________________*
098500191010       01  ldh_DAPAHATransArray.
09860019101098866 *    03  ldh_Date         OCCURS 100 TIMES.
098700191010      *RFS126482-Start (compilation issue reduced to 88)
09880019101098866 *    03  ldh_Date         OCCURS  90 TIMES.
098900191010           03  ldh_Date         OCCURS  88 TIMES.
099000191010      *RFS126482-End
099100191010               05  ldh_TD              PIC S9(09).
099200191010               05  ldh_AHAGroup        PIC  X(01).
099300191010                   88  ldh_AHAGroupYes  VALUE "Y".
099400191010                   88  ldh_AHAGroupNo   VALUE "N".
099500191010               05  ldh_LastDetailSeqNo     PIC S9(03).
099600191010      *        05  ldh_DAPAHATrans  OCCURS 500 TIMES.
099700191010               05  ldh_DAPAHATrans  OCCURS 450 TIMES.
099800191010                   07  ldh_PlacementDate   PIC S9(09).
099900191010                   07  ldh_TransNo         PIC S9(09).
100000191010                   07  ldh_ProcessDate     PIC S9(09).
100100191010                   07  ldh_TradeDate       PIC S9(09).
100200191010                   07  ldh_TransType       PIC  X(03).
100300191010                   07  ldh_TransOrigin     PIC  X(03).
100400191010                   07  ldh_AccountNo       PIC S9(09).
100500191010                   07  ldh_InvCode         PIC  X(05).
100600191010                   07  ldh_IndFundCode     PIC  X(05).
100700191010                   07  ldh_DealerCode      PIC  X(04).
100800191010                   07  ldh_DealerRepCode   PIC  X(06).
100900191010                   07  ldh_GrossAmt        PIC S9(13)V99.
101000191010                   07  ldh_NetAmt          PIC S9(13)V99.
101100191010                   07  ldh_UnitAmt         PIC S9(13)V999.
101200191010                   07  ldh_PerAmt          PIC S9(07)V99.
101300191010                   07  ldh_GrossOrNet      PIC  X(01).
101400191010                   07  ldh_SplitOption     PIC  X(01).
101500191010                   07  ldh_RedemCode       PIC  X(06).
101600191010                   07  ldh_RedemRule       PIC  X(02).
101700191010                       88  ldh_DAP         VALUE "11", "12".
101800191010                       88  ldh_AHA         VALUE "13".
101900191010                       88  ldh_REP         VALUE "14".
102000191010147652                 88  ldh_TRO         VALUE "15".
102100191010                   07  ldh_WaiveDSC        PIC  X(01).
102200191010                   07  ldh_WaiveERF        PIC  X(01).
102300191010                   07  ldh_TreatAWD        PIC  X(01).
102400191010                   07  ldh_RejectCode      PIC  X(03).
102500191010                       88  ldh_RejectionOK      VALUES SPACES
102600191010                                 "000" "00 " "0  " "  0" " 00".
102700191010                       88  ldh_InsufficientBal    VALUES "11 " " 11".
102800191010                   07  ldh_TotAHAGrant     PIC S9(13)V99.
102900191010                   07  ldh_TotAHABond      PIC S9(13)V99.
103000191010                   07  ldh_AHAGrant        PIC S9(13)V99.
103100191010                   07  ldh_AHABond         PIC S9(13)V99.
103200191010                   07  ldh_ResultGross     PIC S9(13)V99.
103300191010                   07  ldh_ResultNet       PIC S9(13)V99.
103400191010                   07  ldh_RepaymentDate   PIC S9(09).
103500191010                   07  ldh_RepaymentReason PIC S9(02).
103600191010                   07  ldh_ProcessedDAP    PIC  X(01).
103700191010                   07  ldh_DetailSeqNo     PIC S9(03).
10380019101080658              07  ldh_WaiveDS5        PIC  X(01).
10390019101084456              07  ldh_TotalCapital    PIC S9(15)V99.
10400019101091272              07  ldh_TotalRollover   PIC S9(15)V99.
10410019101084456              07  ldh_TotalGrant      PIC S9(15)V99.
10420019101084456              07  ldh_TotalBond       PIC S9(15)V99.
104300191010R88074             07  ldh_PaymentType     PIC  X(01).
104400191010  |                    88 ldh_PayTypeCheque VALUE "C".
104500191010R88074                 88 ldh_PayTypeEFT    VALUE "E".
10460019101098866              07  ldh_TaxableAmount   PIC S9(11)V9(02).
10470019101098866              07  ldh_DAPBond         PIC S9(11)V9(02).
10480019101098866              07  ldh_DAPGrant        PIC S9(11)V9(02).
104900191010      *            RFS117402 - Begins - Add SDSP flag
105000191010                   07  ldh_SDSP            PIC  X(01).
105100191010                       88 ldh_SDSPYes       VALUE "Y".
105200191010                       88 ldh_SDSPNo        VALUE "N".
105300191010      *            RFS117402 - Ends
105400191010      *        RFS108486 - Starts
105500191010                   07  ldh_CDSC_Charged    PIC S9(09)v99.
105600191010                   07  ldh_CDSC_ToCharge   PIC S9(09)v99.
105700191010126482             07  ldh_WHTaxRateBasis  PIC S9(11)V99.
105800191010126482             07  ldh_ActualTax       PIC S9(11)V99.
105900191010126482             07  ldh_ActualProvTax   PIC S9(11)V99.
106000191010143313             07  ldh_AHATDFlag       PIC X.
106100191010      *        RFS108486 - End
106200191010
106300191010      * RFS 80658 - begins. - this array is no longer used
106400191010      *_______________________________________________________________*
106500191010      * This array is used for a backup of the DAP/AHA array
106600191010      *_______________________________________________________________*
106700191010      *01  lsv_DAPAHATransArray.
106800191010      *    03  lsv_Date         OCCURS 100 TIMES.
106900191010      *        05  lsv_TD              PIC S9(09).
107000191010      *        05  lsv_AHAGroup        PIC  X(01).
107100191010      *            88  lsv_AHAGroupYes  VALUE "Y".
107200191010      *            88  lsv_AHAGroupNo   VALUE "N".
107300191010      *        05  lsv_LastDetailSeqNo     PIC S9(03).
107400191010      *        05  lsv_DAPAHATrans  OCCURS 500 TIMES.
107500191010      *            07  lsv_PlacementDate   PIC S9(09).
107600191010      *            07  lsv_TransNo         PIC S9(09).
107700191010      *            07  lsv_ProcessDate     PIC S9(09).
107800191010      *            07  lsv_TradeDate       PIC S9(09).
107900191010      *            07  lsv_TransType       PIC  X(03).
108000191010      *            07  lsv_TransOrigin     PIC  X(03).
108100191010      *            07  lsv_AccountNo       PIC S9(09).
108200191010      *            07  lsv_InvCode         PIC  X(05).
108300191010      *            07  lsv_IndFundCode     PIC  X(05).
108400191010      *            07  lsv_DealerCode      PIC  X(04).
108500191010      *            07  lsv_DealerRepCode   PIC  X(06).
108600191010      *            07  lsv_GrossAmt        PIC S9(13)V99.
108700191010      *            07  lsv_NetAmt          PIC S9(13)V99.
108800191010      *            07  lsv_UnitAmt         PIC S9(13)V999.
108900191010      *            07  lsv_PerAmt          PIC S9(07)V99.
109000191010      *            07  lsv_GrossOrNet      PIC  X(01).
109100191010      *            07  lsv_SplitOption     PIC  X(01).
109200191010      *            07  lsv_RedemCode       PIC  X(06).
109300191010      *            07  lsv_RedemRule       PIC  X(02).
109400191010      *                88  lsv_DAP         VALUE "11", "12".
109500191010      *                88  lsv_AHA         VALUE "13".
109600191010      *                88  lsv_REP         VALUE "14".
109700191010      *            07  lsv_RejectCode      PIC  X(03).
109800191010      *                88  lsv_RejectionOK      VALUES SPACES
109900191010      *                      "000" "00 " "0  " "  0" " 00".
110000191010      *                88  lsv_InsufficientBal    VALUES "11 " " 11".
110100191010      *            07  lsv_TotAHAGrant     PIC S9(13)V99.
110200191010      *            07  lsv_TotAHABond      PIC S9(13)V99.
110300191010      *            07  lsv_AHAGrant        PIC S9(13)V99.
110400191010      *            07  lsv_AHABond         PIC S9(13)V99.
110500191010      *            07  lsv_ResultGross     PIC S9(13)V99.
110600191010      *            07  lsv_ResultNet       PIC S9(13)V99.
110700191010      *            07  lsv_RepaymentDate   PIC S9(09).
110800191010      *            07  lsv_RepaymentReason PIC S9(02).
110900191010      *            07  lsv_ProcessedDAP    PIC  X(01).
111000191010      *            07  lsv_DetailSeqNo     PIC S9(03).
11110019101080658 *            07  lsv_WaiveDS5        PIC  X(01).
11120019101084456 *            07  lsv_TotalCapital    PIC S9(15)V99.
11130019101084456 *            07  lsv_TotalGrant      PIC S9(15)V99.
11140019101084456 *            07  lsv_TotalBond       PIC S9(15)V99.
111500191010      * RFS 80658 - ends.   - this array is no longer used
111600191010
111700191010      *RFS123925 - Start
111800191010       01  lc_RDSPSysParms.
111900191010           03  FILLER1                     PIC X(121).
112000191010           03  lc_AHAFactor                PIC X(05).
112100191010           03  li_AHAFactor redefines lc_AHAFactor PIC S9(2)V999.
112200191010           03  FILLER2                     PIC  X(08).
112300191010      *RFS123925 - End
112400191010       01  lc_C1Vars.
112500191010           03 ln_HeaderNo                  PIC S9(09).
112600191010           03 ln_RejectedCnt               PIC S9(04).
112700191010
112800191010       01  lc_C2Vars.
112900191010           03  lc2_PlacementDate           PIC S9(09) COMP-3.
113000191010           03  lc2_TransNo                 PIC S9(09) COMP-3.
113100191010           03  lc2_ProcessDate             PIC S9(09) COMP-3.
113200191010           03  lc2_TradeDate               PIC S9(09) COMP-3.
113300191010           03  lc2_TransType               PIC  X(03).
113400191010           03  lc2_TransOrigin             PIC  X(03).
113500191010           03  lc2_AccountNo               PIC S9(09).
113600191010           03  lc2_InvCode                 PIC  X(05).
113700191010           03  lc2_IndFundCode             PIC  X(05).
113800191010           03  lc2_DealerCode              PIC  X(04).
113900191010           03  lc2_DealerRepCode           PIC  X(06).
114000191010           03  lc2_GrossAmt                PIC S9(11)V99 COMP-3.
114100191010           03  lc2_NetAmt                  PIC S9(11)V99 COMP-3.
114200191010           03  lc2_UnitAmt                 PIC S9(11)V999 COMP-3.
114300191010           03  lc2_PerAmt                  PIC S9(05)V99 COMP-3.
114400191010           03  lc2_GrossOrNet              PIC  X(01).
114500191010           03  lc2_SplitOption             PIC  X(01).
114600191010           03  lc2_RedemCode               PIC  X(06).
114700191010R88074     03  lc2_PaymentType             PIC  X(01).
114800191010           03  lc2_RedemRule               PIC  X(02).
114900191010               88  lc_DAP                  VALUE "11", "12".
115000191010               88  lc_AHA                  VALUE "13".
115100191010               88  lc_REP                  VALUE "14".
115200191010147652         88  lc_TRO                  VALUE "15".
115300191010           03  lc2_WaiveDSC                PIC  X(01).
115400191010           03  lc2_WaiveERF                PIC  X(01).
115500191010           03  lc2_TreatAWD                PIC  X(01).
11560019101080658      03  lc2_RepaymentDate           PIC S9(09) COMP-3.
11570019101080658      03  lc2_WaiveDS5                PIC  X(01).
11580019101080658      03  lc2_RepaymentReason         PIC S9(02).
115900191010143313     03  lc2_AHATDFlag               PIC X(01).
116000191010
11610019101085040b 01  lc_C3Vars.
116200191010  |        03  lc3_PlacementDate           PIC S9(09) COMP-3.
116300191010  |        03  lc3_TransNo                 PIC S9(09) COMP-3.
116400191010  |        03  lc3_TradeDate               PIC S9(09) COMP-3.
116500191010  |        03  lc3_TransType               PIC  X(03).
116600191010  |        03  lc3_AccountNo               PIC S9(09).
116700191010  |        03  lc3_InvCode                 PIC  X(05).
116800191010  |        03  lc3_GrossAmt                PIC S9(11)V99 COMP-3.
116900191010  |        03  lc3_ContRedCode             PIC  X(06).
11700019101085040e     03  lc3_ContRedCode_Rule        PIC  X(02).
117100191010      * RFS147652 - START
117200191010       01  lc_C4Vars.
117300191010           03  ln_C4_DSEPlacement_Date        PIC S9(09) COMP-3.
117400191010           03  ln_C4_DSETrans_No              PIC S9(09) COMP-3.
117500191010           03  ln_C4_DSE_Tradedate            PIC S9(09) COMP-3.
117600191010           03  ln_C4_DSE_AccountNo            PIC S9(09).
117700191010           03  lc_C4_DSE_Rule                 PIC X(02).
117800191010      * RFS147652 - END
117900191010
118000191010       01  lc_MFATRNP.
118100191010           COPY DD-ALL-FORMATS OF MFATRNP.
118200191010
118300191010       01  lc_MFATRHDRP.
118400191010           COPY DD-ALL-FORMATS OF MFATRHDRP.
118500191010
118600191010       01  lc_MFATRNHDP.
118700191010           COPY DD-ALL-FORMATS OF MFATRNHDP.
118800191010
118900191010       01  lc_MFATRNRRP.
119000191010           COPY DD-ALL-FORMATS OF MFATRNRRP.
119100191010
119200191010       01  lc_MFATRNREP.
119300191010           COPY DD-ALL-FORMATS OF MFATRNREP.
119400191010
119500191010       01  lc_MFABCHHDP.
119600191010           COPY DD-ALL-FORMATS OF MFABCHHDP
119700191010           REPLACING CURRENCY BY CURRENCY-DDS.
119800191010
119900191010       01  lc_WKRDSPDSC.
120000191010           COPY DD-ALL-FORMATS OF WKRDSPDSC.
120100191010
120200191010      *RFS181302-Starts.
120300191010       01  lc_WKRDSP.
120400191010           03  lc5_PlacementDate           PIC S9(09).
120500191010           03  lc5_TransNo                 PIC S9(09).
120600191010           03  lc5_Charge                  PIC S9(09)v99.
120700191010           03  lc5_TriggerInterestGen      PIC X(01).
120800191010           03  lc5_InvestmentCode          PIC X(05).
120900191010           03  lc5_AccountNO               PIC S9(09).
121000191010           03  lc5_DetailSeqNO             PIC S9(03).
121100191010           03  lc5_TRHDRPExists            PIC X(01).
121200191010      *RFS181302-Ends.
121300191010
121400191010      *RFS1019285 - Starts.
121500191010       01  Lc_DeceasedClosure              PIC X(01).
121600191010           88  Lb_DeceasedClosureYes       VALUE "Y".
121700191010           88  Lb_DeceasedClosureNo        VALUE "N".
121800191010      *RFS1019285 - Ends.
121900191010
122000191015      *RFS1008981 - Starts.
122100191015       01  Lc_WaiveDSC                     PIC X(01).
122200191015           88  Lb_WaiveDSCYes              VALUE "Y".
122300191015           88  Lb_WaiveDSCNo               VALUE "N".
122400191015
122500191015       01  li_TradeDateOut                 PIC S9(09).
122600191015      *RFS1008981 - Ends.
122700191015
122800191010       COPY Cpprcdtp.
122900191010       COPY Cpctlp.
123000191010       COPY CPTRNPST1.
123100191010       COPY CPYRDSAHA.
123200191010       COPY CPLDAPMAX.
12330019101084456  COPY CPGETMKVT.
12340019101098866  COPY CPRDSDATA.
123500200918102330 COPY CPRDSPDS5.
123600191010
123700191010       LINKAGE SECTION.
123800191010       PROCEDURE DIVISION.
123900191010
124000191010      * _________________________________
124100191010       Main.
124200191010      * _________________________________
124300191010           INITIALIZE lc_RDSPModFlag.
124400191010           CALL "RTVMODAUTH" USING lncc_RDSP  lc_RDSPModFlag.
124500191010
124600191010           IF lb_RDSPModYes
124700191010      * ______________________________________________________________*
124800191010      * Cleanup groups rejected by TRNPST. Headers that have all
124900191010      * transactions rejected within the group.
125000191010      * ______________________________________________________________*
125100191010              PERFORM Declare_Open_C1
125200191010              PERFORM Fetch_C1
125300191010              PERFORM Cleanup_Rejected_Headers UNTIL lb_EndOfC1True
125400191010              PERFORM Close_C1
125500191010              PERFORM Delete_Stand_Alone_DAPs
125600191010              PERFORM Clear_Rejection_Code
125700191010      *       RFS 68035.22 - Begins
125800191010      *RFS1000873 begins
125900191010              PERFORM Get_ProcessDate
126000191010      *RFS1000873 ends
126100191010              PERFORM Reject_Rule_13_14_Bad_Trans
12620019101085040         PERFORM Reject_Incorrect_Backdates
126300191010147652        PERFORM Reject_SameDay_DAPLDAP_TRO
126400191010      *       RFS 68035.22 - Ends
126500191010      * ______________________________________________________________*
126600191010      * Process all unprocessed redemptions (SEL, SWO, TRO)
126700191010      * one account at the time.
126800191010      * ______________________________________________________________*
126900191010              PERFORM Initial_Logic
127000191010              PERFORM Declare_Open_C2
127100191010              PERFORM Fetch_C2
127200191010              PERFORM Process_C2 UNTIL lb_EndOfC2True
127300191010              PERFORM Close_C2
127400191010              PERFORM End_Of_Program
127500191010           END-IF.
127600191010
127700191010           GOBACK.
127800191010
127900191010      * _________________________________
128000191010       Cleanup_Rejected_Headers.
128100191010      * _________________________________
128200191010           PERFORM Check_If_All_Rejected.
128300191010
128400191010           IF lb_AllRejectedTrue
128500191010              PERFORM Check_For_Closure
128600191010
128700191010      * ______________________________________________________________*
128800191010      * Since we are reusing the closure trigger transaction to redeem
128900191010      * AHA, the split option code could have been changed to $.
129000191010      * Update the split option code back to A for closure trigger
129100191010      * transaction, and adjust user batch header with gross amt.
129200191010      * ______________________________________________________________*
129300191010              IF lb_ClosureExistsTrue AND lc_SplitOption NOT = lncc_A
129400191010                 PERFORM Adjust_User_Batch
129500191010                 PERFORM Update_MFATRNP
129600191010              END-IF
129700191010
129800191010              PERFORM Delete_MFATRNHDP
129900191010              PERFORM Delete_MFATRNRRP
130000191010              PERFORM Delete_MFATRNREP
130100191010              PERFORM Get_AHA_Batch_Info
130200191010      *       RFS 117402 - Begins - Don't process batch is date is zero
130300191010      *                             SDSP grouped transactions do not have
130400191010      *                             AHA transactions
130500191010      *       PERFORM Adjust_AHA_Batch
130600191010      *       PERFORM Check_Batch_Trans_Count
130700191010              IF ln_BatchDate NOT = ZERO
130800191010                 PERFORM Adjust_AHA_Batch
130900191010      *RFS123925 - Start
131000191010           MOVE lncc_DeleteMode    TO pc_Process-Mode
131100191010           MOVE ZEROS              TO pd_Placement-Date
131200191010           MOVE ZEROS              TO pi_Trans-No
131300191010dm         MOVE ln_HeaderNo        TO pi_Header-No
131400191010      * RFS135385 - Start
131500191010           MOVE ZEROS              TO pi_Account-No
131600191010           MOVE ZEROS              TO pi_Transfer-Seq-No
131700191010      * RFS135385 - End
131800191010           CALL "FXAHARED" USING pd_Placement-Date
131900191010                                 pi_Trans-No
132000191010                                 pc_Process-Mode
132100191010dm                               pi_Header-No
132200191010      * RFS135385 - Start
132300191010                                 pi_Account-No
132400191010                                 pi_Transfer-Seq-No
132500191010      * RFS135385 - End
132600191010      *RFS123925 - End
132700191010                 PERFORM Check_Batch_Trans_Count
132800191010              END-IF
132900191010      *       RFS 117402 - Ends
133000191010R88074        PERFORM Delete_MFATRNCP
133100191010R88074        PERFORM Delete_MFATRNBP
133200191010              PERFORM Delete_MFATRNP
133300191010              PERFORM Delete_MFATRHDRP
133400191010           END-IF.
133500191010
133600191010           PERFORM Fetch_C1.
133700191010
133800191010
133900191010      * _________________________________
134000191010       Initial_Logic.
134100191010      * _________________________________
134200191010           INITIALIZE ln_CurrentBatchNo
134300191010                      ln_CurrentTransNo
134400191010                      ln_CurrentHeaderNo
134500191010                      ln_BatchTotalAmt
134600191010                      ln_BatchTransCnt
134700191010                      ln_HeaderCnt.
134800191010
134900191010127070     CALL "RTVMODAUTH"  USING
135000191010127070                        lnc_RdspTsfTax  lc_RdspTsfTaxModFlag
135100191010      *RFS126482-Start
135200191010           INITIALIZE lc_FreCode
135300191010                      li_DTCBPA
135400191010                      li_ProvDTCBPA
135500191010                      li_PayPerAnnum.
135600191010           IF lc_OpenFilesFlag = lncc_Y
135700191010              MOVE lncc_N TO lc_OpenFilesFlag
135800191010              OPEN  INPUT Account-Type-Parms
135900191010              IF lc_filestatus  NOT = lncc_00
136000191010                 SET lncc_Err_88 TO TRUE
136100191010                 MOVE lncc_ErrOpenMfaaccpmp TO lc_sqlErrShortDESCR
136200191010                 PERFORM SQL_Fail_Process
136300191010              END-IF
136400191010           END-IF.
136500191010      *RFS126482-End
136600191010           SET Pass-Action-Getdta OF
136700191010               Comm-Cpprcdtp-Parameters TO TRUE.
136800191010           CALL "FXPRCDTP" USING Cpwprcdtp-Linkage
136900191010                                 Comm-Cpprcdtp-Parameters.
137000191010           MOVE PRCDTP-AS-AT-DATE OF CPWPRCDTP-LINKAGE  TO li_AsAtDate.
137100191010123925     ACCEPT lc_RDSPSysParms   FROM lc_DataArea FOR "MFARDSPSP".
137200191010
137300191010126482     PERFORM Load-Account-Type-Parm-Array.
137400191010
137500191010      * ______________________________________________________________*
137600191010      * Create a work file to keep track of the highest market value
137700191010      * fund within an account.
137800191010      * ______________________________________________________________*
137900191010           EXEC SQL
138000191010            DROP INDEX WKACCIVL
138100191010           END-EXEC.
138200191010
138300191010           MOVE SQLSTATE TO lc_sqlStates.
138400191010           IF lncc_sqlTblNotExists OR lncc_sqlSuccessful
138500191010              CONTINUE
138600191010           ELSE
138700191010              SET lncc_Err_10 TO TRUE
138800191010              MOVE lncc_ErrDroppingWKACCIVL TO lc_sqlErrShortDESCR
138900191010              PERFORM  SQL_Fail_Process
139000191010           END-IF.
139100191010
139200191010           EXEC SQL
139300191010             DROP TABLE WKACCIVP
139400191010           END-EXEC.
139500191010
139600191010           MOVE SQLSTATE TO lc_sqlStates.
139700191010           IF lncc_sqlTblNotExists OR lncc_sqlSuccessful
139800191010              CONTINUE
139900191010           ELSE
140000191010              SET lncc_Err_11 TO TRUE
140100191010              MOVE lncc_ErrDroppingWKACCIVP TO lc_sqlErrShortDESCR
140200191010              PERFORM  SQL_Fail_Process
140300191010           END-IF.
140400191010
140500191010           EXEC SQL
140600191010             CREATE TABLE WKACCIVP
140700191010              (ACCOUNT_NO       NUMERIC (09)    NOT NULL WITH DEFAULT,
140800191010               INVESTMENT_CODE     CHAR (05)    NOT NULL WITH DEFAULT,
140900191010               INDUSTRY_FUND_CODE  CHAR (05)    NOT NULL WITH DEFAULT,
141000191010               MARKET_VALUE     DECIMAL (15, 2) NOT NULL WITH DEFAULT)
141100191010           END-EXEC.
141200191010
141300191010           MOVE SQLSTATE TO lc_sqlStates.
141400191010           IF lncc_sqlTblCrtedNotJrned OR lncc_sqlSuccessful
141500191010              CONTINUE
141600191010           ELSE
141700191010              SET lncc_Err_12 TO TRUE
141800191010              MOVE lncc_ErrCreatingWKACCIVP TO lc_sqlErrShortDESCR
141900191010              PERFORM  SQL_Fail_Process
142000191010           END-IF.
142100191010
142200191010           EXEC SQL
142300191010            CREATE INDEX WKACCIVL ON WKACCIVP
142400191010              (ACCOUNT_NO, MARKET_VALUE DESC)
142500191010           END-EXEC.
142600191010
142700191010           MOVE SQLSTATE TO lc_sqlStates.
142800191010           IF lncc_sqlTblCrtedNotJrned OR lncc_sqlSuccessful
142900191010              CONTINUE
143000191010           ELSE
143100191010              SET lncc_Err_13 TO TRUE
143200191010              MOVE lncc_ErrCreatingWKACCIVL TO lc_sqlErrShortDESCR
143300191010              PERFORM  SQL_Fail_Process
143400191010           END-IF.
143500191010
143600191010           PERFORM Get_Redemption_Codes.
143700191010           PERFORM Get_Reason_Codes.
143800191010           PERFORM Get_Trans_Proc_Seq.
143900191010      *RFS108486 start
144000191010           EXEC SQL
144100191010             DELETE FROM WKRDSPDSC
144200191010           END-EXEC.
144300191010
144400191010           MOVE SQLSTATE TO lc_sqlStates.
144500191010           IF lncc_sqlSuccessful OR lncc_sqlEnd OR lncc_sqlWarning
144600191010              CONTINUE
144700191010           ELSE
144800191010              SET lncc_Err_81 TO TRUE
144900191010              MOVE lncc_ErrDeletingWKRDSPDSC TO lc_sqlErrShortDESCR
145000191010              PERFORM  SQL_Fail_Process
145100191010           END-IF.
145200191010
145300191010           SET  lc_GRNTNFNotFound TO TRUE.
145400191010
145500191010           MOVE "TRNPST"               to Pass-Screen-Code.
145600191010           MOVE "GRNTNF"               to Pass-Edit-Code.
145700191010           MOVE "T"                    to Pass-Level-Code.
145800191010
145900191010           call "FXSCEDTAL1" using Pass-Screen-Code
146000191010                                   Pass-Edit-Code
146100191010                                   Pass-Level-Code
146200191010                                   Retn-Edit-Allowed-Flag.
146300191010
146400191010           cancel "FXSCEDTAL1".
146500191010
146600191010           IF Retn-Edit-Allowed
146700191010               SET lc_GRNTNFFound TO TRUE
146800191010           END-IF.
146900191010      *RFS108486 END
147000191010
147100191010      * _________________________________
147200191010       Process_C2.
147300191010      * _________________________________
147400191010      * RFS 98866 - Start
147500191010           SET lb_PriorWasSDSPNo TO TRUE.
147600191010158078     SET lb_PlacedAsNetFalse TO TRUE
147700191015      *RFS1008981 - Starts.
147800191015           SET Lb_WaiveDSCNo TO TRUE
147900191015      *RFS1008981 - Ends.
148000191010           INITIALIZE  li_TotalProcessedTaxable.
148100191010DM         INITIALIZE li_TotalDAPGrant
148200191010DM                    li_TotalDAPBond.
148300191010      * RFS 98866 - End
148400191010126482     INITIALIZE Lc_LDAPPeriodsSet.
148500191010           INITIALIZE  li_Idx
148600191010                       li_TRNidx
148700191010                       li_LastTRNidx
148800191010                       li_TDidx
148900191010                       li_LastTDidx
149000191010                       li_DAPidx
149100191010                       li_LastDAPidx
149200191010                       li_AHAidx
149300191010                       ln_DetailSeqNo
149400191010120417                 ln_TotalCapital
149500191010                       ln_TotalGrant
149600191010                       ln_TotalBond
14970019101084456                  ln_TotAHAGrant
14980019101084456                  ln_TotAHABond
149900191010                       ln_TotalAHA
150000191010147652                 ln_TransferAHA
150100191010147652                 li_TotalTransferNet
150200191010147652                 li_TotalTransferCDSC
150300191010147652                 li_TotalTransferClawback
150400191010                       ln_AHAGrantLeft
150500191010                       ln_AHABondLeft
150600191010                       ln_TotalAfter
150700191010                       ln_GrantAfter
150800191010                       ln_BondAfter
150900191010131316                 ln_AHADifferce
151000191010R88074                 lc_SavePaymentType
151100191010  |                    ln_SavePlacementDate
151200191010  |                    ln_SaveTransNo.
151300191010R88074     SET lb_DeleteForNone   TO True.
151400191010
151500191010      * RFS 68035.37 - begins.
151600191010           INITIALIZE  ln_TermAdjustGrant
151700191010                       ln_TermAdjustBond.
151800191010      * RFS 68035.37 - ends.
151900191010
152000191010           SET lb_DAPExistsFalse              TO  TRUE.
152100191010147652     SET lb_TROExistsFalse              TO  TRUE.
152200191010           SET lb_ClosureExistsFalse          TO  TRUE.
152300191010           SET lb_ProcessedClosureFalse       TO  TRUE.
152400191010           SET lb_OtherTransFalse             TO  TRUE.
152500191010           SET lb_ClosureTriggerFalse         TO  TRUE.
152600191010           SET lb_GrantBondAfterCheckedFalse  TO  TRUE.
152700191010           SET lb_PartiallyProcessedFalse     TO  TRUE.
152800191010      *RFS1019285 - Starts.
152900191010           SET Lb_DeceasedClosureNo           TO  TRUE.
153000191010      *RFS1019285 - Ends.
153100200529      *RFS1099376 - Starts.
153200200529           SET Lb_NoAHAClosureNo              TO  TRUE.
153300200529      *RFS1099376 - Ends.
153400191010
153500191010           INITIALIZE ltr_AccountTransArray
15360019101080658                 ldh_DAPAHATransArray.
15370019101080658 *               lsv_DAPAHATransArray.
153800191010
153900191010           INITIALIZE ln_SaveAccountNo
154000191010                      ln_SaveTradeDate
154100191010                      ln_SaveTradeYear
154200191010                      ln_TradeDate
154300191010                      ln_LastTradeDate.
154400191010      * RFS143702 - Start
154500191010           INITIALIZE  li_GrossNetGap
154600191010                       li_OrigMaxAHA.
154700191010      * RFS143702 - End
154800191010
154900191010           MOVE lc2_AccountNo        TO  ln_SaveAccountNo.
155000191010      *_______________________________________________________________*
155100191010      * Load Account's transactions into the array
155200191010      *_______________________________________________________________*
155300191010           PERFORM Load_Account_Trans UNTIL  lb_EndOfC2True
155400191010                OR lc2_AccountNo NOT = ln_SaveAccountNo.
155500191010126482     PERFORM Get-historical-Payment-Amt.
155600191010126482     PERFORM Get-DTC-BPA-Amt.
155700191010
155800191010      *_______________________________________________________________*
155900191010      * Check if account has partially processed groups. If yes, then
156000191010      * set the rejection codes for the new DAPs and skip processing
156100191010      * for that account.
156200191010      *_______________________________________________________________*
156300191010           IF lb_DAPExistsTrue  OR  lb_ClosureExistsTrue
156400191010              PERFORM Check_Partially_Proc_Groups
156500191010
156600191010              IF lb_PartiallyProcessedTrue
15670019101086707 *          PERFORM Reject_New_DAPs
15680019101086707            PERFORM Reject_New_Transactions
156900191010              END-IF
157000191010           END-IF.
157100191010
157200191010147652*    IF (lb_DAPExistsTrue  OR  lb_ClosureExistsTrue) AND
157300191010147652     IF (lb_DAPExistsTrue  OR  lb_ClosureExistsTrue OR
157400191010147652         lb_TROExistsTrue) AND
157500191010               lb_PartiallyProcessedFalse
157600191010
157700191010              INITIALIZE ln_SaveTradeDate
157800191010                         ln_SaveTradeYear
157900191010                         ln_TradeDate
158000191010                         ln_LastTradeDate
158100191010              COMPUTE li_LastTRNidx  = li_TRNidx
158200191010              COMPUTE li_LastTDidx   = li_TDidx
158300191010              COMPUTE li_LastDAPidx  = li_DAPidx
158400191010
158500191010      * RFS 80658 - begins. lsv array is no longer used
158600191010      *_______________________________________________________________*
158700191010      * Save DAP array for recovery in case an account will need
158800191010      * to be reprocessed.
158900191010      *_______________________________________________________________*
159000191010      *       MOVE ldh_DAPAHATransArray  TO  lsv_DAPAHATransArray
159100191010      * RFS 80658 - ends.   lsv array is no longer used
159200191010
159300191010      *_______________________________________________________________*
159400191010      * Prepare the environment for TRNPST call
159500191010      *_______________________________________________________________*
159600191010              MOVE SPACE         TO  lc_ReturnCode
159700191010      *RFS125258 - Begin
159800191010              MOVE ZEROS TO ld_TradeDate
159900191010      *       CALL   "SETCALENV2" USING lncc_InitMode, lc_ReturnCode
160000191010              CALL   "SETCALENV2" USING lncc_InitMode,
160100191010                                        ld_TradeDate, lc_ReturnCode
160200191010      *RFS125258 - End
160300191010              CANCEL "SETCALENV2"
160400191010
160500191010              MOVE ln_SaveAccountNo  TO  Pass-CDSC-Account
160600191010              DISPLAY Ws-Local-Data-Area UPON Ws-Local
160700191010              MOVE SPACE TO lc_ReturnCode
160800191010      *RFS125258 - Begin
160900191010              MOVE ZEROS TO ld_TradeDate
161000191010      *       CALL   "SETCALENV2" USING lncc_CleanMode, lc_ReturnCode
161100191010              CALL   "SETCALENV2" USING lncc_CleanMode,
161200191010                                        ld_TradeDate, lc_ReturnCode
161300191010      *RFS125258 - End
161400191010              CANCEL "SETCALENV2"
161500191010      *_______________________________________________________________*
161600191010      * Process Account's transactions loaded into the array.
161700191010      *_______________________________________________________________*
161800191010              PERFORM Process_Trans_Array VARYING li_TRNidx FROM 1 BY 1
161900191010                      UNTIL li_TRNidx  > li_LastTRNidx
162000191010
162100191010              MOVE SPACE TO lc_ReturnCode
162200191010      *RFS125258 - Begin
162300191010              MOVE ZEROS TO ld_TradeDate
162400191010      *       CALL   "SETCALENV2" USING lncc_DeleteMode, lc_ReturnCode
162500191010              CALL   "SETCALENV2" USING lncc_DeleteMode,
162600191010                                        ld_TradeDate, lc_ReturnCode
162700191010      *RFS125258 - End
162800191010              CANCEL "SETCALENV2"
162900191010
163000191010      *_______________________________________________________________*
163100191010      * In case there was a restart and DAP array was restored at one
163200191010      * point, move the rejection codes to the DAP array.
163300191010      * At the same time, update rejection codes in MFATRNP.
16340019101084456 * Also, move notional values.
163500191010      *_______________________________________________________________*
163600191010              PERFORM Process_Rejection_Codes
163700191010                      VARYING li_TRNidx FROM 1 BY 1
163800191010                      UNTIL li_TRNidx  > li_LastTRNidx
163900191010
164000191010      *_______________________________________________________________*
164100191010      * Process DAP/AHA array. Generate approval records for DAP/AHA.
164200191010      * Generate AHA transactions.
164300191010      *_______________________________________________________________*
164400191010R88074           SET lb_DeleteForNone   TO True
164500191010      *RFS123925 - Start
164600191010      *          PERFORM Process_DAP_AHA_Array VARYING li_TDidx
164700191010      *                  FROM 1 BY 1 UNTIL li_TDidx  > li_LastTDidx
164800191010      *          RFS 123925 QC33940 - Begins
164900191010      *          COMPUTE li_TDidx = li_LastTDidx
165000191010      *          PERFORM Process_DAP_AHA_Array
165100191010147652           IF lb_TROExistsTrue AND
165200191010147652               li_TotalTransferNet < ln_TransferAHA AND
165300191010147652               li_TotalTransferCDSC > 0
165400191010147652                  COMPUTE li_TotalTransferClawback
165500191010147652                        = ln_TransferAHA - li_TotalTransferNet
165600191010147652                  COMPUTE Li_DescendingClawback
165700191010147652                        = li_TotalTransferClawback
165800191010147652                  COMPUTE li_TDidx = li_LastTDidx
165900191010147652                  PERFORM Clawback_CDSC_Charged
166000191010147652           END-IF
166100191010147652
166200191010                 IF li_LastTDidx > 0
166300191010                    COMPUTE li_TDidx = li_LastTDidx
166400191010                    PERFORM Process_DAP_AHA_Array
166500191010                 END-IF
166600191010      *          RFS 123925 QC33940 - Ends
166700191010      *RFS123925 - End
166800191010
166900191010R88074           IF lb_DeleteForCheque
167000191010  |                 PERFORM Delete_MFATRNCP_Original_Trade
167100191010  |              ELSE
167200191010  |                 IF lb_DeleteForEFT
167300191010  |                    PERFORM Delete_MFATRNBP_Original_Trade
167400191010  |                 END-IF
167500191010R88074           END-IF
167600191010
167700191010           END-IF.
167800191010      *RFS181302-STARTS.
167900191010           IF lb_ProcessedClosureTrue
168000191010              PERFORM Check_Trigger_Interest
168100191010           END-IF.
168200191010
168300191010      *-----------------------*
168400191010       Check_Trigger_Interest.
168500191010      *-----------------------*
168600191010           Initialize Li_AccrualCount.
168700191010           EXEC SQL
168800191010              SELECT COUNT(*)
168900191010              INTO :Li_AccrualCount
169000191010              FROM MFAACCIAP Acciap
169100191010              WHERE Acciap.Account_no = :Ln_SaveAccountNo
169200191010           END-EXEC.
169300191010           MOVE SQLSTATE TO lc_sqlStates.
169400191010           IF lncc_sqlSuccessful
169500191010               IF Li_AccrualCount > 0
169600191010                  PERFORM Update_WKRDSPDSC_Accrual
169700191010                  PERFORM Insert_WKRDSPDSC_Accrual
169800191010               END-IF
169900191010           ELSE
170000191010               CONTINUE
170100191010           END-IF.
170200191010
170300191010      *-------------------------*
170400191010       Update_WKRDSPDSC_Accrual.
170500191010      *-------------------------*
170600191010           EXEC SQL
170700191010           DELETE FROM WKRDSP a
170800191010            WHERE NOT EXISTS
170900191010           (SELECT 1 FROM MFAACCIAP b
171000191010                    WHERE a.Account_No = b.Account_no
171100191010                      AND a.Investment_Code = b.Investment_Code)
171200191010           END-EXEC.
171300191010
171400191010           EXEC SQL
171500191010             INSERT INTO WKRDSP
171600191010               (Placement_date
171700191010               ,Trans_No
171800191010               ,Charge
171900191010               ,Trigger_Interest_Gen
172000191010               ,Investment_Code
172100191010               ,Account_no
172200191010               ,Detail_seq_no
172300191010               ,TRHDRP_Exists)
172400191010             SELECT a.Placement_Date, a.Trans_no, 0,"O",
172500191010             a.Investment_Code, a.Account_No, 0,"Z"
172600191010             FROM MFATRNP a
172700191010             INNER JOIN MFAACCIAP b ON
172800191010                 a.Account_No = b.Account_No
172900191010             AND a.Investment_Code = b.Investment_Code
173000191010             WHERE a.Trans_Status_Code NOT IN("HST","HSC","RVS")
173100191010             AND a.Account_no = :ln_SaveAccountNo
173200191010               AND NOT EXISTS
173300191010             (SELECT 1 FROM WKRDSP c
173400191010                  WHERE a.Placement_Date = C.Placement_Date
173500191010                    AND a.Trans_no = C.Trans_No)
173600191010             ORDER BY a.Placement_Date, a.Trans_no
173700191010           END-EXEC.
173800191010
173900191010           EXEC SQL
174000191010             UPDATE WKRDSP a SET a.Detail_Seq_No =
174100191010              (SELECT b.Detail_Seq_no
174200191010                 FROM MFATRHDRP b
174300191010                WHERE a.placement_date = b.placement_date
174400191010                  AND a.trans_no       = b.trans_no
174500191010                  AND b.Header_type = "AHA")
174600191010             WHERE EXISTS
174700191010             (SELECT 1
174800191010                 FROM MFATRHDRP b
174900191010                WHERE a.placement_date = b.placement_date
175000191010                  AND a.trans_no       = b.trans_no
175100191010                  AND b.Header_type = "AHA")
175200191010           END-EXEC.
175300191010
175400191010           EXEC SQL
175500191010             UPDATE WKRDSP a SET a.TRHDRP_Exists = "Y"
175600191010               WHERE EXISTS
175700191010              (SELECT 1
175800191010                 FROM MFATRHDRP b
175900191010                      INNER JOIN
176000191010                      WKRDSP c
176100191010                   ON b.placement_date = c.placement_date
176200191010                  AND b.trans_no       = c.trans_no
176300191010                WHERE a.placement_date = b.placement_date
176400191010                  AND a.trans_no       = b.trans_no)
176500191010           END-EXEC.
176600191010
176700191010           EXEC SQL
176800191010             DELETE FROM WKRDSP a
176900191010              WHERE NOT EXISTS
177000191010             (SELECT 1
177100191010                 FROM WKRDSP b
177200191010
177300191010              INNER JOIN
177400191010             (SELECT Account_no, Investment_Code,
177500191010             ZONED(
177600191010                  SUBSTR(
177700191010                         MIN(TRHDRP_Exists                  ||
177800191010                         DIGITS(ZONED(Detail_Seq_no,3,0))   ||
177900191010                         DIGITS(ZONED(Placement_Date,8,0))  ||
178000191010                         DIGITS(ZONED(Trans_No,9,0))),5,8
178100191010                         )
178200191010                  ,8,0) AS Placement_Date,
178300191010             ZONED(
178400191010                  SUBSTR(
178500191010                         MIN(TRHDRP_Exists                  ||
178600191010                         DIGITS(ZONED(Detail_Seq_no,3,0))   ||
178700191010                         DIGITS(ZONED(Placement_Date,8,0))  ||
178800191010                         DIGITS(ZONED(Trans_No,9,0))),13,9
178900191010                         )
179000191010                  ,9,0) AS Trans_No
179100191010                 FROM WKRDSP
179200191010             GROUP BY Account_No, Investment_Code) as CTL
179300191010              ON b.Placement_Date = CTL.Placement_Date
179400191010             AND b.Trans_No       = CTL.Trans_No
179500191010             WHERE a.Placement_Date = b.Placement_Date
179600191010                  AND a.Trans_no    = b.Trans_No
179700191010             )
179800191010           END-EXEC.
179900191010
180000191010           EXEC SQL
180100191010              UPDATE WKRDSPDSC a
180200191010                 SET a.Trigger_Interest_Gen = "Y"
180300191010                WHERE EXISTS
180400191010               (SELECT 1
180500191010                  FROM WKRDSP b
180600191010                 WHERE a.placement_date = b.placement_date
180700191010                   AND a.trans_no       = b.trans_no)
180800191010           END-EXEC.
180900191010
181000191010      *-------------------------*
181100191010       Insert_WKRDSPDSC_Accrual.
181200191010      *-------------------------*
181300191010           EXEC SQL
181400191010             INSERT INTO WKRDSPDSC
181500191010              (SELECT Placement_date,
181600191010                      Trans_No,
181700191010                      :Lnci_0,
181800191010                      :Lncc_O
181900191010                 FROM WKRDSP b
182000191010                WHERE NOT EXISTS
182100191010                  (SELECT 1
182200191010                      FROM WKRDSPDSC c
182300191010                      WHERE b.Placement_Date = c.Placement_Date
182400191010                        AND b.Trans_No       = c.Trans_No
182500191010                  )
182600191010              )
182700191010           END-EXEC.
182800191010
182900191010      *RFS181302-ENDS.
183000191010      * _________________________________
183100191010       Load_Account_Trans.
183200191010      * _________________________________
183300191010           ADD 1 TO li_TRNidx.
183400191010      *    RFS151632 - Begins - DM : Move zero to
183500191010108486*    INITIALIZE ltr_CDSC_Charged(li_TRNidx),
183600191010108486*               ltr_CDSC_ToCharge(li_TRNidx).
183700191010           MOVE 0 TO ltr_CDSC_Charged(li_TRNidx)
183800191010                     ltr_CDSC_ToCharge(li_TRNidx).
183900191010      *    RFS151632 - Ends
184000191010
184100191010           MOVE lc2_PlacementDate  TO  ltr_PlacementDate  (li_TRNidx).
184200191010           MOVE lc2_TransNo        TO  ltr_TransNo        (li_TRNidx).
184300191010           MOVE lc2_ProcessDate    TO  ltr_ProcessDate    (li_TRNidx).
184400191010           MOVE lc2_TradeDate      TO  ltr_TradeDate      (li_TRNidx).
184500191010           MOVE lc2_TransType      TO  ltr_TransType      (li_TRNidx).
184600191010           MOVE lc2_TransOrigin    TO  ltr_TransOrigin    (li_TRNidx).
184700191010           MOVE lc2_AccountNo      TO  ltr_AccountNo      (li_TRNidx).
184800191010           MOVE lc2_InvCode        TO  ltr_InvCode        (li_TRNidx).
184900191010           MOVE lc2_IndFundCode    TO  ltr_IndFundCode    (li_TRNidx).
185000191010           MOVE lc2_DealerCode     TO  ltr_DealerCode     (li_TRNidx).
185100191010           MOVE lc2_DealerRepCode  TO  ltr_DealerRepCode  (li_TRNidx).
185200191010           MOVE lc2_GrossAmt       TO  ltr_GrossAmt       (li_TRNidx).
185300191010           MOVE lc2_NetAmt         TO  ltr_NetAmt         (li_TRNidx).
185400191010           MOVE lc2_UnitAmt        TO  ltr_UnitAmt        (li_TRNidx).
185500191010           MOVE lc2_PerAmt         TO  ltr_PerAmt         (li_TRNidx).
185600191010           MOVE lc2_GrossOrNet     TO  ltr_GrossOrNet     (li_TRNidx).
185700191010           MOVE lc2_SplitOption    TO  ltr_SplitOption    (li_TRNidx).
185800191010           MOVE lc2_RedemCode      TO  ltr_RedemCode      (li_TRNidx).
185900191010           MOVE lc2_RedemRule      TO  ltr_RedemRule      (li_TRNidx).
186000191010           MOVE lc2_WaiveDSC       TO  ltr_WaiveDSC       (li_TRNidx).
186100191010           MOVE lc2_WaiveERF       TO  ltr_WaiveERF       (li_TRNidx).
186200191010           MOVE lc2_TreatAWD       TO  ltr_TreatAWD       (li_TRNidx).
18630019101080658      MOVE lc2_RepaymentDate  TO  ltr_RepaymentDate  (li_TRNidx).
18640019101080658      MOVE lc2_WaiveDS5       TO  ltr_WaiveDS5       (li_TRNidx).
18650019101080658      MOVE lc2_RepaymentReason TO ltr_RepaymentReason(li_TRNidx).
186600191010R88074     MOVE lc2_PaymentType    TO ltr_PaymentType     (li_TRNidx).
186700191010143313     MOVE lc2_AHATDFlag      TO ltr_AHATDFlag       (li_TRNidx).
18680019101098866      INITIALIZE ltr_TaxableAmount (li_TRNidx).
186900191010      *    RFS117402 - Begins - Set SDSP Flag to No.
187000191010           SET ltr_SDSPNo(li_TRNidx) TO TRUE.
187100191010      *    RFS117402 - Ends
187200191010
187300191010      *RFS126482 - Start
187400191010           INITIALIZE ltr_WHTaxRateBasis(li_TRNidx),
187500191010                      ltr_ActualTax(li_TRNidx),
187600191010                      ltr_ActualProvTax(li_TRNidx).
187700191010      *RFS126482 - End
187800191010
187900191010           EVALUATE  TRUE
188000191010
188100191010             WHEN  lc_DAP
188200191010
188300191010               SET lb_DAPExistsTrue   TO TRUE
188400191010               SET lb_OtherTransTrue  TO TRUE
188500191010               MOVE lncc_N            TO ltr_ProcessedDAP(li_TRNidx)
188600191010
188700191010               IF lc2_RedemRule = lncc_11
188800191010                  MOVE lc_ReasonCodeDAP
188900191010                    TO ltr_RepaymentReason(li_TRNidx)
189000191010               ELSE
189100191010                  MOVE lc_ReasonCodeLDAP
189200191010                    TO ltr_RepaymentReason(li_TRNidx)
189300191010               END-IF
189400191010      *_______________________________________________________________*
189500191010      * Load DAP array for each trade date
189600191010      *_______________________________________________________________*
189700191010
189800191010      * RFS147652 - Begins - activity to common procedure
189900191010      *        IF lc2_TradeDate NOT = ln_SaveTradeDate
190000191010      *
190100191010      *           ADD 1  TO li_TDidx
190200191010      * RFS151632-START *
190300191010123925*           INITIALIZE   ldd_Totaldap(li_TDidx)
190400191010126482*                        ldd_TotalDAPLDAP(li_TDidx)
190500191010126482*                        ldd_TotalLDAP(li_TDidx)
190600191010143313*                        ldd_UseDAPtd(li_TDidx)
190700191010151632*           MOVE SPACES TO ldd_UseDAPtd(li_TDidx)
190800191010      * RFS151632-END *
190900191010126482*           MOVE ZERO TO ldd_Totaldap(li_TDidx)
191000191010126482*                        ldd_TotalDAPLDAP(li_TDidx)
191100191010126482*                        ldd_TotalLDAP(li_TDidx)
191200191010      *           MOVE lc2_TradeDate TO  ln_SaveTradeDate
191300191010      *                                  ldh_TD(li_TDidx)
191400191010      *           MOVE lncc_N        TO  ldh_AHAGroup(li_TDidx)
191500191010      *           MOVE 0 TO li_DAPidx
191600191010      *        END-IF
191700191010
191800191010
191900191010      *        ADD 1 TO li_DAPidx
192000191010      *        MOVE ltr_AccountTrans(li_TRNidx)
192100191010      *          TO ldh_DAPAHATrans (li_TDidx, li_DAPidx)
192200191010      * RFS 132349 - Start
192300191010      *        INITIALIZE lc_calGrosAmt
192400191010      *        IF ltr_SplitOption(li_TRNidx) = lncc_Percent OR lncc_A
192500191010      *                                        OR lncc_U
192600191010      *          MOVE ltr_AccountNo(li_TRNidx)  TO li_AcctNo
192700191010      *          MOVE ltr_InvCode(li_TRNidx)    TO lc_InvCde
192800191010      *          MOVE ltr_TradeDate(li_TRNidx)  TO li_TradDat
192900191010      *          MOVE ltr_SplitOption(li_TRNidx) TO lc_SplOption
193000191010      *          MOVE ltr_UnitAmt(li_TRNidx)    TO ln_UntAmt
193100191010      *          MOVE ltr_PerAmt(li_TRNidx)     TO ln_PerAmt
193200191010
193300191010      *          PERFORM Calculate-Gross-Amt
193400191010      *        END-IF
193500191010      * RFS 132349 - End
193600191010      * RFS123925 - Start
193700191010126482*        COMPUTE ldd_Totaldap(li_TDidx)    =
193800191010126482*                                     ldd_Totaldap(li_TDidx)    +
193900191010126482*        COMPUTE ldd_TotalDAPLDAP(li_TDidx) =
194000191010126482*                                 ldd_TotalDAPLDAP(li_TDidx)   +
194100191010      *                                         ltr_GrossAmt(li_TRNidx)
194200191010132349*                                       + ln_CalGross
194300191010      *        MOVE ln_SaveTradeDate TO ldd_TD(li_TDidx)
194400191010143313*        IF ltr_AHATDFlag(li_TRNidx) = 'T'
194500191010143313*           MOVE 'Y' TO ldd_UseDAPtd(li_TDidx)
194600191010143313*        END-IF
194700191010      * RFS123925 - End
194800191010
194900191010               PERFORM Common_Array_Load
195000191010      * RFS147652 - Ends
195100191010
195200191010      * RFS126482 - Start
195300191010               IF lc2_RedemRule  = lncc_11
195400191010                  COMPUTE ldd_TotalDAP(li_TDidx) =
195500191010                  ldd_TotalDAP(li_TDidx) + ltr_GrossAmt(li_TRNidx)
195600191010132349                                        + ln_CalGross
195700191010               ELSE
195800191010                  COMPUTE ldd_TotalLDAP(li_TDidx) =
195900191010                  ldd_TotalLDAP(li_TDidx) + ltr_GrossAmt(li_TRNidx)
196000191010132349                                        + ln_CalGross
196100191010               END-IF
196200191010               IF lc2_RedemRule = lncc_12
196300191010                  IF  Lc_LDAPperiodsSet NOT = Lncc_Y
196400191010                     PERFORM Get-AWD-Info
196500191010                     MOVE Lncc_Y TO Lc_LDAPperiodsSet
196600191010                  END-IF
196700191010               END-IF
196800191010      * RFS126482 - End
196900191010
197000191010             WHEN  lc_AHA
197100191010
197200191010               IF lc2_SplitOption = lncc_A
197300191010                  SET lb_ClosureExistsTrue  TO TRUE
197400191015      *RFS1008981 - Starts.
197500191015               IF ltr_WaiveDSC(li_TRNidx) = Lncc_Y
197600191015                  SET Lb_WaiveDSCYes TO TRUE
197700191015               END-IF
197800191015      *RFS1008981 - Ends.
197900191015
198000191010      *RFS1019285 - Starts.
198100191010               IF lc2_RepaymentReason = 6
198200191010                  SET Lb_DeceasedClosureYes to TRUE
198300191010               END-IF
198400191010      *RFS1019285 - Ends.
198500191010               ELSE
198600191010                  SET lb_OtherTransTrue TO TRUE
198700191010               END-IF
198800191010
19890019101080658 *        PERFORM Get_Repayment_Info
199000191010
199100191010147652       WHEN  lc_TRO
199200191010147652         SET lb_TROExistsTrue   TO TRUE
199300191010147652         PERFORM Common_Array_Load
199400191010
199500191010            WHEN OTHER
199600191010                 SET lb_OtherTransTrue TO TRUE
199700191010
199800191010           END-EVALUATE.
199900191010
200000191010           PERFORM Fetch_C2.
200100191010
200200191010147652* RFS147652  - Begins - Copied activity
200300191010      * _________________________________
200400191010       Common_Array_load.
200500191010      * _________________________________
200600191010
200700191010           IF lc2_TradeDate NOT = ln_SaveTradeDate
200800191010
200900191010              ADD 1  TO li_TDidx
201000191010              MOVE SPACES TO ldd_UseDAPtd(li_TDidx)
201100191010              MOVE ZERO TO ldd_Totaldap(li_TDidx)
201200191010                           ldd_TotalDAPLDAP(li_TDidx)
201300191010                           ldd_TotalLDAP(li_TDidx)
201400191010              MOVE lc2_TradeDate TO  ln_SaveTradeDate
201500191010                                     ldh_TD(li_TDidx)
201600191010              MOVE lncc_N        TO  ldh_AHAGroup(li_TDidx)
201700191010              MOVE 0 TO li_DAPidx
201800191010           END-IF.
201900191010
202000191010           ADD 1 TO li_DAPidx.
202100191010           MOVE ltr_AccountTrans(li_TRNidx)
202200191010             TO ldh_DAPAHATrans (li_TDidx, li_DAPidx).
202300191010
202400191010           INITIALIZE lc_calGrosAmt.
202500191010           IF ltr_SplitOption(li_TRNidx) = lncc_Percent OR lncc_A
202600191010                                           OR lncc_U
202700191010             MOVE ltr_AccountNo(li_TRNidx)  TO li_AcctNo
202800191010             MOVE ltr_InvCode(li_TRNidx)    TO lc_InvCde
202900191010             MOVE ltr_TradeDate(li_TRNidx)  TO li_TradDat
203000191010             MOVE ltr_SplitOption(li_TRNidx) TO lc_SplOption
203100191010             MOVE ltr_UnitAmt(li_TRNidx)    TO ln_UntAmt
203200191010             MOVE ltr_PerAmt(li_TRNidx)     TO ln_PerAmt
203300191010
203400191010             PERFORM Calculate-Gross-Amt
203500191010           END-IF.
203600191010           COMPUTE ldd_TotalDAPLDAP(li_TDidx) =
203700191010                                    ldd_TotalDAPLDAP(li_TDidx)   +
203800191010                                            ltr_GrossAmt(li_TRNidx)
203900191010                                          + ln_CalGross
204000191010           MOVE ln_SaveTradeDate TO ldd_TD(li_TDidx).
204100191010           IF ltr_AHATDFlag(li_TRNidx) = 'T'
204200191010              MOVE 'Y' TO ldd_UseDAPtd(li_TDidx)
204300191010           END-IF.
204400191010      * RFS147652  - Ends - Copied activity
204500191010
204600191010      * _________________________________
204700191010       Process_Trans_Array.
204800191010      * _________________________________
204900191010
205000191010      *    RFS108486 Begins
205100191010           INITIALIZE li_CDSC_Charged.
205200191010      *    RFS108486 Ends
205300191010      *_______________________________________________________________*
205400191010      * Reject the closure if there are other unprocessed
205500191010      * transactions in an account.
205600191010      *_______________________________________________________________*
205700191010           IF ltr_RejectionOK (li_TRNidx)            AND
205800191010              ltr_AHA(li_TRNidx)                     AND
205900191010              ltr_SplitOption(li_TRNidx) = lncc_A    AND
206000191010              lb_OtherTransTrue
206100191010                 MOVE lncc_DS7 TO ltr_RejectCode(li_TRNidx)
206200191010           END-IF.
206300191010
206400191010      *_______________________________________________________________*
206500191010      * If closure transactions and no other transactions,
206600191010      * process the closure.
206700191010      * Reject other closure transactions if closure already processed
206800191010      *_______________________________________________________________*
206900191010           IF ltr_RejectionOK (li_TRNidx)            AND
207000191010              ltr_AHA(li_TRNidx)                     AND
207100191010              ltr_SplitOption(li_TRNidx) = lncc_A    AND
207200191010              lb_OtherTransFalse
207300191010
207400191010              IF lb_ProcessedClosureFalse
207500191010
207600191010                 SET lb_ClosureTriggerTrue     TO  TRUE
207700191010                 SET lb_GroupOKTrue            TO  TRUE
207800191010
207900191010                 PERFORM Process_Closure
208000191010
20810019101080658            IF lb_GroupOKFalse
20820019101080658 *_______________________________________________________________*
20830019101080658 * Clear DAP/AHA array.
20840019101080658 *_______________________________________________________________*
20850019101080658               INITIALIZE  ldh_DAPAHATransArray
20860019101080658                           li_TDidx
20870019101080658                           li_DAPidx
20880019101080658                           li_LastTDidx
20890019101080658                           li_LastDAPidx
20900019101080658                           ln_SaveTradeDate
20910019101080658            END-IF
209200191010
209300191010                 SET lb_ProcessedClosureTrue   TO  TRUE
209400191010                 SET lb_ClosureTriggerFalse    TO  TRUE
209500191010                 MOVE 1 TO li_TRNidx
209600191010                 MOVE lncc_Y  TO  ltr_ProcessedDAP(li_TRNidx)
209700191010              ELSE
209800191010                 MOVE lncc_DS7  TO  ltr_RejectCode(li_TRNidx)
209900191010           END-IF.
210000191010
210100191010      *_______________________________________________________________*
210200191010      * Get AHA amounts for each trade date
210300191010      *_______________________________________________________________*
210400191010           IF ltr_RejectionOK(li_TRNidx)                AND
210500191010147652*       ltr_DAP(li_TRNidx)                        AND
210600191010147652       (ltr_DAP(li_TRNidx) OR ltr_TRO(li_TRNidx)) AND
210700191010              ltr_ProcessedDAP(li_TRNidx) NOT = lncc_Y  AND
210800191010              ltr_TradeDate(li_TRNidx) NOT = ln_SaveTradeDate
210900191010
211000191010      *RFS 123925 - Start
211100191010                  IF ln_SaveTradeDate NOT = 0
211200191010                     COMPUTE li_SaveTRNidx = li_TRNidx
211300191010143702               INITIALIZE li_GrossNetGap
211400191010                     PERFORM VARYING li_TDidx
211500191010                             FROM 1 BY 1 UNTIL
211600191010                             ldd_TD(li_TDidx) = ln_SaveTradeDate  OR
211700191010                             li_TDidx = li_LastTDidx
211800191010                          CONTINUE
211900191010                     END-PERFORM
212000191010                     PERFORM Process_DAP_AHA_Array
212100191010                     COMPUTE li_TRNidx = li_SaveTRNidx
212200191010                     PERFORM VARYING li_TDidx
212300191010                             FROM 1 BY 1 UNTIL
212400191010                             ldd_TD(li_TDidx) = ln_SaveTradeDate  OR
212500191010                             li_TDidx = li_LastTDidx
212600191010                          CONTINUE
212700191010                     END-PERFORM
212800191010                     ADD 1 TO li_TDidx
212900191010                  END-IF
213000191010      *RFS 123925 - END
213100191010                  MOVE ltr_TradeDate(li_TRNidx) TO ln_SaveTradeDate
213200191010                                                   ln_TradeDate
213300191010
213400191010                  IF ln_TradeYear NOT = ln_SaveTradeYear
213500191010                     PERFORM Get_LDAP_Maximum
213600191010                     MOVE ln_TradeYear TO  ln_SaveTradeYear
213700191010                  END-IF
213800191010
213900191010                  PERFORM Get_AHA_Amounts
214000191010      * RFS123925 - Start
214100191010                  IF  ln_SaveTradeDate  > Lnci_LegChg20140101
214200191010147652                AND NOT ltr_TRO(li_TRNidx)
214300191010                      PERFORM VARYING li_TDidx
214400191010                              FROM 1 BY 1 UNTIL
214500191010                              ldd_TD(li_TDidx) = ln_SaveTradeDate  OR
214600191010                              li_TDidx = li_LastTDidx
214700191010                           CONTINUE
214800191010                      END-PERFORM
214900191010                      COMPUTE ln_NewAHA =  li_AHAFactor *
215000191010126482*                                       ldd_Totaldap(li_TDidx)
215100191010126482                                        ldd_TotalDAPLDAP(li_TDidx)
215200191010                      IF ln_NewAHA < ln_TotalAHA
215300191010      *RFS131316 - Start
215400191010                         COMPUTE ln_AHADifferce = ln_TotalAHA -
215500191010                                                     ln_NewAHA
215600191010                         COMPUTE ln_TotalAfter = ln_TotalAfter +
215700191010                                                        ln_AHADifferce
215800191010      *RFS131316 - End
215900191010                         COMPUTE ln_TotalAHA  = ln_NewAHA
216000191010                      END-IF
216100191010                  END-IF
216200191010      * RFS123925 - End
216300191010147652            IF ltr_TRO(li_TRNidx)
216400191010147652               COMPUTE ln_TransferAHA = ln_TotalAHA
216500191010147652                                      + ln_TotalAfter
216600191010147652               INITIALIZE ln_TotalAHA
216700191010147652                          ln_TotalAfter
216800191010147652            END-IF
216900191010      * RFS 98866 - Start
217000191010                  PERFORM SetToCallFXRDSPCHK
217100191010                  PERFORM CallFXRDSPCHK
217200191010                  IF Pb_RDSPCHKSDSPYes
217300191010      * RFS130936 - START
217400191010      *             INITIALIZE ln_TotalAHA
217500191010      *                        ln_TotAHAGrant
217600191010      *                        ln_TotAHABond
217700191010      *                        ln_AHAGrantLeft
217800191010      *                        ln_AHABondLeft
217900191010      *                        ln_GrantAfter
218000191010      *                        ln_BondAfter
218100191010      *                        RFS133011 - Begins - Initialize After
218200191010133011*                        ln_TotalAfter
218300191010      *                        RFS133011 - Ends
218400191010      * RFS130936 - END
218500191010                    SET lb_PriorWasSDSPYes  TO TRUE
218600191010                  END-IF
218700191010      * RFS 98866 - End
218800191010
218900191010      * RFS130936 - START
219000191010      *           IF ln_TotalAHA > 0
219100191010                  IF ln_TotalAHA > 0 AND NOT Pb_RDSPCHKSDSPYes
219200191010      * RFS130936 - END
219300191010      * RFS 98866 - Start
219400191010                    IF Lb_PriorWasSDSPYes
219500191010                      PERFORM Reduce_AHA_With_DAP
219600191010                      SET Lb_PriorWasSDSPNo TO TRUE
219700191010                    END-IF
219800191010      * RFS 98866 - End
219900191010                     MOVE ltr_TradeDate(li_TRNidx) TO ln_LastTradeDate
220000191010                  END-IF
220100191010           END-IF.
220200191010      * RFS 98866 - Start
220300191010           IF pb_RDSPCHKSDSPYes
220400191010      *      RFS117402 - Begins - Set SDSPYes to true
220500191010             SET ltr_SDSPYes(li_TRNidx) TO TRUE
220600191010             PERFORM SET_SDSPYes
220700191010      *      RFS117402 - Ends
220800191010             SET ldh_AHAGroupYes(li_TDidx) TO TRUE
220900191010           END-IF.
221000191010      * RFS 98866 - End
221100191010
221200191010      *_______________________________________________________________*
221300191010      * Bypass rejected or processed DAP transactions
221400191010      *_______________________________________________________________*
221500191010           IF NOT ltr_RejectionOK (li_TRNidx)    OR
221600191010              ltr_ProcessedDAP(li_TRNidx) = lncc_Y
221700191010              CONTINUE
221800191010           ELSE
221900191010
222000191010              IF ltr_DAP(li_TRNidx) AND  ln_TotalAHA > 0
222100191010      *          RFS130936 - DM - Only if not SDSP - Begins
222200191010                 AND NOT Pb_RDSPCHKSDSPYes
222300191010      *          RFS130936 - Ends
222400191010      *_______________________________________________________________*
222500191010      * Process DAPs that have AHA amount to repay, first
222600191010      *_______________________________________________________________*
222700191010                 SET lb_GroupOKTrue  TO TRUE
222800191010                 PERFORM Process_DAPs_AHAs VARYING li_TDidx FROM 1 BY 1
222900191010                         UNTIL li_TDidx  > li_LastTDidx
223000191010                         OR lb_GroupOKFalse
223100191010
22320019101080658            IF lb_GroupOKFalse
22330019101080658 *_______________________________________________________________*
22340019101080658 * Reload DAP/AHA array without the rejected DAPs.
22350019101080658 *_______________________________________________________________*
22360019101080658               INITIALIZE  ldh_DAPAHATransArray
22370019101080658                           li_TDidx
22380019101080658                           li_DAPidx
22390019101080658
22400019101080658               PERFORM Reload_DAP_AHA_Array
22410019101080658                       VARYING li_Idx FROM 1 BY 1
22420019101080658                       UNTIL li_Idx  > li_LastTRNidx
22430019101080658
22440019101080658               COMPUTE li_LastTDidx   = li_TDidx
22450019101080658               COMPUTE li_LastDAPidx  = li_DAPidx
22460019101080658               INITIALIZE ln_SaveTradeDate
22470019101080658            END-IF
224800191010              ELSE
224900191010                  MOVE ltr_InvCode  (li_TRNidx) TO Pass-CDSC-Investment
225000191010                  MOVE ltr_TradeDate(li_TRNidx) TO Pass-CDSC-Trade-Date
225100191010                  MOVE lncc_SEL                 TO Pass-Trans-Type-Code
225200191010                  MOVE ltr_RedemCode  (li_TRNidx) TO Pass-Redem-Code
225300191010
225400191010158078            SET lb_PlacedAsNetFalse TO TRUE
225500191010
22560019101084456             IF ltr_GrossOrNet (li_TRNidx) = lncc_N
225700191010158078            SET lb_PlacedAsNetTrue  TO TRUE
22580019101084456                MOVE ltr_NetAmt  (li_TRNidx) TO Pass-CDSC-Net
22590019101084456                MOVE ZEROS  TO  Pass-CDSC-Gross
22600019101084456             ELSE
22610019101084456                MOVE ltr_GrossAmt(li_TRNidx) TO Pass-CDSC-Gross
22620019101084456                MOVE ZEROS  TO  Pass-CDSC-Net
22630019101084456             END-IF
226400191010
226500191010                  MOVE ltr_UnitAmt    (li_TRNidx) TO Pass-CDSC-Units
226600191010                  MOVE ltr_SplitOption(li_TRNidx) TO Pass-Split-Option
226700191010                  MOVE ltr_WaiveDSC   (li_TRNidx) TO Pass-Waive-DSC
226800191010                  MOVE ltr_WaiveERF   (li_TRNidx) TO Pass-Waive-ERF
226900191010                  MOVE ltr_TreatAWD   (li_TRNidx) TO Pass-Treat-AWD
227000191010
227100191010                  IF ltr_SplitOption(li_TRNidx) = lncc_Percent
227200191010                     MOVE ltr_PerAmt(li_TRNidx) TO Pass-CDSC-Gross
227300191010                  END-IF
227400191010
227500191010      * RFS134243 -Start
227600191010                  INITIALIZE lc_TradeRule
227700191010                  MOVE ltr_RedemRule  (li_TRNidx) TO lc_TradeRule
227800191010      * RFS134243 - End
227900191010
228000191010                  PERFORM Call_Calculator
228100191010
228200191010                  MOVE Pass-Rejection-Code TO ltr_RejectCode(li_TRNidx)
228300191010                  MOVE Pass-CDSC-Gross    TO ltr_ResultGross(li_TRNidx)
228400191010      * RFS 98866 - Start
228500191010                  COMPUTE ltr_TaxableAmount(li_TRNIDX) =
228600191010                            ltr_ResultGross(li_TRNIDX) -
228700191010                            pi_NonTaxableAmount
228800191010                  IF pb_RDSPCHKSDSPYes
228900191010                    MOVE pi_CDSPGrantAmount
229000191010                                       TO ltr_DAPGrant (li_TRNidx)
229100191010                    MOVE pi_CDSPBondAmount
229200191010                                       TO ltr_DAPBond (li_TRNidx)
229300191010                  END-IF
229400191010      * RFS 98866 - End
229500191010                  MOVE Pass-CDSC-Net      TO ltr_ResultNet(li_TRNidx)
229600191010
229700191010      *_______________________________________________________________*
229800191010      * Check if LDAP maximum exceeded for stand alone DAP/LDAP.
229900191010      *_______________________________________________________________*
230000191010                 IF ltr_RejectionOK(li_TRNidx)  AND  ltr_DAP(li_TRNidx)
230100191010
230200191010                    COMPUTE ln_LDAPYTD = ln_LDAPYTD +
230300191010                                         ltr_ResultGross(li_TRNidx)
230400200918      *RFS1102330 - Starts
230500200918                    INITIALIZE Li_QualifyingDAPCount
230600200918                    MOVE ltr_AccountNo (li_TRNidx) TO DS5_AccountNo
230700200918                    MOVE ltr_TradeDate (li_TRNidx) TO DS5_TradeDate
230800200918                    PERFORM Call-FXRDSPDS5
230900200921      *RFS1020656 - Starts
231000191205020656*             IF ltr_RedemRule(li_TRNidx) = lncc_12  OR
231100191205020656*               (ltr_RedemRule(li_TRNidx) = lncc_11  AND
231200191205020656*                lc_RestrictedYear = lncc_Y)
231300200918020656*             IF(ltr_RedemRule(li_TRNidx) = lncc_12  OR
231400200918                    IF((ltr_RedemRule(li_TRNidx) = lncc_12 AND
231500200918                      Li_QualifyingDAPCount = 0)           OR
231600200921      *RFS1102330 - Ends
231700191205020656                (ltr_RedemRule(li_TRNidx) = lncc_11  AND
231800191205020656                 lc_RestrictedYear = lncc_Y))        AND NOT
231900191205020656                 ltr_SDSPYes(li_TRNidx)
232000191205      *RFS1020656 - END
232100191205
23220019120580658                  IF ln_LDAPYTD > ln_LDAPMax  AND
23230019120580658                     ltr_WaiveDS5(li_TRNidx)  NOT = lncc_Y
232400191010                          MOVE lncc_DS5  TO  ltr_RejectCode(li_TRNidx)
232500191010004568                    MOVE lncc_DS5  TO  lc_RejectionCode
232600191010004568                    PERFORM Find_and_Reject_Group
232700191010004568                       VARYING li_TDidx FROM 1 BY 1
232800191010004568                          UNTIL li_TDidx  > li_LastTDidx
232900191010                       END-IF
233000191010
233100191010                    END-IF
233200191010                 END-IF
233300191010
23340019101084456 *_______________________________________________________________*
23350019101084456 * Save notional values for stand alone DAPs/LDAPs.
23360019101084456 *_______________________________________________________________*
23370019101084456            IF ltr_RejectionOK(li_TRNidx)  AND  ltr_DAP(li_TRNidx)
23380019101084456              MOVE ln_TotalCapital TO ltr_TotalCapital(li_TRNidx)
23390019101091272              MOVE ln_TotalRollover TO ltr_TotalRollover(li_TRNidx)
23400019101084456              MOVE ln_TotalGrant   TO ltr_TotalGrant(li_TRNidx)
23410019101084456              MOVE ln_TotalBond    TO ltr_TotalBond(li_TRNidx)
234200191010      *RFS126482 - Start
234300191010                   MOVE pi_WHTaxRateBasis TO
234400191010                                    ltr_WHTaxRateBasis(li_TRNidx)
234500191010                   MOVE pi_ActualTax      TO
234600191010                                    ltr_ActualTax(li_TRNidx)
234700191010                   MOVE pi_ActualProvTax  TO
234800191010                                    ltr_ActualProvTax(li_TRNidx)
234900191010      *RFS126482 - End
235000191010      *            RFS130936 - DM - Store AHA for SDSP - Begins
235100191010                   IF pb_RDSPCHKSDSPYes
235200191010                      MOVE ln_TotAHAGrant
235300191010                        TO ltr_TotAHAGrant(li_TRNidx)
235400191010                      MOVE ln_TotAHABond
235500191010                        TO ltr_TotAHABond(li_TRNidx)
235600191010                   END-IF
235700210122      *RFS1103329 - Start
235800210122                   PERFORM StoreInDAPAHATrans
235900210122      *RFS1103329 - End
236000191010      *            RFS130936 - Ends
23610019101084456            END-IF
236200191010
236300191010              END-IF
236400191010           END-IF.
236500191010
236600191010      *_______________________________________________________________*
236700191010      * If there was a DAP in the array, check if there are enough
236800191010      * assets to cover grant/bond purchased after the last DAP.
236900191010      *_______________________________________________________________*
237000191010           IF li_TRNidx > 0
237100191010              IF lb_DAPExistsTrue               AND
237200191010                 lb_GrantBondAfterCheckedFalse  AND
237300191010                 ln_TotalAfter  > 0             AND
237400191010                 li_TRNidx  = li_LastTRNidx
237500191010130936           AND NOT Pb_RDSPCHKSDSPYes
237600191010                    PERFORM Get_HighestMV_Fund
237700191010                    PERFORM Redeem_Grant_Bond_After  UNTIL
237800191010                            ln_TotalAfter <= 0
237900191010                         OR ln_MarketValue = 0
238000191010
238100191010      *_______________________________________________________________*
238200191010      * If there is still not enough assets to cover the grant/bond
238300191010      * after, reject transactions, starting from the last one and up,
238400191010      * until the grant/bond after amount is covered.
238500191010      *_______________________________________________________________*
238600191010                 IF ln_TotalAfter > 0
238700191010
238800191010                    PERFORM VARYING li_TRNIdx
238900191010                            FROM li_TRNidx BY -1 UNTIL
239000191010                            ln_TotalAfter <= 0
239100191010                         OR li_TRNIdx  = 0
239200191010
239300191010                       IF ltr_RejectionOK (li_TRNidx)
239400191010                          COMPUTE ln_TotalAfter =  ln_TotalAfter -
239500191010                                  ltr_ResultNet(li_TRNidx)
239600191010                          MOVE lncc_DS4 TO ltr_RejectCode(li_TRNidx)
239700191010
239800191010                          IF ltr_DAP(li_TRNidx)
239900191010004568                       MOVE lncc_DS4 TO lc_RejectionCode
240000191010                             PERFORM Find_and_Reject_Group
240100191010                                     VARYING li_TDidx FROM 1 BY 1
240200191010                                     UNTIL li_TDidx  > li_LastTDidx
240300191010                          END-IF
240400191010                       END-IF
240500191010
240600191010                    END-PERFORM
240700191010                    MOVE li_LastTRNIdx  TO  li_TRNidx
240800191010                 END-IF
240900191010              END-IF
241000191010           END-IF.
241100191010      * RFS 98866 - Start
241200191010      * RFS 98866 - Regression Defect - Begins (Add IF li_TRNidx > 0
241300191010      *                                         condition)
241400191010           IF li_TRNidx > 0
241500191010              COMPUTE li_TotalProcessedTaxable =
241600191010                         li_TotalProcessedTaxable +
241700191010                         ltr_TaxableAmount(li_TRNIDX)
241800191010              IF ((ltr_TaxableAmount(li_TRNIDX)    +
241900191010                   pi_RDSPCHKSDSPDAPTaxableAmt)    >
242000191010                     pi_RDSPCHKSDSPDAPTaxableMax)
242100191010132895            AND ltr_SDSPYes(li_TRNidx)
242200191010127070            AND pi_RDSPCHKSDSPDAPTaxableMax >=
242300191010127070                pi_RDSPCHKSDSPTaxablePortion
242400191010                MOVE Lncc_DSD to ltr_RejectCode(Li_TRNIDX)
242500191010                IF Ltr_DAP(li_TRNidx)
242600191010004568            MOVE lncc_DS4 TO lc_RejectionCode
242700191010                  PERFORM Find_And_Reject_Group VARYING Li_TDidx
242800191010                   FROM 1 BY 1 UNTIL li_TDidx > li_LastTDidx
242900191010                END-IF
243000191010              END-IF
243100191010           END-IF.
243200191010      * RFS 98866 - Regression Defect - Ends
243300191010      * RFS 98866 - End
243400191010      * RFS117402 - Begins - New procedure to set SDSP in the DAP/AHA array
243500191010      * _________________________________
243600191010       SET_SDSPYes.
243700191010      * _________________________________
243800191010      * This procedure will search the DAP/AHA array for the current
243900191010      * Trans Array record in order to set SDSPYes to true, if found.
244000191010           SET lb_SDSPSetNo to TRUE.
244100191010           MOVE  1      TO  li_TDidx
244200191010                            li_AHAidx.
244300191010
244400191010           PERFORM VARYING li_TDidx FROM 1 BY 1 UNTIL
244500191010                   li_TDidx  > li_LastTDidx
244600191010                   OR lb_SDSPSetYes
244700191010              PERFORM VARYING li_AHAidx FROM 1 BY 1 UNTIL
244800191010                      ldh_InvCode(li_TDidx, li_AHAidx) = SPACES
244900191010                      OR lb_SDSPSetYes
245000191010                 IF ltr_PlacementDate(li_TRNidx) =
245100191010                    ldh_PlacementDate(li_TDidx, li_AHAidx)  AND
245200191010                    ltr_TransNo(li_TRNidx) =
245300191010                    ldh_TransNo(li_TDidx, li_AHAidx)
245400191010                       SET ldh_SDSPYes(li_TDidx, li_AHAidx) TO TRUE
245500191010                       SET lb_SDSPSetYes TO TRUE
245600191010                 END-IF
245700191010
245800191010              END-PERFORM
245900191010           END-PERFORM.
246000191010      * RFS117402 - Ends
246100210122      * RFS1103329 - Start
246200210122      * _________________________________
246300210122       StoreInDAPAHATrans.
246400210122      * _________________________________
246500210122           PERFORM VARYING li_TDidx FROM 1 BY 1
246600210122                    UNTIL li_TDidx  > li_LastTDidx
246700210122
246800210122             PERFORM VARYING li_DAPidx FROM 1 BY 1 UNTIL
246900210122                   ldh_InvCode(li_TDidx, li_DAPidx) = SPACES
247000210122
247100210122               IF ltr_PlacementDate(li_TRNidx) =
247200210122                  ldh_PlacementDate(li_TDidx, li_DAPidx) AND
247300210122                  ltr_TransNo(li_TRNidx) =
247400210122                  ldh_TransNo(li_TDidx, li_DAPidx)
247500210122                  MOVE ln_TotalCapital
247600210122                    TO ldh_TotalCapital(li_TDidx, li_DAPidx)
247700210122                  MOVE ln_TotalRollover
247800210122                    TO ldh_TotalRollover(li_TDidx, li_DAPidx)
247900210122                 MOVE ln_TotalGrant
248000210122                   TO ldh_TotalGrant(li_TDidx, li_DAPidx)
248100210122                 MOVE ln_TotalBond
248200210122                   TO ldh_TotalBond(li_TDidx, li_DAPidx)
248300210122                 MOVE pi_WHTaxRateBasis
248400210122                   TO ldh_WHTaxRateBasis(li_TDidx, li_DAPidx)
248500210122                 MOVE pi_ActualTax
248600210122                   TO ldh_ActualTax(li_TDidx, li_DAPidx)
248700210122                 MOVE pi_ActualProvTax
248800210122                   TO ldh_ActualProvTax(li_TDidx, li_DAPidx)
248900210122                 MOVE ln_TotAHAGrant
249000210122                   TO ldh_TotAHAGrant(li_TDidx, li_DAPidx)
249100210122                 MOVE ln_TotAHABond
249200210122                   TO ldh_TotAHABond(li_TDidx, li_DAPidx)
249300210122              END-IF
249400210122            END-PERFORM
249500210122           END-PERFORM.
249600210122      * RFS1103329 - End
249700210122      * _________________________________
249800191010       Process_Closure.
249900191010      * _________________________________
250000191010           INITIALIZE li_CDSC_Charged.
250100191010147652     INITIALIZE li_TotalTransferNet.
250200191010147652     INITIALIZE li_TotalTransferCDSC.
250300191010147652     INITIALIZE li_TotalTransferClawback.
250400191010134243     INITIALIZE li_TotalClosureDAPTaxable.
250500191010133572     INITIALIZE li_TotalClosureDAPGross.
250600191010181302     INITIALIZE li_TotalClosureAHAGross.
250700191010133572     INITIALIZE li_UpdateMV.
250800201218      *RFS1108840 Begins
250900201218           INITIALIZE ln_LDAPYTD.
251000201218      *RFS1108840 Ends
251100191010      *RFS181302-STARTS.
251200191010           PERFORM Apply_Accrual.
251300191010      *RFS181302-ENDS.
251400191010           SET lb_ProcessedClosureTrue   TO  TRUE.
251500191010           MOVE  1      TO  li_TDidx
251600191010                            li_LastTDidx
251700191010                            li_AHAidx
251800191010                            ln_DetailSeqNo.
251900191010      *_______________________________________________________________*
252000191010      * Move closure trigger transaction to the DAP/AHA array
252100191010      * Use the AHA closure trigger as a first repayment transaction.
252200191010      * After that, add the remaining AHA entries to the array.
252300191010      *_______________________________________________________________*
252400191010           MOVE ltr_TradeDate(li_TRNidx) TO  ldh_TD(li_TDidx)
25250019101080658 *                                      lsv_TD(li_TDidx)
252600191010                                             ln_SaveTradeDate.
252700191119      *RFS1008981 - Starts.
252800191119           IF ltr_AHATDFlag(li_TRNidx) = 'T'
252900191119              MOVE 'Y' TO ldd_UseDAPtd(li_TDidx)
253000191119           END-IF
253100191119      *RFS1008981 - Ends.
253200191119
253300191010134243     PERFORM Get-DTC-BPA-Amt.
253400191010      *RFS1019285 - Starts.
253500191010           IF Lb_DeceasedClosureYes
253600191010           INITIALIZE li_DTCBPA
253700191010                      li_ProvDTCBPA
253800191010           END-IF.
253900191010      *RFS1019285 - Ends.
254000191010134243     PERFORM Get-historical-Payment-Amt.
254100191010R88074     MOVE ltr_PaymentType  (li_TRNidx) TO lc_SavePaymentType.
254200191010  |        MOVE ltr_PlacementDate(li_TRNidx) TO ln_SavePlacementDate.
254300191010R88074     MOVE ltr_TransNo      (li_TRNidx) TO ln_SaveTransNo.
254400191010
25450019101080658      MOVE lncc_Y                   TO  ldh_AHAGroup(li_TDidx).
25460019101080658 *                                      lsv_AHAGroup(li_TDidx).
254700191010           MOVE ltr_AccountTrans(li_TRNidx)
25480019101080658        TO ldh_DAPAHATrans (li_TDidx, li_AHAidx).
25490019101080658 *         lsv_DAPAHATrans (li_TDidx, li_AHAidx).
255000191010
255100191010           MOVE ln_DetailSeqNo
255200191010             TO ldh_DetailSeqNo (li_TDidx, li_AHAidx).
255300191010
255400191010           PERFORM Get_AHA_Amounts.
255500200529      *RFS1099376-Starts *
255600200529           IF Lb_DeceasedClosureYes
255700200529           AND ln_TotalAHA = 0
255800200529               SET Lb_NoAHAClosureYes     TO TRUE
255900200529           END-IF.
256000200529      *RFS1099376-Ends *
256100191010
256200191010           IF ln_TotalAHA > 0
25630019101084456 *_______________________________________________________________*
25640019101084456 * Save notional values for potential DAPs.
25650019101084456 *_______________________________________________________________*
25660019101084456         MOVE  ln_TotalCapital
25670019101084456           TO  ldh_TotalCapital(li_TDidx, li_AHAidx)
25680019101084456         MOVE  ln_TotalGrant
25690019101084456           TO  ldh_TotalGrant  (li_TDidx, li_AHAidx)
25700019101084456         MOVE  ln_TotalBond
25710019101084456           TO  ldh_TotalBond   (li_TDidx, li_AHAidx)
257200191010      *RFS91272 - START
257300191010              MOVE  ln_TotalRollover
257400191010                TO  ldh_TotalRollover (li_TDidx, li_AHAidx)
257500191010      *RFS91272 - END
257600191010
257700191010      *_______________________________________________________________*
257800191010      * Try to redeem AHA using closure trigger transaction first
257900191010      *_______________________________________________________________*
258000191010              PERFORM Common_AHA_Logic
258100191010           ELSE
258200200529      *RFS1099376- Starts. *
258300200529             IF NOT Lb_NoAHAClosureYes
258400200529      *RFS1099376- Ends.
258500191010              MOVE lncc_DS8  TO Pass-Rejection-Code
258600191010              MOVE ldh_PlacementDate(li_TDidx, li_AHAidx)
258700191010                TO ln_RejPlacementDate
258800191010              MOVE ldh_TransNo(li_TDidx, li_AHAidx)
258900191010                TO ln_RejTransNo
259000191010              MOVE ldh_TD(li_TDidx) TO ln_RejTradeDate
259100191010              PERFORM Reject_DAPs_and_Restart
259200200529      *RFS1099376- Starts. *
259300200529             ELSE
259400200529               MOVE ln_TotalCapital
259500200529                    TO ldh_TotalCapital(li_TDidx, li_AHAidx)
259600200529               MOVE ln_TotalGrant
259700200529                    TO ldh_TotalGrant (li_TDidx, li_AHAidx)
259800200529               MOVE ln_TotalBond
259900200529                    TO ldh_TotalBond (li_TDidx, li_AHAidx)
260000200529               MOVE ln_TotalRollover
260100200529                    TO ldh_TotalRollover (li_TDidx, li_AHAidx)
260200200529               MOVE lc_RedemCodeDAP
260300200529                    TO ldh_RedemCode (li_TDidx, li_AHAidx)
260400200529                       Pass-Redem-Code
260500200529               MOVE lncc_11
260600200529                    TO ldh_RedemRule(li_TDidx, li_AHAidx)
260700200529               MOVE Lncc_Y
260800200529                    TO ldh_WaiveDS5(li_TDidx, li_AHAidx)
260900200529               PERFORM Process_DAPs_AHAs
261000200529             END-IF
261100200529      *RFS1099376- Ends.
261200191010           END-IF.
261300191010
261400191010      *_______________________________________________________________*
261500191010      * If there is still more AHA to repay, use the highest market
261600191010      * funds to repay AHA.
261700191010      *_______________________________________________________________*
261800191010           IF lb_GroupOKTrue AND ln_TotalAHA > 0
261900191010              PERFORM Get_HighestMV_Fund
262000191010              PERFORM Add_AHA_Using_HighestMV  UNTIL
262100191010                      ln_TotalAHA    = 0
262200191010                   OR ln_MarketValue = 0
262300191010                   OR lb_GroupOKFalse
262400191010           END-IF.
262500191010
262600191010      * RFS 68035.29 - begins.
262700191010      *_______________________________________________________________*
262800191010      * At this point, AHA is either repaid or there are no more assets
262900191010      * left in the account. If not all AHA is repaid, recalculate
263000191010      * grant and bond portions.
263100191010      *_______________________________________________________________*
263200191010           IF lb_GroupOKTrue AND ln_TotalAHA > 0
263300191010      *RFS108486 Starts
263400191010              IF li_CDSC_Charged > 0 AND lc_GRNTNFNotFound
263500191010147652           COMPUTE Li_DescendingClawback = ln_TotalAHA
263600191010                 PERFORM Clawback_CDSC_Charged
263700191010              END-IF
263800191010      *RFS108486 Ends
263900191010127195        IF ln_TotalAHA > 0
264000191010              PERFORM Recalc_Grant_Bond_Portions
264100191010127195        END-IF
264200191010           END-IF.
264300191010      * RFS 68035.29 - ends.
264400191010
264500191010      *_______________________________________________________________*
264600191010      * If all of AHA has been repaid and there more assets left,
264700191010      * create all unit DAPs for the remaining units.
264800191010      *_______________________________________________________________*
264900191010           IF lb_GroupOKTrue
265000191010              MOVE ln_DetailSeqNo
265100191010                TO ldh_LastDetailSeqNo(li_TDidx)
265200191010
265300191010              PERFORM Get_HighestMV_Fund
265400191010              PERFORM Add_DAP_Using_HighestMV  UNTIL
265500191010                      ln_MarketValue = 0
265600191010                   OR lb_GroupOKFalse
265700191010           END-IF.
265800191010
265900191010      * _________________________________
266000191010       Process_DAPs_AHAs.
266100191010      * _________________________________
266200191010
266300191010           IF ltr_TradeDate(li_TRNidx) = ldh_TD(li_TDidx)
266400191010
266500191010              MOVE lncc_Y       TO ldh_AHAGroup(li_TDidx)
266600191010      *_______________________________________________________________*
266700191010      * Redeem all DAPs within the group first.
266800191010      *_______________________________________________________________*
266900191010              PERFORM VARYING li_DAPidx FROM 1 BY 1 UNTIL
267000191010                      ldh_InvCode(li_TDidx, li_DAPidx) = SPACES
267100191010                   OR lb_GroupOKFalse  OR  li_TDidx = 0
267200191010
267300191010                 MOVE  ldh_InvCode      (li_TDidx, li_DAPidx)
267400191010                   TO  Pass-CDSC-Investment
267500191010                 MOVE  ldh_TradeDate    (li_TDidx, li_DAPidx)
267600191010                   TO  Pass-CDSC-Trade-Date
267700191010                 MOVE  ldh_RedemCode    (li_TDidx, li_DAPidx)
267800191010                   TO  Pass-Redem-Code
267900191010
268000191010158078           SET lb_PlacedAsNetFalse TO TRUE
268100191010
26820019101084456            IF ldh_GrossOrNet (li_TDidx, li_DAPidx) = lncc_N
268300191010158078           SET lb_PlacedAsNetTrue  TO TRUE
26840019101084456               MOVE  ldh_NetAmt    (li_TDidx, li_DAPidx)
26850019101084456                 TO  Pass-CDSC-Net
26860019101084456               MOVE  ZEROS  TO  Pass-CDSC-Gross
26870019101084456            ELSE
26880019101084456               MOVE  ldh_GrossAmt  (li_TDidx, li_DAPidx)
26890019101084456                 TO  Pass-CDSC-Gross
26900019101084456               MOVE  ZEROS  TO  Pass-CDSC-Net
26910019101084456            END-IF
269200191010
269300191010                 MOVE  ldh_UnitAmt      (li_TDidx, li_DAPidx)
269400191010                   TO  Pass-CDSC-Units
269500191010                 MOVE  ldh_SplitOption  (li_TDidx, li_DAPidx)
269600191010                   TO  Pass-Split-Option
269700191010                 MOVE  ldh_WaiveDSC     (li_TDidx, li_DAPidx)
269800191010                   TO  Pass-Waive-DSC
269900191010                 MOVE  ldh_WaiveERF     (li_TDidx, li_DAPidx)
270000191010                   TO  Pass-Waive-ERF
270100191010                 MOVE  ldh_TreatAWD     (li_TDidx, li_DAPidx)
270200191010                   TO  Pass-Treat-AWD
270300191010                 MOVE  lncc_SEL  TO  Pass-Trans-Type-Code
270400191010
270500191010                 IF ldh_SplitOption(li_TDidx, li_DAPidx) = lncc_Percent
270600191010                    MOVE ldh_PerAmt(li_TDidx, li_DAPidx)
270700191010                      TO Pass-CDSC-Gross
270800191010                 END-IF
270900191010
271000191010      * RFS134243 -Start
271100191010                  INITIALIZE lc_TradeRule
271200191010                  MOVE ldh_RedemRule    (li_TDidx, li_DAPidx)
271300191010                    TO lc_TradeRule
271400191010      * RFS134243 - End
271500191010                 PERFORM Call_Calculator
271600191010
271700191010                 IF NOT Pass-Rejection-Code-OK
271800191010                    MOVE  Pass-Rejection-Code
271900191010                      TO  ldh_RejectCode(li_TDidx, li_DAPidx)
272000191010                    MOVE  ldh_PlacementDate(li_TDidx, li_DAPidx)
272100191010                      TO  ln_RejPlacementDate
272200191010                    MOVE  ldh_TransNo(li_TDidx, li_DAPidx)
272300191010                      TO  ln_RejTransNo
272400191010                    MOVE ldh_TD(li_TDidx) TO ln_RejTradeDate
272500191010                    PERFORM Reject_DAPs_and_Restart
272600191010                 END-IF
272700191010
272800191010                 IF Pass-Rejection-Code-OK
272900191010                    PERFORM Validate_LDAP_Maximum
273000191010
273100191010                    IF Pass-Rejection-Code-OK
273200191010                       MOVE  Pass-CDSC-Gross
273300191010                         TO  ldh_ResultGross (li_TDidx, li_DAPidx)
273400191010                       MOVE  Pass-CDSC-Net
273500191010                         TO  ldh_ResultNet   (li_TDidx, li_DAPidx)
27360019101084456                  MOVE  ln_TotalCapital
27370019101084456                    TO  ldh_TotalCapital(li_TDidx, li_DAPidx)
273800191010      *RFS91272 -  START
273900191010                       MOVE  ln_TotalRollover
274000191010                         TO  ldh_TotalRollover(li_TDidx, li_DAPidx)
274100191010      *RFS91272 - END
274200191010      *RFS126482 - Start
274300191010134243               IF lb_TrDAP
274400191010                       MOVE pi_WHTaxRateBasis
274500191010                         TO  ldh_WHTaxRateBasis(li_TDidx, li_DAPidx)
274600191010                       MOVE pi_ActualTax
274700191010                         TO  ldh_ActualTax(li_TDidx, li_DAPidx)
274800191010                       MOVE pi_ActualProvTax
274900191010                         TO  ldh_ActualProvTax(li_TDidx, li_DAPidx)
275000191010134243               END-IF
275100191010      *RFS126482 - End
27520019101084456                  MOVE  ln_TotalGrant
27530019101084456                    TO  ldh_TotalGrant  (li_TDidx, li_DAPidx)
27540019101084456                  MOVE  ln_TotalBond
27550019101084456                    TO  ldh_TotalBond   (li_TDidx, li_DAPidx)
275600191010                       MOVE  ln_TotAHAGrant
275700191010                         TO  ldh_TotAHAGrant (li_TDidx, li_DAPidx)
275800191010                       MOVE  ln_TotAHABond
275900191010                         TO  ldh_TotAHABond  (li_TDidx, li_DAPidx)
276000191010                       MOVE  ZEROS
276100191010                         TO  ldh_AHAGrant    (li_TDidx, li_DAPidx)
276200191010                             ldh_AHABond     (li_TDidx, li_DAPidx)
276300191010
276400191010                       PERFORM Mark_Processed_DAP
276500191010
27660019101084456 *_______________________________________________________________*
27670019101084456 * If a DAP was placed with split option %, save Unit Amount in
27680019101084456 * the array. When the ldh array is processed at the end, it will
27690019101084456 * tbe used to update the transaction to Units.
27700019101084456 *_______________________________________________________________*
27710019101084456                  IF ldh_SplitOption(li_TDidx, li_DAPidx) =
27720019101084456                     lncc_Percent
27730019101084456                       MOVE  Pass-CDSC-Units
27740019101084456                         TO  ldh_UnitAmt  (li_TDidx, li_DAPidx)
27750019101084456                  END-IF
277600191010
277700191010                    ELSE
277800191010                       MOVE  Pass-Rejection-Code
277900191010                         TO  ldh_RejectCode(li_TDidx, li_DAPidx)
278000191010                       MOVE  ldh_PlacementDate(li_TDidx, li_DAPidx)
278100191010                         TO  ln_RejPlacementDate
278200191010                       MOVE  ldh_TransNo(li_TDidx, li_DAPidx)
278300191010                         TO  ln_RejTransNo
278400191010                       MOVE ldh_TD(li_TDidx) TO ln_RejTradeDate
278500191010                       PERFORM Reject_DAPs_and_Restart
278600191010                    END-IF
278700191010                 END-IF
278800191010              END-PERFORM
278900191010
279000191010      *_______________________________________________________________*
279100191010      * If DAPs were redeemed without error, add AHA entries to the
279200191010      * DAP/AHA array and try to redeem them using DAP funds first.
279300191010      *_______________________________________________________________*
279400191010              IF lb_GroupOKTrue
279500191010                 MOVE ZERO TO li_Idx
279600191010                              ln_DetailSeqNo
279700191010                 PERFORM Add_AHA_Using_DAP_funds  UNTIL
279800191010                            li_Idx  = li_DAPidx
279900191010                         OR ln_TotalAHA = 0
280000191010                         OR lb_GroupOKFalse
280100191010              END-IF
280200191010
280300191010      *_______________________________________________________________*
280400191010      * If there is still more AHA to repay, add AHA entries to the
280500191010      * DAP/AHA array and try to redeem them using highest market
280600191010      * value funds.
280700191010      *_______________________________________________________________*
280800191010              IF lb_GroupOKTrue  AND ln_TotalAHA > 0
280900191010                    PERFORM Get_HighestMV_Fund
281000191010                    PERFORM Add_AHA_Using_HighestMV  UNTIL
281100191010                            ln_TotalAHA    = 0
281200191010                         OR ln_MarketValue = 0
281300191010                         OR lb_GroupOKFalse
281400191010              END-IF
281500191010
281600191010      *_______________________________________________________________*
281700191010      * At this point if there is still more AHA left, reject the
281800191010      * DAP group and restart.
281900191010      *_______________________________________________________________*
282000191010              IF lb_GroupOKTrue  AND ln_TotalAHA > 0
282100191010                  MOVE lncc_DS4          TO  Pass-Rejection-Code
282200191010                  MOVE ZEROS             TO  ln_RejPlacementDate
282300191010                                             ln_RejTransNo
282400191010                  MOVE ldh_TD(li_TDidx)  TO  ln_RejTradeDate
282500191010                  PERFORM Reject_DAPs_and_Restart
282600191010              END-IF
282700191010
282800191010              IF lb_GroupOKTrue
282900191010                  MOVE ln_DetailSeqNo
283000191010                    TO ldh_LastDetailSeqNo(li_TDidx)
283100191010              END-IF
283200191010           END-IF.
283300191010
283400191010      * _________________________________
283500191010       Add_AHA_Using_DAP_Funds.
283600191010      * _________________________________
283700191010           COMPUTE li_AHAidx = li_DAPidx - 1.
283800191010
283900191010           PERFORM VARYING li_Idx FROM 1 BY 1 UNTIL
284000191010                   li_Idx  = li_DAPidx
284100191010                   OR lb_GroupOKFalse
284200191010                   OR ln_TotalAHA = 0
284300191010
284400191010      *_______________________________________________________________*
284500191010      * Check Market Value of the DAP fund. Skip the fund in case DAP
284600191010      * has redeemed ALL units from the fund.
284700191010      *_______________________________________________________________*
284800191010              INITIALIZE lc_InvCode
284900191010              MOVE ldh_InvCode(li_TDidx, li_Idx) TO lc_InvCode
285000191010              PERFORM Check_Unit_Bal
285100191010
285200210106      *RFS1106828 Start
285300210106              IF ldd_UseDAPtd(li_TDidx) = 'Y'
285400210106                 MOVE ldh_TradeDate (li_TDidx, li_AHAidx)
285500210106                   TO ldh_RepaymentDate(li_TDidx, li_AHAidx)
285600210106              ELSE
285700210106                 MOVE li_AsAtDate
285800210106                   TO ldh_RepaymentDate(li_TDidx, li_AHAidx)
285900210106              END-IF
286000210106      *RFS1106828 End
286100210106
286200191010              IF ln_UnitBal = 0
286300210105                 CONTINUE
286400191010              ELSE
286500191010                 ADD 1  TO  li_AHAidx
286600191010                            ln_DetailSeqNo
286700191010      *_______________________________________________________________*
286800191010      * Move DAP record to the next occurence.
286900191010      * It will become an AHA record if successfully processed
287000191010      *_______________________________________________________________*
287100191010                 MOVE ldh_DAPAHATrans(li_TDidx, li_Idx)
287200191010                   TO ldh_DAPAHATrans(li_TDidx, li_AHAidx)
287300191010      *_______________________________________________________________*
287400191010      * Set values for AHA record.
287500191010      *_______________________________________________________________*
287600191010                 MOVE  ZEROS  TO ldh_PlacementDate(li_TDidx, li_AHAidx)
287700191010                                 ldh_TransNo      (li_TDidx, li_AHAidx)
287800210106
287900210405      *RFS1112868 - Start
288000210405                 IF ldd_UseDAPtd(li_TDidx) = 'Y'
288100210405                    MOVE ldh_TradeDate (li_TDidx, li_AHAidx)
288200210405                      TO ldh_RepaymentDate(li_TDidx, li_AHAidx)
288300210405                 ELSE
288400210405                    MOVE li_AsAtDate
288500210405                      TO ldh_RepaymentDate(li_TDidx, li_AHAidx)
288600210405                 END-IF
288700210405      *RFS1112868 - End
288800210106      *RFS1106828 - Start
288900210106      *          MOVE  ldh_TD(li_TDidx)
289000210106      *            TO  ldh_RepaymentDate(li_TDidx, li_AHAidx)
289100210106      *RFS1106828 - End
289200191010                 MOVE  ln_DetailSeqNo
289300191010                   TO  ldh_DetailSeqNo(li_TDidx, li_AHAidx)
289400191010
289500191010                 PERFORM Common_AHA_Logic
289600191010              END-IF
289700191010
289800191010           END-PERFORM.
289900191010
290000191010      * _________________________________
290100191010       Add_AHA_Using_HighestMV.
290200191010      * _________________________________
290300191010           ADD 1 TO  li_AHAidx
290400191010                     ln_DetailSeqNo.
290500191010
290600191010      *_______________________________________________________________*
290700191010      *  Carry over the last entry to the new entry
290800191010      *_______________________________________________________________*
290900191010           MOVE  ldh_DAPAHATrans(li_TDidx, li_AHAIdx - 1)
291000191010             TO  ldh_DAPAHATrans(li_TDidx, li_AHAidx).
291100191010
291200191010           MOVE  ZEROS     TO ldh_PlacementDate(li_TDidx, li_AHAidx)
291300191010                              ldh_TransNo(li_TDidx, li_AHAidx).
291400191010
291500191010           MOVE  ln_DetailSeqNo
291600191010             TO  ldh_DetailSeqNo(li_TDidx, li_AHAidx).
291700191010
291800191010           MOVE  lc_HighestMVInv TO ldh_InvCode(li_TDidx, li_AHAidx)
291900191010           MOVE  lc_IndFundCode
292000191010             TO  ldh_IndFundCode(li_TDidx, li_AHAidx)
292100191010
292200191010           PERFORM  Common_AHA_Logic.
292300191010           PERFORM  Get_HighestMV_Fund.
292400191010
292500191010      * _________________________________
292600191010       Add_DAP_Using_HighestMV.
292700191010      * _________________________________
292800191010           ADD 1 TO  li_AHAidx.
292900191010
293000191010      *_______________________________________________________________*
293100191010      *  Carry over the last entry to the new entry
293200191010      *_______________________________________________________________*
293300191010           MOVE  ldh_DAPAHATrans(li_TDidx, li_AHAIdx - 1)
293400191010             TO  ldh_DAPAHATrans(li_TDidx, li_AHAidx).
293500191010
293600191010           MOVE  ZEROS     TO  ldh_PlacementDate (li_TDidx, li_AHAidx)
293700191010                               ldh_TransNo       (li_TDidx, li_AHAidx)
293800191010                               ldh_GrossAmt      (li_TDidx, li_AHAidx)
293900191010                               ldh_UnitAmt       (li_TDidx, li_AHAidx)
294000191010                               ldh_NetAmt        (li_TDidx, li_AHAidx)
294100191010                               ldh_DetailSeqNo   (li_TDidx, li_AHAidx)
294200191010                               ldh_ResultGross   (li_TDidx, li_AHAidx)
294300191010                               ldh_ResultNet     (li_TDidx, li_AHAidx)
294400191010                               ldh_AHAGrant      (li_TDidx, li_AHAidx)
294500191010                               ldh_AHABond       (li_TDidx, li_AHAidx)
294600191010                               Pass-CDSC-Gross
294700191010                               Pass-CDSC-Units
294800191010                               Pass-CDSC-Net.
294900191010
295000191010           MOVE lncc_N     TO  ldh_WaiveDSC      (li_TDidx, li_AHAidx)
295100191010                               ldh_WaiveERF      (li_TDidx, li_AHAidx)
295200191010                               ldh_TreatAWD      (li_TDidx, li_AHAidx)
295300191010                               Pass-Waive-DSC
295400191010                               Pass-Waive-ERF
295500191010                               Pass-Treat-AWD.
295600191010
295700191010           MOVE ln_TotAHAGrant TO ldh_TotAHAGrant(li_TDidx, li_AHAidx).
295800191010           MOVE ln_TotAHABond  TO ldh_TotAHABond (li_TDidx, li_AHAidx).
295900191010           MOVE  SPACES        TO ldh_RejectCode (li_TDidx, li_AHAidx).
296000191010           MOVE  lncc_G        TO ldh_GrossOrNet (li_TDidx, li_AHAidx).
296100191010           MOVE  lncc_SEL      TO ldh_TransType(li_TDidx, li_AHAidx)
296200191010                                  Pass-Trans-Type-Code.
296300191010
296400191010           MOVE  lc_RedemCodeDAP
296500191010             TO  ldh_RedemCode(li_TDidx, li_AHAidx)
296600191010                 Pass-Redem-Code.
296700191010
296800191010           MOVE  lncc_11         TO ldh_RedemRule(li_TDidx, li_AHAidx).
296900191010      *_______________________________________________________________*
297000191010      * Use trade date of the closure trigger for the DAP transactions
297100191010      *_______________________________________________________________*
297200191010           MOVE  ln_SaveTradeDate TO ldh_TradeDate(li_TDidx, li_AHAidx)
297300191010                                     Pass-CDSC-Trade-Date.
297400191010
297500191010R88074     MOVE  lc_SavePaymentType TO
297600191010R88074           ldh_PaymentType(li_TDidx, li_AHAidx).
297700191010
297800191010           MOVE  lc_HighestMVInv
297900191010             TO  ldh_InvCode(li_TDidx, li_AHAidx)
298000191010                 Pass-CDSC-Investment.
298100191010           MOVE  lc_IndFundCode
298200191010             TO  ldh_IndFundCode(li_TDidx, li_AHAidx).
298300191010      *_______________________________________________________________*
298400191010      *  Reedem DAP as ALL units
298500191010      *_______________________________________________________________*
298600191010           MOVE lncc_A        TO  ldh_SplitOption(li_TDidx, li_AHAidx)
298700191010                                  Pass-Split-Option.
298800191010      * RFS134243 -Start
298900191010                  INITIALIZE lc_TradeRule
299000191010                  MOVE ldh_RedemRule(li_TDidx, li_AHAidx)
299100191010                    TO lc_TradeRule
299200191010      * RFS134243 - End
299300191010           PERFORM Call_Calculator.
299400191010
299500191010           IF NOT Pass-Rejection-Code-OK
299600191010              MOVE  ZEROS           TO  ln_RejPlacementDate
299700191010                                        ln_RejTransNo
299800191010              MOVE ldh_TD(li_TDidx) TO  ln_RejTradeDate
299900191010              PERFORM Reject_DAPs_and_Restart
300000191010           END-IF.
300100191010      *RFS126482 - Start
300200191010           IF Pass-Rejection-Code-OK
300300191010              MOVE pi_WHTaxRateBasis
300400191010                   TO  ldh_WHTaxRateBasis(li_TDidx, li_AHAidx)
300500191010              MOVE pi_ActualTax
300600191010                   TO  ldh_ActualTax(li_TDidx, li_AHAidx)
300700191010              MOVE pi_ActualProvTax
300800191010                   TO  ldh_ActualProvTax(li_TDidx, li_AHAidx)
300900191010           END-IF.
301000191010      *RFS126482 - End
301100191010
301200191010           PERFORM Get_HighestMV_Fund.
301300191010
301400191010      * _________________________________
301500191010       Redeem_Grant_Bond_After.
301600191010      * _________________________________
301700191010           MOVE ZEROS             TO  Pass-CDSC-Gross
301800191010                                      Pass-CDSC-Units
301900191010                                      Pass-CDSC-Net.
302000191010           MOVE  lncc_SEL         TO  Pass-Trans-Type-Code.
302100191010           MOVE  lc_RedemCodeAHA  TO  Pass-Redem-Code.
302200191010      * RFS171801 STARTS
302300191010      *    MOVE  li_AsAtDate      TO  Pass-CDSC-Trade-Date.
302400191010           If ldd_UseDAPtd(li_LastTDidx) = "Y"
302500191010               MOVE ldh_TD(li_LastTDidx) to Pass-CDSC-Trade-Date
302600191010           ELSE
302700191010               MOVE  li_AsAtDate      TO  Pass-CDSC-Trade-Date
302800191010           END-IF
302900191010      * RFS171801 ENDS
303000191010           MOVE  lc_HighestMVInv  TO  Pass-CDSC-Investment.
303100191010           MOVE  lncc_A           TO  Pass-Split-Option.
303200191010           MOVE  lncc_N           TO  Pass-Waive-DSC
303300191010                                      Pass-Waive-ERF
303400191010                                      Pass-Treat-AWD.
303500191010
303600191010      * RFS134243 -Start
303700191010           INITIALIZE lc_TradeRule.
303800191010           MOVE lncc_13 TO lc_TradeRule .
303900191010      * RFS134243 - End
304000191010
304100191010           PERFORM Call_Calculator.
304200191010
304300191010           IF Pass-Rejection-Code-OK
304400191010              COMPUTE ln_TotalAfter = ln_TotalAfter - Pass-CDSC-Net
304500191010           ELSE
304600191010      *_______________________________________________________________*
304700191010      *  In case there is an error, set the units for that fund to 0
304800191010      *  in QTEMP/MFAACCIVP and continue with other funds.
304900191010      *_______________________________________________________________*
305000191010              PERFORM Set_Units_To_Zero
305100191010           END-IF.
305200191010
305300191010           IF ln_TotalAfter > 0
305400191010              PERFORM Get_HighestMV_Fund
305500191010           END-IF.
305600191010
305700191010      * _________________________________
305800191010       Process_DAP_AHA_Array.
305900191010      * _________________________________
306000191010              MOVE 1 TO li_DAPidx.
306100191010
306200191010              PERFORM Get_Account_MV
306300191010181302        PERFORM Drop_Create_WKRDSP
306400191010
306500191010              PERFORM VARYING li_DAPidx FROM 1 BY 1 UNTIL
306600191010                      ldh_InvCode(li_TDidx, li_DAPidx) = SPACES
306700191010
306800191010              IF ldh_RejectionOK(li_TDidx, li_DAPidx)
306900191010
307000191010                 IF ldh_AHAGroupYes(li_TDidx)
307100191010
30720019101084456 *_______________________________________________________________*
30730019101084456 * If a DAP was placed with split option %, update the transaction
30740019101084456 * to Units and adjust the batch header unit amount.
30750019101084456 *_______________________________________________________________*
30760019101084456               IF ldh_TransNo(li_TDidx, li_DAPidx) > 0  AND
30770019101084456                  ldh_DAP(li_TDidx, li_DAPidx)          AND
30780019101084456                  ldh_SplitOption(li_TDidx, li_DAPidx) =
30790019101084456                  lncc_Percent
30800019101084456                    PERFORM Update_MFATRNP_Units
30810019101084456                    PERFORM Get_AHA_Batch_Info_2
30820019101084456                    PERFORM Adjust_User_Batch_Units
30830019101084456               END-IF
308400191010
308500191010                    IF ln_CurrentHeaderNo = 0
308600191010                        PERFORM Get_Header_No
308700191010                    END-IF
308800191010
308900191010                    IF ldh_TransNo(li_TDidx, li_DAPidx) = 0
309000191010
309100191010                       IF ln_CurrentBatchNo = 0
309200191010                          PERFORM Get_Batch_No
309300191010                          PERFORM Get_Trans_No
309400191010                       END-IF
309500191010
309600191010                       PERFORM Generate_MFATRNP
309700191010                       PERFORM Generate_MFATRNREP
309800191010                    END-IF
309900191010
310000191010                    PERFORM Generate_MFATRHDRP
310100191010
310200191010      *_______________________________________________________________*
310300191010      *  Generate trans reason records for new AHA
310400191010      *_______________________________________________________________*
310500191010                    IF ldh_TransNo(li_TDidx, li_DAPidx) =  0
310600191010                       AND ldh_AHA(li_TDidx, li_DAPidx)
310700191010                          PERFORM Generate_MFATRNRRP
310800191010                    END-IF
310900191010                 END-IF
311000191010
311100191010      *_______________________________________________________________*
311200191010      *  Do not generate trans approval for closure trigger AHA  since
311300191010      *  it was created by a user. Instead, update the record. Also,
311400191010      *  update trade date of the closure record to as at date and
311500191010      *  adjust user created batch if split option was changed to $.
311600191010      *_______________________________________________________________*
311700191010                 IF ldh_TransNo(li_TDidx, li_DAPidx) >  0
311800191010                    AND ldh_AHA(li_TDidx, li_DAPidx)
311900191010                       PERFORM Update_MFATRNHDP
312000191010                       PERFORM Update_MFATRNP_2
312100191010                    IF ldh_SplitOption(li_TDidx, li_DAPidx) =
312200191010                       lncc_Dollar
312300191010                       PERFORM Get_AHA_Batch_Info_2
312400191010                       PERFORM Adjust_User_Batch_2
312500191010                    END-IF
312600191010                 ELSE
312700191010147652            IF NOT ldh_TRO (li_TDidx, li_DAPidx)
31280019101080658               IF ldh_WaiveDS5(li_TDidx, li_DAPidx) = lncc_X  OR
31290019101080658                  ldh_TransNo(li_TDidx, li_DAPidx) =  0
313000191010                       PERFORM Generate_MFATRNHDP
31310019101080658               ELSE
31320019101080658                  PERFORM Update_MFATRNHDP_DAP
313300200529      *RFS1099376-Starts *
313400200529                       IF Lb_NoAHAClosureYes
313500200529                          PERFORM Update_MFATRNP_3
313600200529                       END-IF
313700200529      *RFS1099376-Ends.
31380019101080658               END-IF
313900191010147652            END-IF
314000191010                 END-IF
314100191010      *RFS108486 Starts
314200191010                IF ldh_CDSC_Charged(li_TDidx, li_DAPidx) NOT =
314300191010                   ldh_CDSC_ToCharge(li_TDidx, li_DAPidx)      AND
314400191010147652*            ldh_AHA(li_TDidx, li_DAPidx)
314500191010147652             (ldh_AHA(li_TDidx, li_DAPidx) OR
314600191010147652              ldh_TRO(li_TDidx, li_DAPidx))
314700191010                       PERFORM Generate_WKRDSPDSC
314800191010                 END-IF
314900191010      *RFS108486 Ends
315000191010              END-IF
315100191010           END-PERFORM.
315200191010
315300191010
315400191010           IF ldh_AHAGroupYes(li_TDidx)  AND
315500191010              ldh_RejectionOK(li_TDidx, li_DAPidx - 1)
315600191010                ADD 1 TO ln_CurrentHeaderNo
315700191010                         ln_HeaderCnt
315800191010           END-IF.
315900191010      *RFS123925 - Start
316000191010           MOVE lncc_U   TO pc_Process-Mode
316100191010           MOVE lnci_0  TO      pd_Placement-Date
316200191010                                pi_Header-No
316300191010                                pi_Trans-No.
316400191010      *RFS146254 - START
316500191010      *    CALL "FXAHARED" USING pd_Placement-Date
316600191010      *                          pi_Trans-No
316700191010      *                          pc_Process-Mode
316800191010dm    *                          pi_Header-No.
316900191010      *RFS146254 - END
317000191010      *RFS123925 - End
317100191010
317200191010      *RFS181302-STARTS.
317300191010      *------------------*
317400191010       Drop_Create_WKRDSP.
317500191010      *------------------*
317600191010           EXEC SQL
317700191010             DROP TABLE QTEMP/WKRDSP
317800191010           END-EXEC.
317900191010
318000191010           EXEC SQL
318100191010             CREATE TABLE QTEMP/WKRDSP
318200191010             (PLACEMENT_DATE  DECIMAL(9,0) NOT NULL WITH DEFAULT,
318300191010              TRANS_NO        DECIMAL(9,0) NOT NULL WITH DEFAULT,
318400191010              CHARGE          DECIMAL(13,2) NOT NULL WITH DEFAULT,
318500191010              TRIGGER_INTEREST_GEN  CHAR(01) NOT NULL WITH DEFAULT " ",
318600191010              Investment_Code CHAR(05)      NOT NULL WITH DEFAULT,
318700191010              Account_no      DECIMAL(9,0) NOT NULL WITH DEFAULT,
318800191010              Detail_Seq_no   DECIMAL(3,0) NOT NULL WITH DEFAULT,
318900191010              TRHDRP_Exists   CHAR(01) NOT NULL WITH DEFAULT)
319000191010           END-EXEC.
319100191010      *RFS181302-ENDS.
319200191010
319300191010      * _________________________________
319400191010       Common_AHA_Logic.
319500191010      * _________________________________
319600191010
319700191010      *RFS1002416 starts
319800191010           INITIALIZE ln_AHAToApply.
319900191010      *RFS1002416 ends
320000191010           MOVE  ZEROS       TO  ldh_GrossAmt   (li_TDidx, li_AHAidx)
320100191010                                 ldh_UnitAmt    (li_TDidx, li_AHAidx)
320200191010                                 ldh_NetAmt     (li_TDidx, li_AHAidx)
320300191010                                 Pass-CDSC-Gross
320400191010                                 Pass-CDSC-Units
320500191010                                 Pass-CDSC-Net.
320600191010           MOVE  SPACES      TO  ldh_RejectCode (li_TDidx, li_AHAidx).
320700191010           MOVE  lncc_13     TO  ldh_RedemRule  (li_TDidx, li_AHAidx).
320800191010           MOVE  lncc_SEL    TO  ldh_TransType  (li_TDidx, li_AHAidx).
320900191010           MOVE  lncc_N      TO  ldh_GrossOrNet (li_TDidx, li_AHAidx).
321000191010143313     IF ldd_UseDAPtd(li_TDidx) = 'Y'
321100191010143313     MOVE ldh_TD (li_TDidx)
321200191010143313                       TO  ldh_TradeDate (li_TDidx, li_AHAidx)
321300191010143313     ELSE
321400191010           MOVE  li_AsAtDate TO  ldh_TradeDate  (li_TDidx, li_AHAidx)
321500191010143313     END-IF
321600191010R88074     MOVE  lncc_N      TO  ldh_PaymentType(li_TDidx, li_AHAidx).
321700191010
321800191010           MOVE  lncc_N      TO  Pass-Waive-DSC
321900191010                                 Pass-Waive-ERF
322000191010                                 Pass-Treat-AWD.
322100191010
322200191010           IF lb_ClosureTriggerTrue  AND  li_AHAidx = lnci_1
322300191010              MOVE  ldh_WaiveDSC(li_TDidx, li_AHAidx)
322400191010                TO  Pass-Waive-DSC
322500191010              MOVE  ldh_WaiveERF(li_TDidx, li_AHAidx)
322600191010                TO  Pass-Waive-ERF
322700191010              MOVE  ldh_TreatAWD(li_TDidx, li_AHAidx)
322800191010                TO  Pass-Treat-AWD
322900191010           END-IF.
323000191010
323100191010           IF lb_ClosureTriggerFalse
323200191010              MOVE  lc_RedemCodeAHA
323300191010                TO  ldh_RedemCode(li_TDidx, li_AHAidx)
323400191010           END-IF.
323500191010      *_______________________________________________________________*
323600191010      *  Set the values for the calculator
323700191010      *_______________________________________________________________*
323800191010           MOVE  ldh_InvCode(li_TDidx, li_AHAidx)
323900191010             TO  Pass-CDSC-Investment.
324000191010           MOVE  ldh_TradeDate(li_TDidx, li_AHAidx)
324100191010             TO  Pass-CDSC-Trade-Date.
324200191010           MOVE  ldh_RedemCode(li_TDidx, li_AHAidx)
324300191010             TO  Pass-Redem-Code.
324400191010           MOVE  ldh_TransType(li_TDidx, li_AHAidx)
324500191010             TO  Pass-Trans-Type-Code.
324600191010      *_______________________________________________________________*
324700191010      *  Try to redeem AHA as a NET dollar amount first
324800191010      *_______________________________________________________________*
324900191010           MOVE  ln_TotalAHA  TO  ldh_GrossAmt(li_TDidx, li_AHAidx)
325000191010                                  Pass-CDSC-Net.
325100191010           MOVE  lncc_Dollar  TO  ldh_SplitOption(li_TDidx, li_AHAidx)
325200191010                                  Pass-Split-Option.
325300191010      * RFS134243 -Start
325400191010                  INITIALIZE lc_TradeRule
325500191010                  MOVE ldh_RedemRule  (li_TDidx, li_AHAidx)
325600191010                    TO lc_TradeRule
325700191010      * RFS134243 - End
325800191010           PERFORM Call_Calculator.
325900191010           MOVE  Pass-Rejection-Code
326000191010             TO  ldh_RejectCode(li_TDidx, li_AHAidx).
326100191010      *_______________________________________________________________*
326200191010      *  If no success, try to redeem AHA as ALL units
326300191010      *_______________________________________________________________*
326400191010           IF NOT Pass-Rejection-Code-OK
326500191010              IF ldh_InsufficientBal(li_TDidx, li_AHAidx)
326600191010                 MOVE  SPACES  TO  ldh_RejectCode (li_TDidx, li_AHAidx)
326700191010                 MOVE  ZEROS   TO  ldh_NetAmt     (li_TDidx, li_AHAidx)
326800191010                                   ldh_GrossAmt   (li_TDidx, li_AHAidx)
326900191010                                   ldh_ResultGross(li_TDidx, li_AHAidx)
327000191010                                   ldh_ResultNet  (li_TDidx, li_AHAidx)
327100191010                                   Pass-CDSC-Net
327200191010                 MOVE  lncc_A  TO  ldh_SplitOption(li_TDidx, li_AHAidx)
327300191010                                   Pass-Split-Option
327400191010                 MOVE  lncc_G  TO  ldh_GrossOrNet (li_TDidx, li_AHAidx)
327500191010      * RFS134243 -Start
327600191010                  INITIALIZE lc_TradeRule
327700191010                  MOVE ldh_RedemRule  (li_TDidx, li_AHAidx)
327800191010                    TO lc_TradeRule
327900191010      * RFS134243 - End
328000191010                 PERFORM Call_Calculator
328100191010
328200191010                 IF NOT Pass-Rejection-Code-OK
328300191010                    MOVE  ldh_PlacementDate(li_TDidx, li_AHAidx)
328400191010                      TO  ln_RejPlacementDate
328500191010                    MOVE  ldh_TransNo(li_TDidx, li_AHAidx)
328600191010                      TO  ln_RejTransNo
328700191010                    MOVE  ldh_TD(li_TDidx) TO ln_RejTradeDate
328800191010                    PERFORM Reject_DAPs_and_Restart
328900191010                 END-IF
329000191010      *RFS126482 - Start
329100191010134243*          IF  Pass-Rejection-Code-OK
329200191010134243           IF  Pass-Rejection-Code-OK AND lb_TrDAP
329300191010                    MOVE pi_WHTaxRateBasis
329400191010                        TO  ldh_WHTaxRateBasis(li_TDidx, li_AHAidx)
329500191010                    MOVE pi_ActualTax
329600191010                        TO  ldh_ActualTax(li_TDidx, li_AHAidx)
329700191010                    MOVE pi_ActualProvTax
329800191010                        TO  ldh_ActualProvTax(li_TDidx, li_AHAidx)
329900191010                 END-IF
330000191010      *RFS126482 - End
330100191010              ELSE
330200191010                 MOVE  ldh_PlacementDate(li_TDidx, li_AHAidx)
330300191010                   TO  ln_RejPlacementDate
330400191010                 MOVE  ldh_TransNo(li_TDidx, li_AHAidx)
330500191010                   TO  ln_RejTransNo
330600191010                 MOVE  ldh_TD(li_TDidx)  TO  ln_RejTradeDate
330700191010                 PERFORM Reject_DAPs_and_Restart
330800191010              END-IF
330900191010           END-IF.
331000191010
331100191010      *_______________________________________________________________*
331200191010      *  If success, recalculate AHA amounts.
331300191010      *_______________________________________________________________*
331400191010           IF Pass-Rejection-Code-OK
331500191010108486        MOVE li_Calc_CDSC
331600191010108486          TO ldh_CDSC_Charged(li_TDidx, li_AHAidx)
331700191010108486             ldh_CDSC_ToCharge(li_TDidx, li_AHAidx)
331800191010      *RFS126482 - Start
331900191010              MOVE pi_WHTaxRateBasis
332000191010                TO  ldh_WHTaxRateBasis(li_TDidx, li_AHAidx)
332100191010              MOVE pi_ActualTax
332200191010                TO  ldh_ActualTax(li_TDidx, li_AHAidx)
332300191010              MOVE pi_ActualProvTax
332400191010                TO  ldh_ActualProvTax(li_TDidx, li_AHAidx)
332500191010      *RFS126482 - End
332600191010      *RFS1002416 starts
332700191010              COMPUTE ln_AHAToApply = Pass-CDSC-Net
332800191010      *RFS1002416 ends
332900191010              PERFORM Recalculate_AHA_Amounts
333000191010           END-IF.
333100191010
333200191010      * _________________________________
333300191010       Recalculate_AHA_Amounts.
333400191010      * _________________________________
333500191010           INITIALIZE ln_GrantPortion
333600191010                      ln_BondPortion.
333700191010      *RFS1002416 begins
333800191010      *     COMPUTE ln_TotalAHA = ln_TotalAHA  -  Pass-CDSC-Net.
333900191010            COMPUTE ln_TotalAHA = ln_TotalAHA  -  ln_AHAToApply.
334000191010      *     IF Pass-CDSC-Net  >=  ln_AHAGrantLeft
334100191010            IF ln_AHAToApply  >=  ln_AHAGrantLeft
334200191010      *RFS1002416 ends
334300191010              COMPUTE ln_GrantPortion = ln_AHAGrantLeft
334400191010              COMPUTE ln_BondPortion  =
334500191010      *RFS1002416 begins
334600191010      *                   (ln_AHAGrantLeft - Pass-CDSC-Net) * -1
334700191010                          (ln_AHAGrantLeft - ln_AHAToApply) * -1
334800191010      *RFS1002416 ends
334900191010              COMPUTE ln_AHAGrantLeft = 0
335000191010              COMPUTE ln_AHABondLeft  = ln_AHABondLeft - ln_BondPortion
335100191010           ELSE
335200191010      *RFS1002416 begins
335300191010      *        COMPUTE ln_GrantPortion = Pass-CDSC-Net
335400191010               COMPUTE ln_GrantPortion = ln_AHAToApply
335500191010      *RFS1002416 ends
335600191010              COMPUTE ln_BondPortion = 0
335700191010      *RFS1002416 begins
335800191010      *        COMPUTE ln_AHAGrantLeft = ln_AHAGrantLeft - Pass-CDSC-Net
335900191010               COMPUTE ln_AHAGrantLeft = ln_AHAGrantLeft - ln_AHAToApply
336000191010      *RFS1002416 ends
336100191010           END-IF.
336200191010108486     PERFORM Assign_AHA_Amounts.
336300191010
336400191010108486 Assign_AHA_Amounts.
336500191010      *_______________________________________________________________*
336600191010      *  All AHA transactions have to be placed as NET at the end
336700191010      *  even if calculator was called in ALL unit redemption mode.
336800191010      *  The exception is closure trigger where ALL unit redeption can
336900191010      *  remain as ALL as there are no DAPs that are processed before
337000191010      *  AHAs.
337100191010      *_______________________________________________________________*
337200191010           IF lb_ClosureTriggerTrue AND Pass-Split-Option = lncc_A
337300191010              CONTINUE
337400191010           ELSE
337500191010              MOVE  Pass-CDSC-Gross
337600191010                TO  ldh_ResultGross(li_TDidx, li_AHAidx)
337700191010
337800191010              MOVE  Pass-CDSC-Net
337900191010                TO  ldh_ResultNet(li_TDidx, li_AHAidx)
338000191010                    ldh_GrossAmt (li_TDidx, li_AHAidx)
338100191010                    ldh_NetAmt   (li_TDidx, li_AHAidx)
338200191010              MOVE  lncc_Dollar
338300191010                TO  ldh_SplitOption(li_TDidx, li_AHAidx)
338400191010              MOVE  lncc_N
338500191010                TO  ldh_GrossOrNet(li_TDidx, li_AHAidx)
338600191010           END-IF.
338700191010
338800191010           MOVE  ln_TotAHAGrant
338900191010             TO  ldh_TotAHAGrant(li_TDidx, li_AHAidx).
339000191010           MOVE  ln_TotAHABond
339100191010             TO  ldh_TotAHABond(li_TDidx, li_AHAidx).
339200191010      *RFS1002416 begins
339300191010      *     MOVE  ln_GrantPortion
339400191010      *       TO  ldh_AHAGrant(li_TDidx, li_AHAidx).
339500191010      *     MOVE  ln_BondPortion
339600191010      *       TO  ldh_AHABond(li_TDidx, li_AHAidx).
339700191010            ADD   ln_GrantPortion
339800191010              TO  ldh_AHAGrant(li_TDidx, li_AHAidx).
339900191010            ADD   ln_BondPortion
340000191010              TO  ldh_AHABond(li_TDidx, li_AHAidx).
340100191010      *RFS002416 ends
340200191010      * RFS 68035.29 - begins.
340300191010      * _________________________________
340400191010       Recalc_Grant_Bond_Portions.
340500191010      * _________________________________
340600191010           INITIALIZE ln_TotGrantPortion
340700191010                      ln_TermAdjustGrant
340800191010                      ln_TermAdjustBond.
340900191010      *_______________________________________________________________*
341000191010      *  Definition of: (ln_TotAHAGrant + ln_TotAHABond - ln_TotalAHA)
341100191010      *    - It is a total Net AHA that was repaid.
341200191010      *    - ln_TotalAHA in this case is a left over AHA that was not
341300191010      *      repaid because there were no more assets left in an acct.
341400191010      *_______________________________________________________________*
341500191010           COMPUTE ln_TotGrantPortion ROUNDED =   ln_TotAHAGrant *
341600191010                  (ln_TotAHAGrant + ln_TotAHABond - ln_TotalAHA) /
341700191010                  (ln_TotAHAGrant + ln_TotAHABond).
341800191010
341900191010           PERFORM VARYING li_AHAidx FROM 1 BY 1 UNTIL
342000191010                      ldh_InvCode(li_TDidx, li_AHAidx) = SPACES
342100191010                   OR lb_GroupOKFalse
342200191010
342300191010             IF ln_TotGrantPortion >= ldh_AHAGrant(li_TDidx, li_AHAidx)
342400191010                COMPUTE ln_TotGrantPortion = ln_TotGrantPortion  -
342500191010                        ldh_AHAGrant(li_TDidx, li_AHAidx)
342600191010
342700191010             ELSE
342800191010                IF ln_TotGrantPortion = 0
342900191010                   COMPUTE ldh_AHABond  (li_TDidx, li_AHAidx) =
343000191010                           ldh_AHAGrant (li_TDidx, li_AHAidx) +
343100191010                           ldh_AHABond  (li_TDidx, li_AHAidx)
343200191010                ELSE
343300191010                   COMPUTE ldh_AHABond(li_TDidx, li_AHAidx) =
343400191010                           ldh_AHABond(li_TDidx, li_AHAidx) +
343500191010                           ldh_AHAGrant(li_TDidx, li_AHAidx) -
343600191010                           ln_TotGrantPortion
343700191010                END-IF
343800191010
343900191010                COMPUTE ldh_AHAGrant(li_TDidx, li_AHAidx) =
344000191010                                      ln_TotGrantPortion
344100191010                COMPUTE ln_TotGrantPortion = 0
344200191010             END-IF
344300191010
344400191010      * RFS 68035.37 - begins.
344500191010           COMPUTE ln_TermAdjustGrant  =  ln_TermAdjustGrant +
344600191010                   ldh_AHAGrant (li_TDidx, li_AHAidx)
344700191010
344800191010           COMPUTE ln_TermAdjustBond   =  ln_TermAdjustBond  +
344900191010                   ldh_AHABond  (li_TDidx, li_AHAidx)
345000191010      * RFS 68035.37 - ends.
345100191010
345200191010           END-PERFORM.
345300191010      * RFS 68035.29 - ends.
345400191010
345500191010      * RFS 68035.37 - begins.
345600191010      *_______________________________________________________________*
345700191010      *  Calculate Termination Adjustment. Total_Grant and Total_Bond
345800191010      *  fields in MFATRNHDP will be used to store this information.
345900191010      *_______________________________________________________________*
346000191010           COMPUTE ln_TermAdjustGrant  =
346100191010                              ln_TotAHAGrant - ln_TermAdjustGrant.
346200191010
346300191010           COMPUTE ln_TermAdjustBond   =
346400191010                              ln_TotAHABond - ln_TermAdjustBond.
346500191010      * RFS 68035.37 - ends.
346600191010
346700191010      * _________________________________
346800191010       Mark_Processed_DAP.
346900191010      * _________________________________
347000191010
347100191010           PERFORM VARYING li_Idx  FROM 1 BY 1 UNTIL
347200191010                   li_Idx  > li_LastTRNidx
347300191010
347400191010              IF ltr_PlacementDate(li_Idx) =
347500191010                 ldh_PlacementDate(li_TDidx, li_DAPidx)  AND
347600191010                 ltr_TransNo(li_Idx) =
347700191010                 ldh_TransNo(li_TDidx, li_DAPidx)
347800191010                    MOVE  lncc_Y  TO  ltr_ProcessedDAP(li_Idx)
347900191010                    MOVE Pass-CDSC-Gross     TO ltr_ResultGross(li_Idx)
348000191010                    MOVE Pass-CDSC-Net       TO ltr_ResultNet(li_Idx)
348100191010              END-IF
348200191010
348300191010           END-PERFORM.
348400191010
348500191010      * _________________________________
348600191010       Reject_DAPs_and_Restart.
348700191010      * _________________________________
348800191010           INITIALIZE ln_SaveTradeDate
348900191010                      ln_SaveTradeYear
349000191010                      ln_TradeDate
349100191010                      ln_LastTradeDate
349200191010                      ln_TotalAHA
349300191010                      ln_TotAHAGrant
349400191010                      ln_TotAHABond
349500191010                      ln_AHAGrantLeft
349600191010                      ln_AHABondLeft
349700191010                      ln_TotalAfter
349800191010                      ln_GrantAfter
349900191010                      ln_BondAfter.
350000191010
350100191010           SET lb_GroupOKFalse TO TRUE.
350200191010
350300191010           PERFORM  VARYING li_Idx FROM 1 BY 1
350400191010                    UNTIL li_Idx  > li_LastTRNidx
350500191010
350600191010      *_______________________________________________________________*
350700191010      *  Rejection Code logic for AHA closure:
350800191010      *    1. If closure trigger rejects - keep the original rejection
350900191010      *    2. If new AHA rejects - reject with DS6
351000191010      *_______________________________________________________________*
351100191010             IF lb_ClosureTriggerTrue  AND ltr_RejectionOK(li_Idx)
351200191010
351300191010                IF ltr_TradeDate(li_Idx) = ln_RejTradeDate
351400191010
351500191010                   IF ltr_PlacementDate(li_Idx) = ln_RejPlacementDate
351600191010                        AND ltr_TransNo(li_Idx) = ln_RejTransNo
351700191010                     MOVE Pass-Rejection-Code TO ltr_RejectCode(li_Idx)
351800191010                   ELSE
351900191010                     MOVE lncc_DS6    TO ltr_RejectCode(li_Idx)
352000191010                   END-IF
352100191010
352200191010                END-IF
352300191010             END-IF
352400191010
352500191010      *_______________________________________________________________*
352600191010      *  Rejection Code logic for non AHA closure:
352700191010      *    1. If DAP/LDAP rejects - keep the original rejection and
35280019101080658 *                  but do not reject others in the group with DS6
35290019101080658 *                  Instead, restart, reload the ldh array without
35300019101080658 *                  the rejected one and try to process other DAPs
353100191010      *    2. If new AHA  rejects :
353200191010      *       a) when placed as net and not insufficient balance:
353300191010      *           - then reject the group with DS6
353400191010      *       b) when placed as ALL units and any error returns:
353500191010      *           - then reject the group with DS6
353600191010      *       c) when all OK, but total AHA is still > 0:
353700191010      *           - then reject the group with DS4
353800191010      *_______________________________________________________________*
353900191010             IF ltr_DAP(li_Idx) AND ltr_RejectionOK(li_Idx)
354000191010
35410019101080658           MOVE lncc_N  TO  ltr_ProcessedDAP(li_Idx)
354200191010
354300191010                IF ltr_TradeDate(li_Idx) = ln_RejTradeDate
354400191010
354500191010                   IF ltr_PlacementDate(li_Idx) = ln_RejPlacementDate
354600191010                        AND ltr_TransNo(li_Idx) = ln_RejTransNo
354700191010                     MOVE Pass-Rejection-Code TO ltr_RejectCode(li_Idx)
35480019101080658                MOVE lncc_Y            TO ltr_ProcessedDAP(li_Idx)
354900191010                   ELSE
355000191010                      IF ln_RejTransNo > lnci_0
35510019101080658 *                  MOVE lncc_DS6    TO  ltr_RejectCode(li_Idx)
35520019101080658                    CONTINUE
355300191010                      ELSE
355400191010                         IF Pass-Rejection-Code = lncc_DS4
355500191010                            MOVE lncc_DS4 TO ltr_RejectCode(li_Idx)
355600191010                         ELSE
355700191010                            MOVE lncc_DS6 TO ltr_RejectCode(li_Idx)
355800191010                         END-IF
35590019101080658                    MOVE lncc_Y      TO ltr_ProcessedDAP(li_Idx)
356000191010                      END-IF
356100191010                   END-IF
356200191010
35630019101080658 *            MOVE lncc_Y              TO ltr_ProcessedDAP(li_Idx)
35640019101080658 *         ELSE
356500191010      *_______________________________________________________________*
356600191010      *  Set DAP processed flag back to N for other non-rejected  DAP
356700191010      *  groups before the restart.
356800191010      *_______________________________________________________________*
35690019101080658 *            MOVE lncc_N              TO ltr_ProcessedDAP(li_Idx)
357000191010                END-IF
357100191010             END-IF
357200191010           END-PERFORM.
357300191010
357400191010           INITIALIZE ln_RejPlacementDate
357500191010                      ln_RejTransNo
357600191010                      ln_RejTradeDate.
357700191010
357800191010      *_______________________________________________________________*
35790019101080658 * Set li_TRNidx to ZERO to restart and reprocess account's
35800019101080658 * transactions.
358100191010      *_______________________________________________________________*
358200191010           MOVE lnci_0 TO li_TRNidx.
358300191010
35840019101080658 *    MOVE lsv_DAPAHATransArray  TO  ldh_DAPAHATransArray.
358500191010
358600191010           MOVE ln_SaveAccountNo  TO  Pass-CDSC-Account.
358700191010           MOVE SPACE TO lc_ReturnCode.
358800191010125258     MOVE ZEROS TO ld_TradeDate.
358900191010           CALL   "SETCALENV2" USING lncc_CleanMode,
359000191010125258                               ld_TradeDate,
359100191010                                     lc_ReturnCode.
359200191010           CANCEL "SETCALENV2".
359300191010
359400191010      * RFS 80658 - begins.
359500191010      * _________________________________
359600191010       Reload_DAP_AHA_Array.
359700191010      * _________________________________
359800191010
359900191010           IF ltr_DAP(li_Idx)  AND  ltr_RejectionOK(li_Idx)
360000191010      *_______________________________________________________________*
360100191010      * Load DAP array for each trade date
360200191010      *_______________________________________________________________*
360300191010              IF ltr_TradeDate(li_Idx) NOT = ln_SaveTradeDate
360400191010
360500191010                 ADD 1  TO li_TDidx
360600191010                 MOVE ltr_TradeDate(li_Idx)  TO  ln_SaveTradeDate
360700191010                                                 ldh_TD(li_TDidx)
360800191010                 MOVE lncc_N        TO  ldh_AHAGroup(li_TDidx)
360900191010                 MOVE 0 TO li_DAPidx
361000191010              END-IF
361100191010
361200191010              ADD 1 TO li_DAPidx
361300191010              MOVE ltr_AccountTrans(li_Idx)
361400191010                TO ldh_DAPAHATrans (li_TDidx, li_DAPidx)
361500191010
361600191010           END-IF.
361700191010      * RFS 80658 - ends.
361800191010
361900191010      * _________________________________
362000191010       Process_Rejection_Codes.
362100191010      * _________________________________
362200191010
362300191010           IF NOT ltr_RejectionOK(li_TRNidx)
362400191010              PERFORM Update_Rejection_Code_MFATRNP
36250019101084456      END-IF.
362600191010
36270019101084456      PERFORM  VARYING li_TDidx FROM 1 BY 1
362800191010                       UNTIL li_TDidx  > li_LastTDidx
362900191010
363000191010                IF ltr_TradeDate(li_TRNidx) = ldh_TD(li_TDidx)
363100191010
363200191010                   PERFORM VARYING li_DAPidx FROM 1 BY 1 UNTIL
363300191010                           ldh_TransNo(li_TDidx, li_DAPidx) = lnci_0
363400191010
363500191010                     IF ltr_PlacementDate(li_TRNidx) =
363600191010                        ldh_PlacementDate(li_TDidx, li_DAPidx) AND
363700191010                        ltr_TransNo(li_TRNidx) =
363800191010                        ldh_TransNo(li_TDidx, li_DAPidx)
363900191010
36400019101084456                   IF NOT ltr_RejectionOK(li_TRNidx)
364100191010                          MOVE ltr_RejectCode(li_TRNidx)
364200191010                            TO ldh_RejectCode(li_TDidx, li_DAPidx)
36430019101084456                   END-IF
364400191010
36450019101084456                   IF ltr_RejectionOK(li_TRNidx)  AND
36460019101084456                      ldh_AHAGroupNo(li_TDidx)
36470019101084456                     MOVE ltr_TotalCapital(li_TRNidx)
36480019101084456                       TO ldh_TotalCapital(li_TDidx, li_DAPidx)
364900191010      *RFS91272 - START
365000191010                          MOVE ltr_TotalRollover(li_TRNidx)
365100191010                            TO ldh_TotalRollover(li_TDidx, li_DAPidx)
365200191010      *RFS91272 - END
36530019101084456                     MOVE ltr_TotalGrant  (li_TRNidx)
36540019101084456                       TO ldh_TotalGrant  (li_TDidx, li_DAPidx)
36550019101084456                     MOVE ltr_TotalBond   (li_TRNidx)
36560019101084456                       TO ldh_TotalBond   (li_TDidx, li_DAPidx)
365700191010147652                   MOVE ltr_CDSC_Charged (li_TRNidx)
365800191010147652                     TO ldh_CDSC_Charged (li_TDidx, li_DAPidx)
365900191010147652                   MOVE ltr_CDSC_ToCharge (li_TRNidx)
366000191010147652                     TO ldh_CDSC_ToCharge (li_TDidx, li_DAPidx)
366100191010      *RFS 126482 - QC 34515 - Begins
366200191010                         MOVE ltr_WHTaxRateBasis(li_TRNidx)
366300191010                           TO ldh_WHTaxRateBasis (li_TDidx, li_DAPidx)
366400191010                         MOVE ltr_ActualTax(li_TRNidx)
366500191010                           TO ldh_ActualTax      (li_TDidx, li_DAPidx)
366600191010                         MOVE ltr_ActualProvTax(li_TRNidx)
366700191010                           TO ldh_ActualProvTax  (li_TDidx, li_DAPidx)
366800191010      *RFS 126482 - QC 34515 - Ends
366900191010      *                  RFS130936 - DM - Move AHA for SDSP - Begins
367000191010                         IF pb_RDSPCHKSDSPYes
367100191010                            MOVE ltr_TotAHAGrant(li_TRNidx)
367200191010                              TO ldh_TotAHAGrant(li_TDidx, li_DAPidx)
367300191010                            MOVE ltr_TotAHABond(li_TRNidx)
367400191010                              TO ldh_TotAHABond(li_TDidx, li_DAPidx)
367500191010                         END-IF
367600191010      *                  RFS130936 - Ends
36770019101084456                   END-IF
367800191010
367900191010                     END-IF
368000191010
368100191010                   END-PERFORM
368200191010                END-IF
36830019101084456      END-PERFORM.
36840019101084456 *    END-IF.
368500191010
368600191010      * _________________________________
368700191010       Find_and_Reject_Group.
368800191010      * _________________________________
368900191010           INITIALIZE ln_RejPlacementDate
369000191010                      ln_RejTransNo.
369100191010
369200191010           PERFORM  VARYING li_TDidx FROM 1 BY 1
369300191010                    UNTIL li_TDidx  > li_LastTDidx
369400191010
369500191010             IF ltr_TradeDate(li_TRNidx) = ldh_TD(li_TDidx) AND
369600191010                ldh_AHAGroupYes(li_TDidx)
369700191010
369800191010      *_______________________________________________________________*
369900191010      * Cleanup DAP/AHA array.
370000191010      *_______________________________________________________________*
370100191010                PERFORM VARYING li_DAPidx FROM 1 BY 1 UNTIL
370200191010                        ldh_InvCode(li_TDidx, li_DAPidx) = SPACES
370300191010
370400191010                  IF ltr_PlacementDate(li_TRNidx) =
370500191010                     ldh_PlacementDate(li_TDidx, li_DAPidx) AND
370600191010                     ltr_TransNo(li_TRNidx) =
370700191010                     ldh_TransNo(li_TDidx, li_DAPidx)
370800191010                     CONTINUE
370900191010                  ELSE
371000191010                     IF ldh_TransNo(li_TDidx, li_DAPidx) > 0
371100191010                        IF ldh_RejectionOK(li_TDidx, li_DAPidx)
371200191010
371300191010                           COMPUTE ln_TotalAfter =  ln_TotalAfter -
371400191010                                   ldh_ResultNet(li_TDidx, li_DAPidx)
371500191010      * RFS 98866 - Start
371600191010                           IF ltr_RejectCode(li_TRNIDX) = Lncc_DSD
371700191010                             MOVE Lncc_DSD
371800191010                               TO
371900191010                                ldh_RejectCode(li_TDidx, li_DAPidx)
372000191010                           ELSE
372100191010      * RFS 98866 - End
372200191010004568*                    MOVE lncc_DS4
372300191010004568                     MOVE lc_RejectionCode
372400191010                             TO ldh_RejectCode(li_TDidx, li_DAPidx)
37250019101098866                      END-IF
372600191010
372700191010                           MOVE ldh_PlacementDate(li_TDidx, li_DAPidx)
372800191010                             TO ln_RejPlacementDate
372900191010                           MOVE ldh_TransNo(li_TDidx, li_DAPidx)
373000191010                             TO ln_RejTransNo
373100191010
373200191010                           PERFORM Find_It_in_Trans_Array
373300191010                        END-IF
373400191010                     ELSE
373500191010                        INITIALIZE ldh_DAPAHATrans(li_TDidx, li_DAPidx)
373600191010                     END-IF
373700191010                  END-IF
373800191010                END-PERFORM
373900191010             END-IF
374000191010           END-PERFORM.
374100191010
374200191010      * _________________________________
374300191010       Find_It_in_Trans_Array.
374400191010      * _________________________________
374500191010
374600191010           PERFORM VARYING li_Idx  FROM 1 BY 1 UNTIL
374700191010                   li_Idx  > li_LastTRNidx
374800191010
374900191010              IF ltr_PlacementDate(li_Idx) =  ln_RejPlacementDate  AND
375000191010                 ltr_TransNo(li_Idx)       =  ln_RejTransNo
375100191010      * RFS 98866 - Start
375200191010                IF ldh_RejectCode(li_TDidx, li_DAPidx) = Lncc_DSD
375300191010                  MOVE Lncc_DSD
375400191010                    TO
375500191010                     ltr_RejectCode(li_Idx)
375600191010                ELSE
375700191010      * RFS 98866 - End
375800191010004568*             MOVE  lncc_DS4 TO  ltr_RejectCode(li_Idx)
375900191010004568              MOVE  lc_RejectionCode TO  ltr_RejectCode(li_Idx)
376000191010      *RFS181301 Begins
376100191010004568*              PERFORM Find_And_Reject_Group VARYING Li_TDidx
376200191010004568*              FROM 1 BY 1 UNTIL li_TDidx > li_LastTDidx
376300191010      *RFS181301 Ends
37640019101098866           END-IF
376500191010              END-IF
376600191010
376700191010           END-PERFORM.
376800191010
376900191010      * _________________________________
377000191010       Call_Calculator.
377100191010      * _________________________________
377200191010           INITIALIZE li_CalcAsAtDate.
377300191010108486     INITIALIZE li_Calc_CDSC.
377400191010           MOVE ln_SaveAccountNo  TO  Pass-CDSC-Account.
377500191010           MOVE lncc_Y            TO  Pass-CDSC-Calculator.
377600191010           INITIALIZE Pass-Assignment-Certificate
377700191010                      Pass-Seqno.
377800191010           SET Pass-Rejection-Code-OK TO TRUE.
377900191010
378000191010           DISPLAY Ws-Local-Data-Area UPON Ws-Local.
378100191010           MOVE  li_AsAtDate  TO  li_CalcAsAtDate.
378200191010
378300191010      * RFS 98866 - Start
378400191010           PERFORM Set_RDSDATA.
378500191010           DISPLAY pc_WKRDSPData UPON WS-DTAARA-WKRDSPDATA
378600191010                                       FOR "WKRDSPDATA".
378700191010      * RFS 98866 - End
378800191010           CALL   "TRNPST" USING li_CalcAsAtDate.
37890019101098866      ACCEPT  pc_WKRDSPData FROM WS-DTAARA-WKRDSPDATA
37900019101098866                                  FOR "WKRDSPDATA".
379100191010           CANCEL "TRNPST".
379200191010
379300191010           ACCEPT Ws-Local-Data-Area FROM Ws-Local.
379400191010      *RFS1001480 -Starts.
379500191010      *RFS181302-Starts.
379600191010      *comment out the below for 181302.
379700191010      *    IF Pass-Rejection-Code-OK AND
379800191010      *       lb_ProcessedClosureTrue
379900191010      *       PERFORM Check_For_Accrued
380000191010      *    END-IF.
380100191010      *RFS181302-Ends.
380200191010      *RFS1001480 Ends.
380300191010      *RFS126482 -Start
380400191010134243*    IF Pass-Rejection-Code-OK
380500191010134243     IF Pass-Rejection-Code-OK AND lb_TrDAP
380600191010      *RFS143702 - START
380700191010           IF PASS-CDSC-GROSS NOT = PASS-CDSC-NET
380800191010              COMPUTE li_GrossNetGap = PASS-CDSC-GROSS -
380900191010                      PASS-CDSC-NET
381000191010158078     IF lb_PlacedAsNetTrue
381100191010              PERFORM AdjustAHA
381200191010158078     END-IF
381300191010      *RFS143702 - END
381400191010      *RFS126482 - QC 34510 - Start
381500191010      *       COMPUTE pi_YTDDAPLDAPTaxable = pi_RDSPGross -
381600191010      *               pi_NonTaxableAmount
381700191010              COMPUTE li_YTDDAPLDAPTaxable =
381800191010                      li_YTDDAPLDAPTaxable + pi_RDSPGross -
381900191010                      pi_NonTaxableAmount
382000191010      *RFS126482 - QC 34510 - Ends
382100191010           END-IF
382200191010      *RFS126482 -End
382300191010143702     END-IF
382400191010
382500191010      *RFS134243 - Start
382600191010           IF lb_ProcessedClosureTrue AND lb_TrDAP
382700191010      *RFS 133572 - Begins.
382800191010             COMPUTE li_TotalClosureDAPGross =
382900191010                     li_TotalClosureDAPGross + pi_RDSPGross
383000191010      *RFS 133572 - Ends.
383100191010             COMPUTE li_TotalClosureDAPTaxable =
383200191010                     li_TotalClosureDAPTaxable + pi_RDSPGross -
383300191010                     pi_NonTaxableAmount
383400191010           END-IF.
383500191010      *RFS134243 - End
383600191010
383700191010      *RFS181302- Starts.
383800191010           IF lb_ProcessedClosureTrue AND lb_TrAHA
383900191010              COMPUTE li_TotalClosureAHAGross =
384000191010                      li_TotalClosureAHAGross + pi_RDSPGross
384100191010           END-IF.
384200191010      *RFS181302- Ends.
384300191010
384400191010      *  RFS108486 Starts
384500191010           SET DEDUCT-IDX TO 1
384600191010           SEARCH PASS-DEDUCTIONS VARYING DEDUCT-IDX
384700191010           WHEN PASS-DEDUCT-CODE(DEDUCT-IDX) = lncc_CDSC
384800191010                MOVE PASS-DEDUCT-AMT(DEDUCT-IDX) to Li_Calc_CDSC
384900191010           END-SEARCH.
385000191010           ADD Li_Calc_CDSC TO li_CDSC_Charged.
385100191010147652     IF lb_TrTRO AND Pass-Rejection-Code-OK
385200191010147652        PERFORM Get_Accrual
385300191010147652        COMPUTE li_TotalTransferNet = li_TotalTransferNet +
385400191010147652                PASS-CDSC-NET + ln_InvestmentAccrual
385500191010147652        ADD li_Calc_CDSC to li_TotalTransferCDSC
385600191010147652*       The assumption is that no TRO's are auto generated (and exist in L
385700191010147652        MOVE li_Calc_CDSC
385800191010147652          TO ltr_CDSC_Charged(li_TRNidx)
385900191010147652             ltr_CDSC_ToCharge(li_TRNidx)
386000191010147652     END-IF.
386100191010      *  RFS108486 End
386200191010      *RFS1001480 - STARTS.
386300191010      *RFS181302-Starts .
386400191010      *--------------------*
386500191010      *Check_For_Accrued.
386600191010      *--------------------*
386700191010      *    Initialize li_AccruedInterest.
386800191010      *    MOVE Pass-CDSC-Investment TO lc_Pass-CDSC-Investment.
386900191010
387000191010      *    Set Lb_AllUnitRedemNo to TRUE
387100191010      *    EXEC SQL
387200191010      *      SELECT COALESCE(ACCRUAL_AMT, 0)
387300191010      *        INTO : li_AccruedInterest
387400191010      *        FROM  MFAACCIAP
387500191010      *       WHERE Account_no = :ln_SaveAccountNo
387600191010      *        AND  Investment_Code = :lc_Pass-CDSC-Investment
387700191010      *    END-EXEC.
387800191010
387900191010       Apply_Accrual.
388000191010      *--------------------*
388100191010           EXEC SQL
388200191010             UPDATE QTEMP/MFAACCIVP A
388300191010                SET a.Curr_Unit_Bal =
388400191010                    a.Curr_Unit_Bal + IFNULL(
388500191010                (SELECT ZONED(
388600191010                (b.Accrual_amt / d.fixed_price) + .0005,13,3)
388700191010               FROM MFAACCIAP B
388800191010               INNER JOIN MFAINVP C ON
388900191010               B.investment_code = C.investment_code
389000191010               INNER JOIN MFAINVGRP D ON
389100191010               C.investment_group_code =
389200191010               D.investment_group_code
389300191010             WHERE A.account_no = B.account_no
389400191010               AND A.investment_code = B.Investment_code),0)
389500191010             WHERE EXISTS
389600191010              (SELECT 1
389700191010                 FROM MFAACCIAP Q
389800191010               WHERE A.Account_no = Q.Account_no
389900191010               AND A.Investment_code = Q.Investment_code)
390000191010           END-EXEC.
390100191010
390200191010           MOVE SQLSTATE TO lc_sqlStates.
390300191010           EVALUATE TRUE
390400191010             WHEN lncc_sqlSuccessful
390500191010      *        IF  Pass-Split-Option = lncc_A
390600191010      *           SET lb_AllUnitRedemYES  TO TRUE
390700191010      *        ELSE
390800191010      *           Move Pass-CDSC-Investment TO lc_InvCode
390900191010      *           PERFORM Check_Unit_Bal
391000191010      *           IF ln_UnitBal = 0
391100191010      *              SET lb_AllUnitRedemYes TO TRUE
391200191010      *           END-IF
391300191010      *        END-IF
391400191010      *        IF lb_AllUnitRedemYes AND li_AccruedInterest > 0
391500191010      *           ADD Li_AccruedInterest TO PASS-CDSC-GROSS
391600191010      *           ADD Li_AccruedInterest TO PASS-CDSC-NET
391700191010      *           ADD Li_AccruedInterest TO pi_RDSPTotMV
391800191010      *           ADD Li_AccruedInterest TO ln_AccountMV
391900191010      *        END-IF
392000191010               CONTINUE
392100191010             WHEN lncc_sqlEnd
392200191010               CONTINUE
392300191010             WHEN OTHER
392400191010               SET lncc_Err_97  TO TRUE
392500191010               MOVE lncc_ErrGettingAccrued  TO lc_sqlErrShortDESCR
392600191010               PERFORM SQL_Fail_Process
392700191010           END-EVALUATE.
392800191010      *RFS181302-ENDS.
392900191010      *RFS1001480 - ENDS.
393000191010      * RFS143702 - START
393100191010      * _________________________________
393200191010       AdjustAHA.
393300191010      * _________________________________
393400191010           IF  ln_SaveTradeDate  > Lnci_LegChg20140101
393500191010               COMPUTE ln_NewAHA =  li_AHAFactor * li_GrossNetGap
393600191010               COMPUTE ln_TotalAHA = ln_TotalAHA + ln_NewAHA
393700191010               IF ln_TotalAHA > li_OrigMaxAHA
393800191010                  COMPUTE ln_TotalAHA = li_OrigMaxAHA
393900191010dm             END-IF
394000191010               SUBTRACT ln_NewAHA FROM ln_TotalAfter
394100191010               IF ln_TotalAfter < 0
394200191010dm    *           INITIALIZE ln_TotalAfter.
394300191010dm                INITIALIZE ln_TotalAfter
394400191010dm             END-IF
394500191010dm         END-IF.
394600191010      * RFS143702 - END
394700191010      * _________________________________
394800191010       Check_If_All_Rejected.
394900191010      * _________________________________
395000191010           SET lb_AllRejectedFalse TO TRUE.
39510019101084456 *    INITIALIZE  ln_MaxSeqNo.
39520019101084456      INITIALIZE  ln_HeaderCnt.
395300191010
395400191010           EXEC SQL
39550019101084456        SELECT COALESCE(COUNT(*),0)
395600191010
39570019101084456          INTO :ln_HeaderCnt
395800191010
395900191010               FROM MFATRHDRP A
396000191010
396100191010              WHERE A.Header_No      = :ln_HeaderNo
396200191010                AND A.Header_Type    = :lncc_AHA
396300191010           END-EXEC.
396400191010
396500191010           MOVE SQLSTATE TO lc_sqlStates.
396600191010           EVALUATE TRUE
396700191010             WHEN lncc_sqlSuccessful
39680019101084456          IF ln_RejectedCnt = ln_HeaderCnt
396900191010                  SET lb_AllRejectedTrue  TO TRUE
397000191010               END-IF
397100191010             WHEN lncc_sqlEnd
397200191010               CONTINUE
397300191010             WHEN OTHER
397400191010               SET lncc_Err_15 TO TRUE
397500191010               MOVE lncc_ErrGettingHeaderInfo  TO lc_sqlErrShortDESCR
397600191010               PERFORM SQL_Fail_Process
397700191010           END-EVALUATE.
397800191010
397900191010      * _________________________________
398000191010       Check_Partially_Proc_Groups.
398100191010      * _________________________________
398200191010           SET lb_PartiallyProcessedFalse TO TRUE.
398300191010
398400191010           EXEC SQL
398500191010             SELECT :lncc_X
398600191010               INTO :lc_X
39870019101084456          FROM MFATRHDRP A
39880019101084456
39890019101084456          INNER JOIN MFATRNP B
39900019101084456             ON A.Placement_Date = B.Placement_Date
39910019101084456            AND A.Trans_No       = B.Trans_No
399200191010
399300191010              WHERE A.Header_Type    = :lncc_AHA
399400191010                AND B.Account_No     = :ln_SaveAccountNo
399500191010                AND B.Trans_Status_Code IN
399600191010                    (:lncc_PND, :lncc_UNC, :lncc_VER)
399700191010              FETCH FIRST ROW ONLY
399800191010           END-EXEC.
399900191010
400000191010           MOVE SQLSTATE TO lc_sqlStates.
400100191010           EVALUATE TRUE
400200191010             WHEN lncc_sqlSuccessful
400300191010               SET lb_PartiallyProcessedTrue  TO TRUE
400400191010             WHEN lncc_sqlEnd
400500191010               CONTINUE
400600191010             WHEN OTHER
400700191010               SET lncc_Err_62 TO TRUE
400800191010               MOVE lncc_ErrGettingHeaderInfo  TO lc_sqlErrShortDESCR
400900191010               PERFORM SQL_Fail_Process
401000191010           END-EVALUATE.
401100191010
401200191010      * _________________________________
401300191010       Check_for_Closure.
401400191010      * _________________________________
401500191010           SET lb_ClosureExistsFalse TO TRUE.
401600191010           INITIALIZE  ln_PlacementDate
401700191010                       ln_TransNo
401800191010                       ln_BatchDate
401900191010                       lc_BatchCode
402000191010                       lc_SplitOption
402100191010                       ln_NetAmt.
402200191010
402300191010           EXEC SQL
402400191010             SELECT A.Placement_Date,
402500191010                    A.Trans_No,
402600191010                    A.Batch_Date,
402700191010                    A.Batch_Code,
402800191010                    A.Split_Option_Code,
402900191010                    A.Net_Amt
403000191010
403100191010               INTO :ln_PlacementDate,
403200191010                    :ln_TransNo,
403300191010                    :ln_BatchDate,
403400191010                    :lc_BatchCode,
403500191010                    :lc_SplitOption,
403600191010                    :ln_NetAmt
403700191010
40380019101084456          FROM MFATRNP   A
40390019101084456
40400019101084456          INNER JOIN MFATRHDRP B
40410019101084456             ON A.Placement_Date = B.Placement_Date
40420019101084456            AND A.Trans_No       = B.Trans_No
40430019101084456
40440019101084456          INNER JOIN MFATRNRRP C
40450019101084456             ON A.Placement_Date = C.Placement_Date
40460019101084456            AND A.Trans_No       = C.Trans_No
40470019101084456
40480019101084456          INNER JOIN MFAHRRCDP D
40490019101084456             ON C.Repayment_Reason_Code = D.HRDC_Reason_Code
405000191010
405100191010              WHERE B.Header_No      = :ln_HeaderNo
405200191010                AND B.Header_Type    = :lncc_AHA
405300191010                AND B.Detail_Seq_No  = :lnci_1
405400191010                AND D.Reason_Type    = :lncc_CloseRep
405500191010           END-EXEC.
405600191010
405700191010           MOVE SQLSTATE TO lc_sqlStates.
405800191010           EVALUATE TRUE
405900191010             WHEN lncc_sqlSuccessful
406000191010               SET lb_ClosureExistsTrue  TO TRUE
406100191010             WHEN lncc_sqlEnd
406200191010               CONTINUE
406300191010             WHEN OTHER
406400191010               SET lncc_Err_16 TO TRUE
406500191010               MOVE lncc_ErrGettingClosureInfo  TO lc_sqlErrShortDESCR
406600191010               PERFORM SQL_Fail_Process
406700191010           END-EVALUATE.
406800191010
406900191010      * _________________________________
407000191010       Adjust_User_Batch.
407100191010      * _________________________________
407200191010           EXEC SQL
407300191010             UPDATE MFABCHHDP A
407400191010                SET A.Trans_Dollar_Amt =
407500191010                    A.Trans_Dollar_Amt + : ln_NetAmt
407600191010
407700191010              WHERE A.Batch_Date     = :ln_BatchDate
407800191010                AND A.Batch_Code     = :lc_BatchCode
407900191010           END-EXEC.
408000191010
408100191010           MOVE SQLSTATE TO lc_sqlStates.
408200191010           IF NOT lncc_sqlSuccessful
408300191010               SET lncc_Err_17 TO TRUE
408400191010               MOVE lncc_ErrUpdatingMFABCHHDP TO lc_sqlErrShortDESCR
408500191010               PERFORM SQL_Fail_Process
408600191010           END-IF.
408700191010
408800191010      * _________________________________
408900191010       Adjust_User_Batch_2.
409000191010      * _________________________________
409100191010           INITIALIZE ln_PlacementDate
409200191010                      ln_TransNo
409300191010                      ln_NetAmt.
409400191010
409500191010           MOVE  ldh_PlacementDate(li_TDidx, li_DAPidx)
409600191010             TO  ln_PlacementDate.
409700191010           MOVE  ldh_TransNo(li_TDidx, li_DAPidx)
409800191010             TO  ln_TransNo.
409900191010           MOVE  ldh_NetAmt(li_TDidx, li_DAPidx) TO ln_NetAmt.
410000191010
410100191010           EXEC SQL
410200191010             UPDATE MFABCHHDP A
410300191010                SET A.Trans_Dollar_Amt =
410400191010                    A.Trans_Dollar_Amt - : ln_NetAmt
410500191010
410600191010              WHERE A.Batch_Date     = :ln_BatchDate
410700191010                AND A.Batch_Code     = :lc_BatchCode
410800191010           END-EXEC.
410900191010
411000191010           MOVE SQLSTATE TO lc_sqlStates.
411100191010           IF NOT lncc_sqlSuccessful
411200191010               SET lncc_Err_18 TO TRUE
411300191010               MOVE lncc_ErrUpdatingMFABCHHDP TO lc_sqlErrShortDESCR
411400191010               PERFORM SQL_Fail_Process
411500191010           END-IF.
411600191010
411700191010      * RFS 84456 - begins.
411800191010      * _________________________________
411900191010       Adjust_User_Batch_Units.
412000191010      * _________________________________
412100191010           INITIALIZE ln_PlacementDate
412200191010                      ln_TransNo
412300191010                      ln_UnitAmt.
412400191010
412500191010           MOVE  ldh_PlacementDate (li_TDidx, li_DAPidx)
412600191010             TO  ln_PlacementDate.
412700191010           MOVE  ldh_TransNo       (li_TDidx, li_DAPidx)
412800191010             TO  ln_TransNo.
412900191010           MOVE  ldh_UnitAmt       (li_TDidx, li_DAPidx)
413000191010             TO  ln_UnitAmt.
413100191010
413200191010           EXEC SQL
413300191010             UPDATE MFABCHHDP A
413400191010                SET A.Trans_Unit_Amt =
413500191010                    A.Trans_Unit_Amt - :ln_UnitAmt
413600191010
413700191010              WHERE A.Batch_Date     = :ln_BatchDate
413800191010                AND A.Batch_Code     = :lc_BatchCode
413900191010           END-EXEC.
414000191010
414100191010           MOVE SQLSTATE TO lc_sqlStates.
414200191010           IF NOT lncc_sqlSuccessful
414300191010               SET lncc_Err_69 TO TRUE
414400191010               MOVE lncc_ErrUpdatingMFABCHHDP TO lc_sqlErrShortDESCR
414500191010               PERFORM SQL_Fail_Process
414600191010           END-IF.
414700191010      * RFS 84456 - ends.
414800191010
414900191010      * _________________________________
415000191010       Update_MFATRNP.
415100191010      * _________________________________
415200191010           INITIALIZE  li_ParmSysDate
415300191010                       li_ParmSysTime.
415400191010           MOVE FUNCTION CURRENT-DATE (1:8)  TO  li_ParmSysDate.
415500191010           MOVE FUNCTION CURRENT-DATE (9:4)  TO  li_ParmSysTime.
415600191010
415700191010           EXEC SQL
415800191010             UPDATE MFATRNP A
415900191010                SET A.Split_Option_Code = :lncc_A,
416000191010                    A.Gross_Or_Net      = :lncc_G,
416100191010                    A.Gross_Amt         = :lnci_0,
416200191010                    A.Net_Amt           = :lnci_0,
416300191010                    A.Changed_Date      = :li_ParmSysDate,
416400191010                    A.Changed_Time      = :li_ParmSysTime,
416500191010                    A.Changed_By_User   = :lncc_RDSPPRE
416600191010
416700191010              WHERE A.Placement_Date = :ln_PlacementDate
416800191010                AND A.Trans_No       = :ln_TransNo
416900191010           END-EXEC.
417000191010
417100191010           MOVE SQLSTATE TO lc_sqlStates.
417200191010           IF NOT lncc_sqlSuccessful
417300191010               SET lncc_Err_19 TO TRUE
417400191010               MOVE lncc_ErrUpdatingMFATRNP  TO lc_sqlErrShortDESCR
417500191010               PERFORM SQL_Fail_Process
417600191010           END-IF.
417700191010
417800191010      * _________________________________
417900191010       Update_MFATRNP_2.
418000191010      * _________________________________
418100191010           INITIALIZE  ln_PlacementDate
418200191010                       ln_TransNo
418300191010                       lc_SplitOption
418400191010                       lc_GrossOrNet
418500191010                       ln_NetAmt
418600191010                       ln_GrossAmt
418700191010                       li_ParmSysDate
418800191010                       li_ParmSysTime.
418900191010
419000191010           MOVE FUNCTION CURRENT-DATE (1:8)  TO  li_ParmSysDate.
419100191010           MOVE FUNCTION CURRENT-DATE (9:4)  TO  li_ParmSysTime.
419200191010
419300191010           MOVE ldh_PlacementDate(li_TDidx, li_DAPidx)
419400191010             TO ln_PlacementDate.
419500191010           MOVE ldh_TransNo    (li_TDidx, li_DAPidx) TO ln_TransNo.
419600191010           MOVE ldh_SplitOption(li_TDidx, li_DAPidx) TO lc_SplitOption.
419700191010           MOVE ldh_GrossOrNet (li_TDidx, li_DAPidx) TO lc_GrossOrNet.
419800191010
419900191010           IF ldh_SplitOption  (li_TDidx, li_DAPidx) = lncc_Dollar
420000191010              MOVE ldh_GrossAmt(li_TDidx, li_DAPidx) TO ln_GrossAmt
420100191010              MOVE ldh_NetAmt  (li_TDidx, li_DAPidx) TO ln_NetAmt
420200191010           END-IF.
420300191015      *RFS1008981 - Starts.
420400191015           IF ldh_AHATDFlag      (li_TDidx, li_DAPidx) = lncc_T
420500191015              MOVE ldh_TradeDate (li_TDidx, li_DAPidx) TO
420600191015                                                      li_TradeDateOut
420700191015           ELSE
420800191015              MOVE li_AsAtDate TO li_TradeDateOut
420900191015           END-IF.
421000191015      *RFS1008981 - Ends.
421100191015
421200210723      *RFS186761 Begins
421300210723           INITIALIZE Lc_ReversalCode.
421400210723           IF Lb_DeceasedClosureYes
421500210723              MOVE Lncc_DEAD TO Lc_ReversalCode
421600210723           ELSE
421700210723              MOVE " "       TO Lc_ReversalCode
421800210723           END-IF.
421900210723      *RFS186761 Ends
422000210723
422100191010           EXEC SQL
422200191010             UPDATE MFATRNP A
422300191010                SET A.Split_Option_Code         = :lc_SplitOption,
422400191015      *RFS1008981 - Starts.
422500191015      *             A.Trade_Date                = :li_AsAtDate,
422600191015                    A.Trade_Date                = :Li_TradeDateOut,
422700191015      *RFS1008981 - Ends.
422800191010                    A.Gross_Amt                 = :ln_GrossAmt,
422900191010                    A.Net_Amt                   = :ln_NetAmt,
423000191010                    A.Gross_Or_Net              = :lc_GrossOrNet,
423100191010                    A.Payment_Type_Code         = :lncc_N,
423200191010                    A.Original_Documents_Recvd  = :lncc_N,
423300191010      *rfs170212 - changed SUPPRESS-CONFIRMATION value from 'Y' to 'N'
423400191010      *             A.Suppress_Confirmation     = :lncc_Y,
423500191010                    A.Suppress_Confirmation     = :lncc_N,
423600191010                    A.Changed_Date              = :li_ParmSysDate,
423700191010                    A.Changed_Time              = :li_ParmSysTime,
423800210719      *RFS186761 Begins
423900210719      *             A.Changed_By_User           = :lncc_RDSPPRE
424000210719                    A.Changed_By_User           = :lncc_RDSPPRE,
424100210719                    A.Reversal_code             = :Lc_ReversalCode
424200210719      *RFS186761 Ends
424300191010              WHERE A.Placement_Date = :ln_PlacementDate
424400191010                AND A.Trans_No       = :ln_TransNo
424500191010           END-EXEC.
424600191010
424700191010           MOVE SQLSTATE TO lc_sqlStates.
424800191010           IF NOT lncc_sqlSuccessful
424900191010               SET lncc_Err_20 TO TRUE
425000191010               MOVE lncc_ErrUpdatingMFATRNP  TO lc_sqlErrShortDESCR
425100191010               PERFORM SQL_Fail_Process
425200191010           END-IF.
425300191010
425400200529I     * RFS 84456 - begins.
425500200529      * RFS1099376 - Starts. *
425600200529      * _________________________________
425700200529       Update_MFATRNP_3.
425800200529      * _________________________________
425900200529           INITIALIZE  ln_PlacementDate
426000200529                       ln_TransNo
426100200529                       li_ParmSysDate
426200200529                       li_ParmSysTime.
426300200529
426400200529           MOVE FUNCTION CURRENT-DATE (1:8)  TO  li_ParmSysDate.
426500200529           MOVE FUNCTION CURRENT-DATE (9:4)  TO  li_ParmSysTime.
426600200529
426700200529           MOVE ldh_PlacementDate(li_TDidx, li_DAPidx)
426800200529             TO ln_PlacementDate.
426900200529           MOVE ldh_TransNo      (li_TDidx, li_DAPidx) TO ln_TransNo.
427000200529           MOVE ldh_RedemCode  (li_TDidx, li_DAPidx)
427100200529                                 TO   Lc_ContrRedemCode.
427200200529
427300210723      *RFS186761 Begins
427400210723           INITIALIZE Lc_ReversalCode.
427500210723           IF Lb_DeceasedClosureYes
427600210723              MOVE Lncc_DEAD TO Lc_ReversalCode
427700210723           ELSE
427800210723              MOVE " "       TO Lc_ReversalCode
427900210723           END-IF.
428000210723      *RFS186761 Ends
428100210723
428200200602           EXEC SQL
428300200529             UPDATE MFATRNP A
428400200529                SET A.CONTR_REDEM_CODE          = :Lc_ContrRedemCode,
428500200529                    A.Changed_Date              = :li_ParmSysDate,
428600200529                    A.Changed_Time              = :li_ParmSysTime,
428700210719      *RFS186761 Begins
428800210719      *             A.Changed_By_User           = :lncc_RDSPPRE
428900210719                    A.Changed_By_User           = :lncc_RDSPPRE,
429000210719                    A.Reversal_code             = :Lc_ReversalCode
429100210719      *RFS186761 Ends
429200200529
429300200529              WHERE A.Placement_Date = :ln_PlacementDate
429400200529                AND A.Trans_No       = :ln_TransNo
429500200529           END-EXEC.
429600200529
429700200529           MOVE SQLSTATE TO lc_sqlStates.
429800200529           IF NOT lncc_sqlSuccessful
429900200529               SET lncc_Err_98 TO TRUE
430000200529               MOVE lncc_ErrUpdatingMFATRNP  TO lc_sqlErrShortDESCR
430100200529               PERFORM SQL_Fail_Process
430200200529           END-IF.
430300200529
430400200529      * RFS1099376 - Ends.   *
430500191010      * _________________________________
430600191010       Update_MFATRNP_Units.
430700191010      * _________________________________
430800191010           INITIALIZE  ln_PlacementDate
430900191010                       ln_TransNo
431000191010                       lc_SplitOption
431100191010                       ln_GrossAmt
431200191010                       ln_NetAmt
431300191010                       ln_PercentAmt
431400191010                       ln_UnitAmt
431500191010                       li_ParmSysDate
431600191010                       li_ParmSysTime.
431700191010
431800191010           MOVE FUNCTION CURRENT-DATE (1:8)  TO  li_ParmSysDate.
431900191010           MOVE FUNCTION CURRENT-DATE (9:4)  TO  li_ParmSysTime.
432000191010
432100191010           MOVE ldh_PlacementDate(li_TDidx, li_DAPidx)
432200191010             TO ln_PlacementDate.
432300191010           MOVE ldh_TransNo      (li_TDidx, li_DAPidx) TO ln_TransNo.
432400191010           MOVE ldh_UnitAmt      (li_TDidx, li_DAPidx) TO ln_UnitAmt.
432500191010           MOVE lncc_U  TO  lc_SplitOption.
432600191010
432700210719      *RFS186761 Begins
432800210719           INITIALIZE Lc_ReversalCode.
432900210719           IF Lb_DeceasedClosureYes
433000210719              MOVE Lncc_DEAD TO Lc_ReversalCode
433100210719           ELSE
433200210719              MOVE " "       TO Lc_ReversalCode
433300210719           END-IF.
433400210719      *RFS186761 Ends
433500191010           EXEC SQL
433600191010             UPDATE MFATRNP A
433700191010                SET A.Split_Option_Code         = :lc_SplitOption,
433800191010                    A.Gross_Amt                 = :ln_GrossAmt,
433900191010                    A.Net_Amt                   = :ln_NetAmt,
434000191010                    A.Percent_Amt               = :ln_PercentAmt,
434100191010                    A.Unit_Amt                  = :ln_UnitAmt,
434200191010                    A.Changed_Date              = :li_ParmSysDate,
434300191010                    A.Changed_Time              = :li_ParmSysTime,
434400210719      *RFS186761 Begins
434500210719      *             A.Changed_By_User           = :lncc_RDSPPRE
434600210719                    A.Changed_By_User           = :lncc_RDSPPRE,
434700210719                    A.Reversal_Code             = :Lc_ReversalCode
434800210719      *RFS186761 Ends
434900191010
435000191010              WHERE A.Placement_Date = :ln_PlacementDate
435100191010                AND A.Trans_No       = :ln_TransNo
435200191010           END-EXEC.
435300191010
435400191010           MOVE SQLSTATE TO lc_sqlStates.
435500191010           IF NOT lncc_sqlSuccessful
435600191010               SET lncc_Err_68 TO TRUE
435700191010               MOVE lncc_ErrUpdatingMFATRNP  TO lc_sqlErrShortDESCR
435800191010               PERFORM SQL_Fail_Process
435900191010           END-IF.
436000191010      * RFS 84456 - ends.
436100191010
436200191010      * _________________________________
436300191010       Update_Rejection_Code_MFATRNP.
436400191010      * _________________________________
436500191010           INITIALIZE ln_RejPlacementDate
436600191010                      ln_RejTransNo
436700191010                      lc_RejCode.
436800191010
436900191010           MOVE ltr_PlacementDate(li_TRNidx)  TO  ln_RejPlacementDate.
437000191010           MOVE ltr_TransNo(li_TRNidx)        TO  ln_RejTransNo.
437100191010           MOVE ltr_RejectCode(li_TRNidx)     TO  lc_RejCode.
437200191010
437300191010           EXEC SQL
437400191010             UPDATE MFATRNP A
437500191010                SET A.Rejection_Code = :lc_RejCode
437600191010162133              ,A.Process_date  = :li_AsAtDate
437700191010
437800191010              WHERE A.Placement_Date = :ln_RejPlacementDate
437900191010                AND A.Trans_No       = :ln_RejTransNo
438000191010           END-EXEC.
438100191010
438200191010           MOVE SQLSTATE TO lc_sqlStates.
438300191010           IF NOT lncc_sqlSuccessful
438400191010               SET lncc_Err_21 TO TRUE
438500191010               MOVE lncc_ErrUpdatingMFATRNP  TO lc_sqlErrShortDESCR
438600191010               PERFORM SQL_Fail_Process
438700191010           END-IF.
438800191010
438900191010           IF ltr_TransType(li_TRNidx) = lncc_SWO OR lncc_TRO
439000191010              EXEC SQL
439100191010                UPDATE MFATRNP A
439200191010                  SET A.Rejection_Code = :lncc_13
439300191010      *RFS1000873 begins
439400191010                  ,A.Process_date  = :li_AsAtDate
439500191010      *RFS1000873 ends
439600191010                WHERE EXISTS
439700191010                 (SELECT :lncc_X
439800191010                    FROM MFATRNTGP B
439900191010                  WHERE A.Placement_Date = B.Placement_Date_2
440000191010                    AND A.Trans_No       = B.Trans_No_2
440100191010                    AND B.Placement_Date = :ln_RejPlacementDate
440200191010                    AND B.Trans_No       = :ln_RejTransNo
440300191010                    AND B.Relationship_Type IN (:lncc_DSB, :lncc_WSB))
440400191010              END-EXEC
440500191010
440600191010              MOVE SQLSTATE TO lc_sqlStates
440700191010              EVALUATE TRUE
440800191010                WHEN lncc_sqlSuccessful
440900191010                  CONTINUE
441000191010                WHEN lncc_sqlEnd
441100191010                  CONTINUE
441200191010                WHEN OTHER
441300191010                  SET lncc_Err_22 TO TRUE
441400191010                  MOVE lncc_ErrUpdatingMFATRNP  TO lc_sqlErrShortDESCR
441500191010                  PERFORM SQL_Fail_Process
441600191010              END-EVALUATE
441700191010
441800191010           END-IF.
441900191010
442000191010      * 86707 - begins.
442100191010      * _________________________________
442200191010      *Reject_New_DAPs.
442300191010       Reject_New_Transactions.
442400191010      * _________________________________
442500191010
442600191010      *    EXEC SQL
442700191010      *      UPDATE MFATRNP A
442800191010      *        SET A.Rejection_Code = :lncc_DS9
442900191010      *
443000191010      *      WHERE EXISTS
443100191010      *       (SELECT :lncc_X
44320019101084456 *          FROM MFATRNP   B
44330019101084456 *
44340019101084456 *          INNER JOIN MFACNTRRP C
44350019101084456 *             ON B.Contr_Redem_Code  = C.Contr_Redem_Code
44360019101084456 *
44370019101084456 *          INNER JOIN MFAACCTYP D
44380019101084456 *             ON C.Account_Type_Code  = D.Account_Type_Code
443900191010      *
444000191010      *             EXCEPTION JOIN MFATRHDRP E
444100191010      *               ON B.Placement_Date =  E.Placement_Date  AND
444200191010      *                  B.Trans_No       =  E.Trans_No
444300191010      *
444400191010      *        WHERE D.Account_Type_Rule  = :lncc_0
444500191010      *          AND B.Account_No         = :ln_SaveAccountNo
444600191010      *          AND B.Trans_Status_Code IN
444700191010      *              (:lncc_PND, :lncc_UNC, :lncc_VER)
444800191010      *          AND (C.Contr_Redem_Code_Rule IN (:lncc_11, :lncc_12)
444900191010      *               OR (C.Contr_Redem_Code_Rule = :lncc_13 AND
445000191010      *                   B.Split_Option_Code = :lncc_A)))
445100191010      *    END-EXEC.
445200191010
445300191010      * If partially group exists, reject all transactions except BUYs
445400191010      * and the ones that belong to a group.
445500191010
445600191010           EXEC SQL
445700191010             UPDATE MFATRNP A
445800191010                SET A.Rejection_Code = :lncc_DS9
445900191010      *RFS1000873 begins
446000191010               ,A.Process_date  = :li_AsAtDate
446100191010      *RFS1000873 ends
446200191010
446300191010              WHERE A.Account_No  = :ln_SaveAccountNo
446400191010                AND A.Trans_Type_Code NOT IN
446500191010                    (:lncc_BUY,:lncc_CPG,:lncc_INC,:lncc_INT,:lncc_MFR)
446600191010                AND A.Trans_Status_Code IN
446700191010                    (:lncc_PND, :lncc_UNC, :lncc_VER)
446800191010
446900191010                AND NOT EXISTS
447000191010                   (SELECT :lncc_X
447100191010                      FROM  MFATRHDRP B
447200191010                     WHERE  B.Placement_Date =  A.Placement_Date
447300191010      * RFS91990 - START
447400191010      *                AND  B.Trans_No       =  A.Trans_No)
447500191010                       AND  B.Trans_No       =  A.Trans_No
447600191010                       AND  B.HEADER_TYPE    =  :lncc_AHA)
447700191010      * RFS91990 - END
447800191010           END-EXEC.
447900191010      * 86707 - ends.
448000191010
448100191010           MOVE SQLSTATE TO lc_sqlStates.
448200191010           EVALUATE TRUE
448300191010             WHEN lncc_sqlSuccessful
448400191010               CONTINUE
448500191010             WHEN lncc_sqlEnd
448600191010               CONTINUE
448700191010             WHEN OTHER
448800191010               SET lncc_Err_63 TO TRUE
448900191010               MOVE lncc_ErrUpdatingMFATRNP TO lc_sqlErrShortDESCR
449000191010               PERFORM SQL_Fail_Process
449100191010           END-EVALUATE.
449200191010
449300191010      * 86707 - begins.
449400191010      * Change DS9 to 13(redemption has rejected) for SWI/TRI trans.
449500191010
449600191010           EXEC SQL
449700191010             UPDATE MFATRNP A
449800191010                SET A.Rejection_Code = :lncc_13
449900191010      *RFS1000873 begins
450000191010                ,A.Process_date  = :li_AsAtDate
450100191010      *RFS1000873 ends
450200191010              WHERE A.Account_No  = :ln_SaveAccountNo
450300191010                AND A.Trans_Type_Code IN
450400191010                    (:lncc_SWI, :lncc_TRI)
450500191010                AND A.Trans_Status_Code IN
450600191010                    (:lncc_PND, :lncc_UNC, :lncc_VER)
450700191010                AND A.Rejection_Code = :lncc_DS9
450800191010           END-EXEC.
450900191010
451000191010           MOVE SQLSTATE TO lc_sqlStates.
451100191010           EVALUATE TRUE
451200191010             WHEN lncc_sqlSuccessful
451300191010               CONTINUE
451400191010             WHEN lncc_sqlEnd
451500191010               CONTINUE
451600191010             WHEN OTHER
451700191010               SET lncc_Err_71 TO TRUE
451800191010               MOVE lncc_ErrUpdatingMFATRNP TO lc_sqlErrShortDESCR
451900191010               PERFORM SQL_Fail_Process
452000191010           END-EVALUATE.
452100191010      * 86707 - ends.
452200191010
452300191010      * _________________________________
452400191010       Delete_MFATRNHDP.
452500191010      * _________________________________
452600191010           EXEC SQL
452700191010             DELETE FROM MFATRNHDP A
452800191010               WHERE EXISTS
452900191010                   (SELECT :lncc_X
45300019101084456                 FROM MFATRHDRP B
45310019101084456
45320019101084456                 INNER JOIN  MFATRNP C
45330019101084456                    ON B.Placement_Date = C.Placement_Date
45340019101084456                   AND B.Trans_No       = C.Trans_No
453500191010
453600191010                    WHERE A.Placement_Date = B.Placement_Date
453700191010                      AND A.Trans_No       = B.Trans_No
453800191010                      AND B.Header_No      = :ln_HeaderNo
453900191010      * RFS91990 - START
454000191010      *               AND C.Entered_By     = :lncc_RDSPPRE)
454100191010                      AND C.Entered_By     = :lncc_RDSPPRE
454200191010                      AND B.HEADER_TYPE    = :lncc_AHA)
454300191010      * RFS91990 - END
454400191010           END-EXEC.
454500191010
454600191010           MOVE SQLSTATE TO lc_sqlStates.
454700191010           EVALUATE TRUE
454800191010             WHEN lncc_sqlSuccessful
454900191010               CONTINUE
455000191010             WHEN lncc_sqlEnd
455100191010               CONTINUE
455200191010             WHEN OTHER
455300191010               SET lncc_Err_23 TO TRUE
455400191010               MOVE lncc_ErrDeletingMFATRNHDP TO lc_sqlErrShortDESCR
455500191010               PERFORM SQL_Fail_Process
455600191010           END-EVALUATE.
455700191010
455800191010      * _________________________________
455900191010       Delete_MFATRNRRP.
456000191010      * _________________________________
456100191010           EXEC SQL
456200191010             DELETE FROM MFATRNRRP A
456300191010               WHERE EXISTS
456400191010                   (SELECT :lncc_X
45650019101084456                 FROM MFATRHDRP B
45660019101084456
45670019101084456                 INNER JOIN  MFATRNP C
45680019101084456                    ON B.Placement_Date = C.Placement_Date
45690019101084456                   AND B.Trans_No       = C.Trans_No
457000191010
457100191010                    WHERE A.Placement_Date = B.Placement_Date
457200191010                      AND A.Trans_No       = B.Trans_No
457300191010                      AND B.Header_No      = :ln_HeaderNo
457400191010                      AND C.Entered_By     = :lncc_RDSPPRE)
457500191010           END-EXEC.
457600191010
457700191010           MOVE SQLSTATE TO lc_sqlStates.
457800191010           EVALUATE TRUE
457900191010             WHEN lncc_sqlSuccessful
458000191010               CONTINUE
458100191010             WHEN lncc_sqlEnd
458200191010               CONTINUE
458300191010             WHEN OTHER
458400191010               SET lncc_Err_24 TO TRUE
458500191010               MOVE lncc_ErrDeletingMFATRNRRP TO lc_sqlErrShortDESCR
458600191010               PERFORM SQL_Fail_Process
458700191010           END-EVALUATE.
458800191010
458900191010      * _________________________________
459000191010       Delete_MFATRNREP.
459100191010      * _________________________________
459200191010           EXEC SQL
459300191010             DELETE FROM MFATRNREP A
459400191010               WHERE EXISTS
459500191010                   (SELECT :lncc_X
45960019101084456                 FROM MFATRHDRP B
45970019101084456
45980019101084456                 INNER JOIN  MFATRNP C
45990019101084456                    ON B.Placement_Date = C.Placement_Date
46000019101084456                   AND B.Trans_No       = C.Trans_No
460100191010
460200191010                    WHERE A.Placement_Date = B.Placement_Date
460300191010                      AND A.Trans_No       = B.Trans_No
460400191010                      AND B.Header_No      = :ln_HeaderNo
460500191010      * RFS91990 - START
460600191010      *               AND C.Entered_By     = :lncc_RDSPPRE)
460700191010                      AND C.Entered_By     = :lncc_RDSPPRE
460800191010                      AND B.HEADER_TYPE    = :lncc_AHA)
460900191010      * RFS91990 - END
461000191010           END-EXEC.
461100191010
461200191010           MOVE SQLSTATE TO lc_sqlStates.
461300191010           EVALUATE TRUE
461400191010             WHEN lncc_sqlSuccessful
461500191010               CONTINUE
461600191010             WHEN lncc_sqlEnd
461700191010               CONTINUE
461800191010             WHEN OTHER
461900191010               SET lncc_Err_66 TO TRUE
462000191010               MOVE lncc_ErrDeletingMFATRNREP TO lc_sqlErrShortDESCR
462100191010               PERFORM SQL_Fail_Process
462200191010           END-EVALUATE.
462300191010
462400191010      * _________________________________
462500191010       Get_AHA_Batch_Info.
462600191010      * _________________________________
462700191010           INITIALIZE  lc_BatchCode
462800191010                       ln_BatchDate
462900191010                       ln_TrnCnt
463000191010                       ln_TotalBatchAmt.
463100191010
463200191010           EXEC SQL
463300191010             SELECT COALESCE(MAX(A.Batch_Code)," "),
463400191010                    COALESCE(MAX(A.Batch_Date),0),
463500191010                    COALESCE(COUNT(*),0),
463600191010                    COALESCE(SUM(A.GROSS_AMT),0)
463700191010
463800191010               INTO :lc_BatchCode,
463900191010                    :ln_BatchDate,
464000191010                    :ln_TrnCnt,
464100191010                    :ln_TotalBatchAmt
464200191010
46430019101084456          FROM MFATRNP A
46440019101084456
46450019101084456          INNER JOIN MFATRHDRP B
46460019101084456             ON A.Placement_Date = B.Placement_Date
46470019101084456            AND A.Trans_No       = B.Trans_No
464800191010
464900191010              WHERE A.Entered_By     = :lncc_RDSPPRE
465000191010                AND B.Header_No      = :ln_HeaderNo
465100191010           END-EXEC.
465200191010
465300191010           MOVE SQLSTATE TO lc_sqlStates.
465400191010           IF NOT lncc_sqlSuccessful
465500191010               SET lncc_Err_25 TO TRUE
465600191010               MOVE lncc_ErrGettingBatchInfo  TO lc_sqlErrShortDESCR
465700191010               PERFORM SQL_Fail_Process
465800191010           END-IF.
465900191010
466000191010      * _________________________________
466100191010       Get_AHA_Batch_Info_2.
466200191010      * _________________________________
466300191010           INITIALIZE  lc_BatchCode
466400191010                       ln_BatchDate
466500191010                       ln_PlacementDate
466600191010                       ln_TransNo.
466700191010
466800191010           MOVE ldh_PlacementDate(li_TDidx, li_DAPidx)
466900191010             TO ln_PlacementDate.
467000191010           MOVE ldh_TransNo(li_TDidx, li_DAPidx)
467100191010             TO ln_TransNo.
467200191010
467300191010           EXEC SQL
467400191010             SELECT A.Batch_Code,
467500191010                    A.Batch_Date
467600191010
467700191010               INTO :lc_BatchCode,
467800191010                    :ln_BatchDate
467900191010
468000191010               FROM MFATRNP A
468100191010
468200191010              WHERE A.Placement_Date = :ln_PlacementDate
468300191010                AND A.Trans_No       = :ln_TransNo
468400191010           END-EXEC.
468500191010
468600191010           MOVE SQLSTATE TO lc_sqlStates.
468700191010           IF NOT lncc_sqlSuccessful
468800191010               SET lncc_Err_26 TO TRUE
468900191010               MOVE lncc_ErrGettingBatchInfo  TO lc_sqlErrShortDESCR
469000191010               PERFORM SQL_Fail_Process
469100191010           END-IF.
469200191010
469300191010      * _________________________________
469400191010       Adjust_AHA_Batch.
469500191010      * _________________________________
469600191010           EXEC SQL
469700191010             UPDATE MFABCHHDP A
469800191010                SET A.Trans_Dollar_Amt =
469900191010                           A.Trans_Dollar_Amt + : ln_TotalBatchAmt,
470000191010                    A.Match_Total_Transactions =
470100191010                           A.Match_Total_Transactions - :ln_TrnCnt
470200191010
470300191010              WHERE A.Batch_Date     = :ln_BatchDate
47040019101098866           AND :ln_BatchDate    <> 0
470500191010                AND A.Batch_Code     = :lc_BatchCode
470600191010           END-EXEC.
470700191010
470800191010           MOVE SQLSTATE TO lc_sqlStates.
470900191010           IF NOT lncc_sqlSuccessful
471000191010               SET lncc_Err_27 TO TRUE
471100191010               MOVE lncc_ErrUpdatingMFABCHHDP TO lc_sqlErrShortDESCR
471200191010               PERFORM SQL_Fail_Process
471300191010           END-IF.
471400191010
471500191010      * _________________________________
471600191010       Check_Batch_Trans_Count.
471700191010      * _________________________________
471800191010           INITIALIZE ln_BatchTransCount.
471900191010
472000191010           EXEC SQL
472100191010             SELECT A.Match_Total_Transactions
472200191010               INTO :ln_BatchTransCount
472300191010               FROM MFABCHHDP A
472400191010              WHERE A.Batch_Date     = :ln_BatchDate
472500191010                AND A.Batch_Code     = :lc_BatchCode
472600191010           END-EXEC.
472700191010
472800191010           MOVE SQLSTATE TO lc_sqlStates.
472900191010           IF NOT lncc_sqlSuccessful
473000191010               SET lncc_Err_28 TO TRUE
473100191010               MOVE lncc_ErrReadingMFABCHHDP TO lc_sqlErrShortDESCR
473200191010               PERFORM SQL_Fail_Process
473300191010           END-IF.
473400191010
473500191010           IF ln_BatchTransCount = 0
473600191010              EXEC SQL
473700191010                DELETE FROM MFABCHHDP A
473800191010                 WHERE A.Batch_Date     = :ln_BatchDate
473900191010                   AND A.Batch_Code     = :lc_BatchCode
474000191010              END-EXEC
474100191010
474200191010              MOVE SQLSTATE TO lc_sqlStates
474300191010              IF NOT lncc_sqlSuccessful
474400191010                  SET lncc_Err_29 TO TRUE
474500191010                  MOVE lncc_ErrDeletingMFABCHHDP TO lc_sqlErrShortDESCR
474600191010                  PERFORM SQL_Fail_Process
474700191010              END-IF
474800191010           END-IF.
474900191010
475000191010      * _________________________________
475100191010       Set_Units_To_Zero.
475200191010      * _________________________________
475300191010           EXEC SQL
475400191010             UPDATE MFAACCIVP A
475500191010                SET A.Curr_Unit_Bal =  0
475600191010
475700191010              WHERE A.Account_No          = :ln_SaveAccountNo
475800191010                AND A.Investment_Code     = :lc_HighestMVInv
475900191010           END-EXEC.
476000191010
476100191010           MOVE SQLSTATE TO lc_sqlStates.
476200191010           IF NOT lncc_sqlSuccessful
476300191010               SET lncc_Err_30 TO TRUE
476400191010               MOVE lncc_ErrUpdatingMFAACCIVP TO lc_sqlErrShortDESCR
476500191010               PERFORM SQL_Fail_Process
476600191010           END-IF.
476700191010
476800191010      * _________________________________
476900191010       Delete_MFATRNP.
477000191010      * _________________________________
477100191010           EXEC SQL
477200191010             DELETE FROM MFATRNP A
477300191010               WHERE EXISTS
477400191010                   (SELECT :lncc_X
477500191010                      FROM MFATRHDRP B
477600191010                    WHERE A.Placement_Date = B.Placement_Date
477700191010                      AND A.Trans_No       = B.Trans_No
477800191010                      AND B.Header_No      = :ln_HeaderNo
477900191010      * RFS91990 - START
478000191010      *               AND A.Entered_By     = :lncc_RDSPPRE)
478100191010                      AND A.Entered_By     = :lncc_RDSPPRE
478200191010                      AND B.HEADER_TYPE    = :lncc_AHA)
478300191010      * RFS91990 - END
478400191010           END-EXEC.
478500191010
478600191010           MOVE SQLSTATE TO lc_sqlStates.
478700191010           EVALUATE TRUE
478800191010             WHEN lncc_sqlSuccessful
478900191010               CONTINUE
479000191010             WHEN lncc_sqlEnd
479100191010               CONTINUE
479200191010             WHEN OTHER
479300191010               SET lncc_Err_31 TO TRUE
479400191010               MOVE lncc_ErrDeletingMFATRNP TO lc_sqlErrShortDESCR
479500191010               PERFORM SQL_Fail_Process
479600191010           END-EVALUATE.
479700191010
479800191010      * ----------------
479900191010      * RFS 88074 begins
480000191010      * ----------------
480100191010      * _________________________________
480200191010       Delete_MFATRNCP.
480300191010      * _________________________________
480400191010           EXEC SQL
480500191010             DELETE FROM MFATRNCP  A
480600191010               WHERE EXISTS
480700191010                (SELECT :lncc_X
480800191010                   FROM MFATRHDRP B
480900191010
481000191010                   INNER JOIN  MFATRNP C ON
481100191010                        B.Placement_Date = C.Placement_Date
481200191010                    AND B.Trans_No       = C.Trans_No
481300191010
481400191010                    WHERE A.Placement_Date = B.Placement_Date
481500191010                      AND A.Trans_No       = B.Trans_No
481600191010                      AND B.Header_No      = :ln_HeaderNo
481700191010                      AND C.Entered_By     = :lncc_RDSPPRE)
481800191010           END-EXEC.
481900191010
482000191010           MOVE SQLSTATE TO lc_sqlStates.
482100191010           IF (not lncc_sqlSuccessful) AND (not lncc_sqlEnd)
482200191010               SET lncc_Err_79 TO TRUE
482300191010               MOVE lncc_ErrDeletingMFATRNCP TO lc_sqlErrShortDESCR
482400191010               PERFORM SQL_Fail_Process
482500191010           END-IF.
482600191010      * _________________________________
482700191010       Delete_MFATRNBP.
482800191010      * _________________________________
482900191010           EXEC SQL
483000191010             DELETE FROM MFATRNBP  A
483100191010               WHERE EXISTS
483200191010                 (SELECT :lncc_X
483300191010                    FROM MFATRHDRP B
483400191010
483500191010                    INNER JOIN  MFATRNP C ON
483600191010                        B.Placement_Date = C.Placement_Date
483700191010                    AND B.Trans_No       = C.Trans_No
483800191010
483900191010                    WHERE A.Placement_Date = B.Placement_Date
484000191010                      AND A.Trans_No       = B.Trans_No
484100191010                      AND B.Header_No      = :ln_HeaderNo
484200191010      * RFS91990 - START
484300191010      *               AND C.Entered_By     = :lncc_RDSPPRE)
484400191010                      AND C.Entered_By     = :lncc_RDSPPRE
484500191010                      AND B.HEADER_TYPE    = :lncc_AHA)
484600191010      * RFS91990 - END
484700191010           END-EXEC.
484800191010
484900191010           MOVE SQLSTATE TO lc_sqlStates.
485000191010           IF (not lncc_sqlSuccessful) AND (not lncc_sqlEnd)
485100191010               SET lncc_Err_80 TO TRUE
485200191010               MOVE lncc_ErrDeletingMFATRNBP TO lc_sqlErrShortDESCR
485300191010               PERFORM SQL_Fail_Process
485400191010           END-IF.
485500191010      * ----------------
485600191010      * RFS 88074 ends
485700191010      * ----------------
485800191010
485900191010      * _________________________________
486000191010       Delete_MFATRHDRP.
486100191010      * _________________________________
486200191010           EXEC SQL
486300191010             DELETE FROM MFATRHDRP
486400191010              WHERE Header_No = :ln_HeaderNo
48650019101091990           AND HEADER_TYPE = :lncc_AHA
486600191010           END-EXEC.
486700191010
486800191010           MOVE SQLSTATE TO lc_sqlStates.
486900191010           EVALUATE TRUE
487000191010             WHEN lncc_sqlSuccessful
487100191010               CONTINUE
487200191010             WHEN lncc_sqlEnd
487300191010               CONTINUE
487400191010             WHEN OTHER
487500191010               SET lncc_Err_32 TO TRUE
487600191010               MOVE lncc_ErrDeletingMFATRHDRP TO lc_sqlErrShortDESCR
487700191010               PERFORM SQL_Fail_Process
487800191010           END-EVALUATE.
487900191010
488000191010      * _________________________________
488100191010       Delete_Stand_Alone_DAPs.
488200191010      * _________________________________
488300191010           EXEC SQL
488400191010             DELETE FROM MFATRNHDP A
488500191010               WHERE EXISTS
488600191010                   (SELECT :lncc_X
48870019101084456                 FROM MFATRNP   B
48880019101084456
48890019101084456                 INNER JOIN MFAACCNTP C
48900019101084456                    ON B.Account_No = C.Account_No
48910019101084456
48920019101084456                 INNER JOIN MFAACCTYP D
48930019101084456                    ON C.Account_Type_Code = D.Account_Type_Code
48940019101084456
48950019101084456                 INNER JOIN MFACNTRRP E
48960019101084456                    ON C.Account_Type_Code = E.Account_Type_Code
48970019101084456                   AND B.Contr_Redem_Code  = E.Contr_Redem_Code
489800191010
489900191010                      EXCEPTION JOIN MFATRHDRP F
490000191010                        ON B.Placement_Date =  F.Placement_Date  AND
490100191010                           B.Trans_No       =  F.Trans_No
49020019101091990                  AND F.HEADER_TYPE    =  :lncc_AHA
490300191010
490400191010                    WHERE A.Placement_Date    = B.Placement_Date
490500191010                      AND A.Trans_No          = B.Trans_No
490600191010                      AND D.Account_Type_Rule = :lnci_0
490700191010                      AND E.Contr_Redem_Code_Rule
490800191010                          IN (:lncc_11, :lncc_12)
490900191010                      AND B.Trans_Status_Code
491000191010                          IN (:lncc_PND, :lncc_UNC, :lncc_VER))
49110019101080658                 AND A.Waive_LDAP_Maximum_Check <> :lncc_Y
491200191010      *RFS1000622 Starts
491300191010                      AND A.DATE_SEQUENCE <> :Lncc_T
491400191010      *RFS1000622 Ends
491500191010           END-EXEC.
491600191010
491700191010           MOVE SQLSTATE TO lc_sqlStates.
491800191010           EVALUATE TRUE
491900191010             WHEN lncc_sqlSuccessful
492000191010               CONTINUE
492100191010             WHEN lncc_sqlEnd
492200191010               CONTINUE
492300191010             WHEN OTHER
492400191010               SET lncc_Err_33 TO TRUE
492500191010               MOVE lncc_ErrDeletingMFATRNHDP TO lc_sqlErrShortDESCR
492600191010               PERFORM SQL_Fail_Process
492700191010           END-EVALUATE.
492800191010
492900191010      * _________________________________
493000191010       Clear_Rejection_Code.
493100191010      * _________________________________
493200191010           EXEC SQL
493300191010             UPDATE MFATRNP A
493400191010                SET A.Rejection_Code = " "
493500191010
493600191010R97154         WHERE A.Trans_Status_Code
493700191010R97154                    IN (:lncc_PND, :lncc_UNC, :lncc_VER)
493800191010R97154         AND EXISTS
493900191010R97154             (SELECT :lncc_X
494000191010R97154                FROM  MFAACCNTP B
494100191010R97154
494200191010R97154                INNER JOIN MFAACCTYP C
494300191010R97154                   ON B.Account_Type_Code = C.Account_Type_Code
494400191010R97154
494500191010R97154              WHERE A.Account_No = B.Account_No
494600191010R97154                AND C.Account_Type_Rule = :lnci_0  )
494700191010
494800191010           END-EXEC.
494900191010
495000191010      *R97154  WHERE EXISTS
495100191010      *R97154      (SELECT :lncc_X
49520019101084456 *R97154         FROM MFATRNP B
49530019101084456 *R97154
49540019101084456 *R97154         INNER JOIN MFAACCNTP C
49550019101084456 *R97154            ON B.Account_No = C.Account_No
49560019101084456 *R97154
49570019101084456 *R97154         INNER JOIN MFAACCTYP D
49580019101084456 *R97154            ON C.Account_Type_Code = D.Account_Type_Code
495900191010      *R97154
496000191010      *R97154       WHERE A.Placement_Date    = B.Placement_Date
496100191010      *R97154         AND A.Trans_No          = B.Trans_No
496200191010      *R97154         AND D.Account_Type_Rule = :lnci_0
496300191010      *R97154         AND B.Trans_Status_Code
496400191010      *R97154             IN (:lncc_PND, :lncc_UNC, :lncc_VER))
496500191010
496600191010           MOVE SQLSTATE TO lc_sqlStates.
496700191010           EVALUATE TRUE
496800191010             WHEN lncc_sqlSuccessful
496900191010               CONTINUE
497000191010             WHEN lncc_sqlEnd
497100191010               CONTINUE
497200191010             WHEN OTHER
497300191010               SET lncc_Err_34 TO TRUE
497400191010               MOVE lncc_ErrUpdatingMFATRNP  TO lc_sqlErrShortDESCR
497500191010               PERFORM SQL_Fail_Process
497600191010           END-EVALUATE.
497700191010
497800191010      *RFS 68035.22 - Begins
497900191010      * _________________________________
498000191010       Reject_Rule_13_14_Bad_Trans.
498100191010      * _________________________________
498200191010      *_______________________________________________________________*
498300191010      * Reject transactions with rule 13/14 where there is missing
498400191010      * trans approval record.
498500191010      *_______________________________________________________________*
498600191010           EXEC SQL
498700191010             UPDATE MFATRNP A
498800191010                SET A.Rejection_Code = :lncc_DSA
498900191010      *RFS1000873 begins
499000191010                ,A.Process_date  = :li_AsAtDate
499100191010      *RFS1000873 ends
499200191010               WHERE EXISTS
499300191010                   (SELECT :lncc_X
49940019101084456                 FROM MFATRNP B
49950019101084456
49960019101084456                 INNER JOIN MFAACCNTP C
49970019101084456                    ON B.Account_No = C.Account_No
49980019101084456
49990019101084456                 INNER JOIN MFAACCTYP D
50000019101084456                    ON C.Account_Type_Code = D.Account_Type_Code
50010019101084456
50020019101084456                 INNER JOIN MFACNTRRP E
50030019101084456                    ON C.Account_Type_Code = E.Account_Type_Code
50040019101084456                   AND B.Contr_Redem_Code  = E.Contr_Redem_Code
500500191010
500600191010                    WHERE A.Placement_Date    = B.Placement_Date
500700191010                      AND A.Trans_No          = B.Trans_No
500800191010                      AND D.Account_Type_Rule = :lnci_0
500900191010                      AND E.Contr_Redem_Code_Rule
501000191010                          IN (:lncc_13, :lncc_14)
501100191010                      AND B.Trans_Status_Code
501200191010                          IN (:lncc_PND, :lncc_UNC, :lncc_VER))
501300191010                 AND NOT EXISTS
501400191010                   (SELECT :lncc_X
501500191010                      FROM MFATRNHDP F
501600191010                    WHERE A.Placement_Date    = F.Placement_Date
501700191010                      AND A.Trans_No          = F.Trans_No)
501800191010           END-EXEC.
501900191010
502000191010           MOVE SQLSTATE TO lc_sqlStates.
502100191010           EVALUATE TRUE
502200191010             WHEN lncc_sqlSuccessful
502300191010               CONTINUE
502400191010             WHEN lncc_sqlEnd
502500191010               CONTINUE
502600191010             WHEN OTHER
502700191010               SET lncc_Err_67 TO TRUE
502800191010               MOVE lncc_ErrUpdatingMFATRNP  TO lc_sqlErrShortDESCR
502900191010               PERFORM SQL_Fail_Process
503000191010           END-EVALUATE.
503100191010      *RFS 68035.22 - Ends
503200191010
503300191010      * _________________________________
503400191010       Get_Reason_Codes.
503500191010      * _________________________________
503600191010           INITIALIZE lc_ReasonCodeDAP
503700191010                      lc_ReasonCodeLDAP.
503800191010
503900191010           EXEC SQL
504000191010             SELECT A.HRDC_Reason_Code
504100191010
504200191010               INTO :lc_ReasonCodeDAP
504300191010
504400191010               FROM MFAHRRCDP A
504500191010
504600191010              WHERE A.Contr_Redem_Code_Rule = :lncc_11
504700191010102179          AND A.Reason_Type = :lncc_Repayment
504800191010              ORDER BY A.HRDC_Reason_Code
504900191010              FETCH FIRST ROW ONLY
505000191010           END-EXEC.
505100191010
505200191010           MOVE SQLSTATE TO lc_sqlStates.
505300191010           IF NOT lncc_sqlSuccessful
505400191010               SET lncc_Err_35 TO TRUE
505500191010               MOVE lncc_ErrGettingReasonCode TO lc_sqlErrShortDESCR
505600191010               PERFORM SQL_Fail_Process
505700191010           END-IF.
505800191010
505900191010           EXEC SQL
506000191010             SELECT A.HRDC_Reason_Code
506100191010
506200191010               INTO :lc_ReasonCodeLDAP
506300191010
506400191010               FROM MFAHRRCDP A
506500191010
506600191010              WHERE A.Contr_Redem_Code_Rule = :lncc_12
506700191010102179          AND A.Reason_Type = :lncc_Repayment
506800191010              ORDER BY A.HRDC_Reason_Code
506900191010              FETCH FIRST ROW ONLY
507000191010           END-EXEC.
507100191010
507200191010           MOVE SQLSTATE TO lc_sqlStates.
507300191010           IF NOT lncc_sqlSuccessful
507400191010               SET lncc_Err_36 TO TRUE
507500191010               MOVE lncc_ErrGettingReasonCode TO lc_sqlErrShortDESCR
507600191010               PERFORM SQL_Fail_Process
507700191010           END-IF.
507800191010
507900191010      * _________________________________
508000191010       Get_Redemption_Codes.
508100191010      * _________________________________
508200191010           INITIALIZE lc_RedemCodeDAP
508300191010                      lc_RedemCodeAHA.
508400191010
508500191010           EXEC SQL
508600191010             SELECT A.Contr_Redem_Code
508700191010
508800191010               INTO :lc_RedemCodeDAP
508900191010
50900019101084456          FROM MFACNTRRP A
50910019101084456
50920019101084456          INNER JOIN MFAACCTYP B
50930019101084456            ON A.Account_Type_Code = B.Account_Type_Code
509400191010
509500191010              WHERE B.Account_Type_Rule = :lncc_0
509600191010                AND A.Contr_Redem_Code_Rule = :lncc_11
509700191010              ORDER BY A.Contr_Redem_Code
509800191010              FETCH FIRST ROW ONLY
509900191010           END-EXEC.
510000191010
510100191010           MOVE SQLSTATE TO lc_sqlStates.
510200191010           IF NOT lncc_sqlSuccessful
510300191010               SET lncc_Err_37 TO TRUE
510400191010               MOVE lncc_ErrGettingRedemCode TO lc_sqlErrShortDESCR
510500191010               PERFORM SQL_Fail_Process
510600191010           END-IF.
510700191010
510800191010           EXEC SQL
510900191010             SELECT A.Contr_Redem_Code
511000191010
511100191010               INTO :lc_RedemCodeAHA
511200191010
51130019101084456          FROM MFACNTRRP A
51140019101084456
51150019101084456          INNER JOIN MFAACCTYP B
51160019101084456            ON A.Account_Type_Code = B.Account_Type_Code
511700191010
511800191010              WHERE B.Account_Type_Rule = :lncc_0
511900191010                AND A.Contr_Redem_Code_Rule = :lncc_13
512000191010              ORDER BY A.Contr_Redem_Code
512100191010              FETCH FIRST ROW ONLY
512200191010           END-EXEC.
512300191010
512400191010           MOVE SQLSTATE TO lc_sqlStates.
512500191010           IF NOT lncc_sqlSuccessful
512600191010               SET lncc_Err_38 TO TRUE
512700191010               MOVE lncc_ErrGettingRedemCode TO lc_sqlErrShortDESCR
512800191010               PERFORM SQL_Fail_Process
512900191010           END-IF.
513000191010
513100191010      * _________________________________
513200191010       Get_Trans_Proc_Seq.
513300191010      * _________________________________
513400191010           INITIALIZE ln_SELTransProcSeqNo.
513500191010
513600191010           EXEC SQL
513700191010              SELECT TRANS_PROC_SEQ
513800191010               INTO :ln_SELTransProcSeqNo
513900191010               FROM MFATRNTYP
514000191010               WHERE TRANS_TYPE_CODE = :lncc_SEL
514100191010           END-EXEC.
514200191010
514300191010           MOVE SQLSTATE TO lc_sqlStates.
514400191010           IF NOT lncc_sqlSuccessful
514500191010              SET lncc_Err_14 TO TRUE
514600191010              MOVE lncc_ErrReadingMFATRNTYP TO lc_sqlErrShortDESCR
514700191010              PERFORM SQL_Fail_Process
514800191010           END-IF.
514900191010
515000191010      * _________________________________
515100191010       Get_LDAP_Maximum.
515200191010      * _________________________________
515300191010           INITIALIZE ln_LDAPMax
515400191010                      ln_LDAPYTD
515500191010      *               RFS135764 - Begins - Add rule
515600191010                      Pc_LDAPMAXRule
515700191010      *               RFS135764 - Ends
515800191010                      lc_RestrictedYear.
515900191010
516000191010           INITIALIZE  pi_AccountNo   pi_TradeDate
516100191010                       pn_LDAPMaxAmt  pn_TotalPaidOut
516200191010      *127070 - Start.
516300191010      *                pc_SpecYearFlag pc_RestrictYearFlag.
516400191010                       pc_SpecYearFlag pc_RestrictYearFlag
516500191010                       pn_SDSPTaxablePortion.
516600191010      *127070 - End.
516700191010
516800191010           COMPUTE pi_AccountNo = ln_SaveAccountNo.
516900191010           COMPUTE pi_TradeDate = ln_SaveTradeDate.
517000191010      *    RFS135764 - Begins - Add rule
517100191010           MOVE ltr_RedemRule (li_TRNidx)
517200191010             TO Pc_LDAPMAXRule
517300191010      *    RFS135764 - Ends
517400191010
517500191010           CALL "FXLDAPMAX" USING  pi_AccountNo,
517600191010                                   pi_TradeDate,
517700191010      *    RFS135764 - Begins - Add rule
517800191010                                   Pc_LDAPMAXRule,
517900191010      *    RFS135764 - Ends
518000191010                                   pn_LDAPMaxAmt,
518100191010                                   pn_TotalPaidOut,
518200191010                                   pc_SpecYearFlag,
518300191010      *RFS127070 - Start.
518400191010      *                            pc_RestrictYearFlag.
518500191010                                   pc_RestrictYearFlag,
518600191010      *    RFS135764 - Begins - Add flag
518700191010      *                            pn_SDSPTaxablePortion.
518800191010                                   pn_SDSPTaxablePortion
518900191010                                   pc_FutureDAPExists
519000191010                                   .
519100191010      *    RFS135764 - Ends
519200191010      *RFS127070 - End.
519300191010
519400191010           MOVE pn_LDAPMaxAmt        TO  ln_LDAPMax.
519500191010           MOVE pn_TotalPaidOut      TO  ln_LDAPYTD.
519600191010           MOVE pc_RestrictYearFlag  TO  lc_RestrictedYear.
519700191010
519800191010      * _________________________________
519900191010       Validate_LDAP_Maximum.
520000191010      * _________________________________
520100191010      *_______________________________________________________________*
520200191010      * Check if LDAP maximum exceeded for DAP/LDAP within the group.
520300191010      *_______________________________________________________________*
520400191010           COMPUTE ln_LDAPYTD = ln_LDAPYTD + Pass-CDSC-Gross.
520500191010
520600200918      *RFS1102330 - Starts
520700200918           INITIALIZE Li_QualifyingDAPCount.
520800200918           MOVE ldh_AccountNo (li_TDidx, li_DAPidx)
520900200918                                          TO DS5_AccountNo.
521000200918           MOVE ldh_TradeDate (li_TDidx, li_DAPidx)
521100200918                                          TO DS5_TradeDate.
521200200918           PERFORM Call-FXRDSPDS5.
521300200921      *RFS1102330 - Ends
521400200918
521500191205      *RFS1020656 - START
521600191205020656*    IF ldh_RedemRule(li_TDidx, li_DAPidx) = lncc_12  OR
521700191205020656*      (ldh_RedemRule(li_TDidx, li_DAPidx) = lncc_11  AND
521800191205020656*       lc_RestrictedYear = lncc_Y)
521900200918      *RFS1102330 - Starts
522000200918020656*    IF(ldh_RedemRule(li_TDidx, li_DAPidx) = lncc_12  OR
522100200918           IF((ldh_RedemRule(li_TDidx, li_DAPidx) = lncc_12 AND
522200200918               li_QualifyingDAPCount = 0)                   OR
522300200921      *RFS1102330 - Ends
522400191205020656       (ldh_RedemRule(li_TDidx, li_DAPidx) = lncc_11  AND
522500191205020656        lc_RestrictedYear = lncc_Y))                  AND NOT
522600191205020656        ldh_SDSPYes(li_TDidx, li_DAPidx)
522700191205      *RFS1020656 - END
522800191010
52290019101080658            IF ln_LDAPYTD > ln_LDAPMax  AND
52300019101080658               ldh_WaiveDS5(li_TDidx, li_DAPidx) NOT = lncc_Y
523100191010                    MOVE lncc_DS5  TO  Pass-Rejection-Code
523200191010      *RFS181301 Begins
523300191010184329              MOVE lncc_DS5  TO  lc_RejectionCode
523400191010                    MOVE lc_RejectionCode
523500191010                      TO ltr_RejectCode(li_TRNidx)
523600191010                    PERFORM Find_and_Reject_Group
523700191010                       VARYING li_TDidx FROM 1 BY 1
523800191010                          UNTIL li_TDidx  > li_LastTDidx
523900191010      *RFS181301 Ends
524000191010                 END-IF
524100191010           END-IF.
524200191010
524300191010      * RFS 80658 - begins.
524400191010      * _________________________________
524500191010      *Get_Repayment_Info.
524600191010      * _________________________________
524700191010      *    INITIALIZE ln_RepaymentDate
524800191010      *               ln_RepaymentReason.
524900191010      *
525000191010      *    EXEC SQL
525100191010      *      SELECT A.Repayment_Date,
525200191010      *             B.Repayment_Reason_Code
525300191010      *
525400191010      *        INTO :ln_RepaymentDate,
525500191010      *             :ln_RepaymentReason
525600191010      *
525700191010      *        FROM MFATRNHDP A,
525800191010      *             MFATRNRRP B
525900191010      *
526000191010      *       WHERE A.Placement_Date = B.Placement_Date
526100191010      *         AND A.Trans_No       = B.Trans_No
526200191010      *         AND A.Placement_Date = :lc2_PlacementDate
526300191010      *         AND A.Trans_No       = :lc2_TransNo
526400191010      *       FETCH FIRST ROW ONLY
526500191010      *    END-EXEC.
526600191010      *
526700191010      *    MOVE SQLSTATE TO lc_sqlStates.
526800191010      *    EVALUATE TRUE
526900191010      *      WHEN lncc_sqlSuccessful
527000191010      *       MOVE ln_RepaymentDate   TO ltr_RepaymentDate(li_TRNidx)
527100191010      *       MOVE ln_RepaymentReason TO ltr_RepaymentReason(li_TRNidx)
527200191010      *      WHEN lncc_sqlEnd
527300191010      *        CONTINUE
527400191010      *      WHEN OTHER
527500191010      *        SET lncc_Err_40 TO TRUE
527600191010      *        MOVE lncc_ErrGettingRPinfo   TO lc_sqlErrShortDESCR
527700191010      *        PERFORM SQL_Fail_Process
527800191010      *    END-EVALUATE.
527900191010      * RFS 80658 - ends.
528000191010
528100200918      * RFS1102330 - Starts *
528200200918      *-----------------*
528300200918        Call-FXRDSPDS5.
528400200918      *-----------------*
528500200918
528600200918           CALL "FXRDSPDS5" USING  DS5_AccountNo,
528700200918                                   DS5_TradeDate,
528800200918                                   DS5_HSTCount,
528900200918                                   DS5_PNDCount,
529000200918                                   DS5_NotionalCount.
529100200918
529200200918           COMPUTE Li_QualifyingDAPCount = DS5_HSTCount +
529300200918                                           DS5_PNDCount +
529400200918                                           DS5_NotionalCount.
529500200918      * RFS1102330 - End *
529600200918
529700191010      * _________________________________
529800191010       Get_AHA_Amounts.
529900191010      * _________________________________
530000191010           INITIALIZE  ln_AHAStartDate
530100191010                       ln_AHAEndDate
530200191010                       ln_TotalAHA
530300191010                       ln_TotalGrant
530400191010                       ln_TotalBond
530500191010                       ln_TotalCapital
53060019101091272                  ln_TotalRollover
53070019101084456 *                ln_TotAHAGrant
53080019101084456 *                ln_TotAHABond
530900191010                       ln_AHAGrantLeft
531000191010                       ln_AHABondLeft
531100191010                       ln_TotalAfter
531200191010                       ln_GrantAfter
531300191010                       ln_BondAfter
531400191010                       pi_RDSAHAAccountNo
531500191010                       pc_RDSAHACalledBy
531600191010                       pi_RDSAHATradeDate
531700191010                       pi_RDSAHATradeDate2
531800191010                       pn_RDSAHAAmount
531900191010                       pn_RDSAHAGrantAmt
532000191010                       pn_RDSAHABondAmt
532100191010                       pi_RDSAHALastRepaymentDate
532200191010                       pn_RDSAHATotalGBAfterTD
532300191010                       pn_RDSAHAGrantAfterTD
532400191010                       pn_RDSAHABondAfterTD
532500191010                       pn_RDSNETGrantAmt
532600191010                       pn_RDSNETBondAmt
532700191010      *RFS91272 - STARTS
532800191010      *                pn_RDSNetCapitalAmt.
532900191010                       pn_RDSNetCapitalAmt
533000191010                       pn_RDSRolloverAmt.
533100191010      *RFS91272 - ENDS
533200191010      *RFS143702 - START
533300191010           INITIALIZE  li_OrigMaxAHA.
533400191010      *RFS143702 - END
533500191010      *_______________________________________________________________*
533600191010      * For Closure, the start date is the repayment date.
533700191010      *_______________________________________________________________*
533800191010           IF lb_ClosureTriggerTrue
533900191010              MOVE ltr_RepaymentDate(li_TRNidx) TO ln_AHAStartDate
534000191010              MOVE ZEROS                        TO ln_AHAEndDate
534100191010           ELSE
534200191010      *_______________________________________________________________*
534300191010      * Set the start date to the trade date of the current DAP.
534400191010      * Set the end date to the trade date of the last DAP.
534500191010      *_______________________________________________________________*
534600191010              MOVE ln_SaveTradeDate          TO  ln_AHAStartDate
534700191010              MOVE ln_LastTradeDate          TO  ln_AHAEndDate
534800191010      *_______________________________________________________________*
534900191010      * In case there is a manual AHA, use the repayment date of that
535000191010      * AHA if it falls in between the start and end date that was set
535100191010      * in the previous steps. If there is more than one, use the one
535200191010      * that is closer to the start date.
535300191010      *_______________________________________________________________*
535400191010              PERFORM  VARYING li_Idx FROM 1 BY 1
535500191010                       UNTIL li_Idx  > li_LastTRNidx
535600191010
535700191010                IF ltr_RepaymentDate(li_Idx) <= ln_AHAStartDate  AND
53580019101080658              ltr_RepaymentDate(li_Idx) >  ln_AHAEndDate    AND
53590019101080658              ltr_AHA(li_Idx)
536000191010                     MOVE ltr_RepaymentDate(li_Idx) TO ln_AHAEndDate
536100191010                END-IF
536200191010              END-PERFORM
536300191010           END-IF.
536400191010
536500191010
536600191010           COMPUTE pi_RDSAHAAccountNo   =  ln_SaveAccountNo.
536700191010           COMPUTE pi_RDSAHATradeDate   =  ln_AHAStartDate.
536800191010           COMPUTE pi_RDSAHATradeDate2  =  ln_AHAEndDate.
536900191010
537000191010           CALL "FXRDSPAHA" USING  pi_RDSAHAAccountNo,
537100191010                                   pc_RDSAHACalledBy,
537200191010                                   pi_RDSAHATradeDate,
537300191010                                   pi_RDSAHATradeDate2,
537400191010                                   pn_RDSAHAAmount,
537500191010                                   pn_RDSAHAGrantAmt,
537600191010                                   pn_RDSAHABondAmt,
537700191010                                   pi_RDSAHALastRepaymentDate,
537800191010                                   pn_RDSAHATotalGBAfterTD,
537900191010                                   pn_RDSAHAGrantAfterTD,
538000191010                                   pn_RDSAHABondAfterTD,
538100191010                                   pn_RDSNETGrantAmt,
538200191010                                   pn_RDSNETBondAmt,
538300191010      *RFS91272 - STARTS
538400191010      *                            pn_RDSNetCapitalAmt.
538500191010                                   pn_RDSNetCapitalAmt,
538600191010                                   pn_RDSRolloverAmt.
538700191010      *RFS91272 - ENDS
538800191010
538900191010           MOVE  pn_RDSNETGrantAmt        TO  ln_TotalGrant.
539000191010           MOVE  pn_RDSNETBondAmt         TO  ln_TotalBond.
539100191010           MOVE  pn_RDSNetCapitalAmt      TO  ln_TotalCapital.
53920019101091272      MOVE  pn_RDSRolloverAmt        TO  ln_TotalRollover.
539300191010
53940019101084456 *_______________________________________________________________*
53950019101084456 * Accumulate AHA Grand/Bond to be paid out.
53960019101084456 * The total AHA amounts up to the current trade date, including
53970019101084456 * previous trade date AHAs need to be stored in trans approval
53980019101084456 * in order for TRNPST to correctly perform break-down calculation
53990019101084456 *_______________________________________________________________*
54000019101084456 *    MOVE  pn_RDSAHAGrantAmt        TO  ln_TotAHAGrant.
54010019101084456 *    MOVE  pn_RDSAHABondAmt         TO  ln_TotAHABond.
540200191010      *    RFS123925 - dm - Begins
540300191010      *                     Don't accumulate AHA if after 20140101
54040019101084456 *    COMPUTE ln_TotAHAGrant = ln_TotAHAGrant + pn_RDSAHAGrantAmt.
54050019101084456 *    COMPUTE ln_TotAHABond  = ln_TotAHABond  + pn_RDSAHABondAmt.
540600191010           IF pi_RDSAHATradeDate < Lnci_LegChg20140101
540700191010            COMPUTE ln_TotAHAGrant = ln_TotAHAGrant + pn_RDSAHAGrantAmt
540800191010            COMPUTE ln_TotAHABond  = ln_TotAHABond  + pn_RDSAHABondAmt
540900191010           ELSE
541000191010            COMPUTE ln_TotAHAGrant = pn_RDSAHAGrantAmt
541100191010            COMPUTE ln_TotAHABond  = pn_RDSAHABondAmt
541200191010           END-IF.
541300191010      *    RFS123925 - dm - Ends
54140019101084456      MOVE  pn_RDSAHAGrantAmt        TO  ln_AHAGrantLeft
54150019101084456      MOVE  pn_RDSAHABondAmt         TO  ln_AHABondLeft
541600191010           MOVE  pn_RDSAHAGrantAfterTD    TO  ln_GrantAfter.
541700191010           MOVE  pn_RDSAHABondAfterTD     TO  ln_BondAfter.
541800191010
541900191010      * RFS 84456 - begins.
542000191010      *_______________________________________________________________*
542100191010      * For Closure, if the repayment date was back dated, call AHA
542200191010      * function again to get the notional values as of as-at-date
542300191010      * since the AHA total will include grant/bond purchased after
542400191010      * the repayment date.
542500191010      *_______________________________________________________________*
542600191010           IF lb_ClosureTriggerTrue AND
542700191010              ltr_RepaymentDate(li_TRNidx) NOT = li_AsAtDate
542800191010
542900191010              COMPUTE pi_RDSAHATradeDate   =  li_AsAtDate
543000191010              COMPUTE pi_RDSAHATradeDate2  =  0
543100191010
543200191010              CALL "FXRDSPAHA" USING  pi_RDSAHAAccountNo,
543300191010                                      pc_RDSAHACalledBy,
543400191010                                      pi_RDSAHATradeDate,
543500191010                                      pi_RDSAHATradeDate2,
543600191010                                      pn_RDSAHAAmount,
543700191010                                      pn_RDSAHAGrantAmt,
543800191010                                      pn_RDSAHABondAmt,
543900191010                                      pi_RDSAHALastRepaymentDate,
544000191010                                      pn_RDSAHATotalGBAfterTD,
544100191010                                      pn_RDSAHAGrantAfterTD,
544200191010                                      pn_RDSAHABondAfterTD,
544300191010                                      pn_RDSNETGrantAmt,
544400191010                                      pn_RDSNETBondAmt,
544500191010      *RFS91272 - begin
544600191010      *                               pn_RDSNetCapitalAmt
544700191010                                      pn_RDSNetCapitalAmt,
544800191010                                      pn_RDSRolloverAmt
544900191010      *RFS91272 - end
545000191010              MOVE  pn_RDSNETGrantAmt        TO  ln_TotalGrant
545100191010              MOVE  pn_RDSNETBondAmt         TO  ln_TotalBond
545200191010              MOVE  pn_RDSNetCapitalAmt      TO  ln_TotalCapital
54530019101091272         MOVE  pn_RDSRolloverAmt        TO  ln_TotalRollover
545400191010
545500191010           END-IF.
545600191010      * RFS 84456 - ends.
545700191010
545800191010           IF lb_ClosureTriggerTrue
545900191010              COMPUTE ln_TotalAHA   = ln_TotAHAGrant + ln_GrantAfter +
546000191010                                      ln_TotAHABond  + ln_BondAfter
546100191010              COMPUTE ln_TotAHAGrant  = ln_TotAHAGrant + ln_GrantAfter
546200191010              COMPUTE ln_TotAHABond   = ln_TotAHABond  + ln_BondAfter
54630019101084456         MOVE ln_TotAHAGrant  TO  ln_AHAGrantLeft
54640019101084456         MOVE ln_TotAHABond   TO  ln_AHABondLeft
546500191010           ELSE
54660019101084456 *       COMPUTE ln_TotalAHA    = ln_TotAHAGrant  +  ln_TotAHABond
54670019101084456         COMPUTE ln_TotalAHA    = ln_AHAGrantLeft + ln_AHABondLeft
546800191010              COMPUTE ln_TotalAfter  = ln_GrantAfter   +  ln_BondAfter
546900191010           END-IF.
547000191010
54710019101084456 *    MOVE ln_TotAHAGrant  TO  ln_AHAGrantLeft.
54720019101084456 *    MOVE ln_TotAHABond   TO  ln_AHABondLeft.
547300191010143702     MOVE ln_TotalAHA     TO  li_OrigMaxAHA.
547400191010
547500191010      * _________________________________
547600191010       Get_Account_MV.
547700191010      * _________________________________
547800191010           INITIALIZE ln_AccountMV
547900191010      *               RFS68035.33 - Begins - Initialize PriceDate
548000191010                      ln_PriceDate
548100191010      *               RFS68035.33 - Ends
548200191010                      ln_DAPDate.
548300191010
548400191010      *    RFS68035.33 - Begins - Set PriceDate
548500191010      *    MOVE ldh_TD(li_TDidx) TO ld_FormatD.
548600191010
548700191010           IF ldh_TransNo (li_TDidx, li_DAPidx) >  0  AND
548800191010              ldh_AHA     (li_TDidx, li_DAPidx)
54890019101084456          MOVE li_AsAtDate
549000191010                 TO ld_FormatD  ln_PriceDate
549100191010           ELSE
549200191010               MOVE ldh_TD(li_TDidx) TO ld_FormatD
549300191010                                        ln_PriceDate
549400191010           END-IF.
549500191010
549600191010      *    RFS68035.33 - Ends
549700210929      *RFS1116830 Begins
549800210929      *    MOVE FUNCTION SUBTRACT-DURATION
549900210929      *        (ld_FormatD DAYS lnci_1) TO ln_DAPDate.
550000191010
550100210929           MOVE ld_FormatD  TO ln_DAPDate.
550200210929      *RFS1116830 Ends
550300191010      * RFS 84456 - begins.
550400191010      *    EXEC SQL
550500191010      *       SELECT  COALESCE(SUM(Get_Mkv_T
550600191010      *    RFS68035.33 - Begins - Use PriceDate
550700191010      *              (:ln_DAPDate, ACCIVP.Account_No,
550800191010      *              (:ln_DAPDate,
550900191010      *               :ln_PriceDate, ACCIVP.Account_No,
551000191010      *    RFS68035.33 - Ends
551100191010      *               ACCIVP.Investment_Code, INVP.Currency)),0)
551200191010      *
551300191010      *         INTO :ln_AccountMV
551400191010      *
551500191010      *         FROM  MFAACCIVP ACCIVP, MFAINVP INVP
551600191010      *        WHERE  ACCIVP.Account_No = :ln_SaveAccountNo
551700191010      *          AND  ACCIVP.Investment_Code = INVP.Investment_Code
551800191010      *    END-EXEC.
551900191010
552000191010      *    MOVE SQLSTATE TO lc_sqlStates.
552100191010      *    EVALUATE TRUE
552200191010      *      WHEN lncc_sqlSuccessful
552300191010      *        CONTINUE
552400191010      *      WHEN lncc_sqlEnd
552500191010      *        CONTINUE
552600191010      *      WHEN OTHER
552700191010      *        SET lncc_Err_41 TO TRUE
552800191010      *        MOVE lncc_ErrGettingAccountMV  TO lc_sqlErrShortDESCR
552900191010      *        PERFORM SQL_Fail_Process
553000191010      *    END-EVALUATE.
553100191010
553200191010           INITIALIZE pi_GETMVTradeDate
553300191010                      pi_GETMVPriceDate
553400191010                      pi_GETMVAccountNo
553500191010                      pc_GETMVInvestmentCode
553600191010                      pn_GETMVMarketValue.
553700191010
553800191010           COMPUTE pi_GETMVTradeDate  =  ln_DAPDate.
553900191010           COMPUTE pi_GETMVPriceDate  =  ln_PriceDate.
554000191010           COMPUTE pi_GETMVAccountNo  =  ln_SaveAccountNo.
554100191010
554200191010      * RFS 98866 - Start
554300191010           PERFORM CALL_FXGETMKVT.
554400191010      * Moved the below code to the new routine CALL_FXGETMKVT
554500191010
554600191010      *    CALL "FXGETMKVT" USING  pi_GETMVTradeDate
554700191010      *                            pi_GETMVPriceDate
554800191010      *                            pi_GETMVAccountNo
554900191010      *                            pc_GETMVInvestmentCode
555000191010      *                            pn_GETMVMarketValue.
555100191010
555200191010      *    MOVE pn_GETMVMarketValue  TO  ln_AccountMV.
555300191010
555400191010      * RFS 98866 - End
555500191010      * RFS 84456 - ends.
555600191010
555700191010      * _________________________________
555800191010       Get_HighestMV_Fund.
555900191010      * _________________________________
556000191010           EXEC SQL
556100191010            DELETE FROM WKACCIVP WHERE ACCOUNT_NO = :ln_SaveAccountNo
556200191010           END-EXEC.
556300191010
556400191010           MOVE SQLSTATE TO lc_sqlStates.
556500191010           EVALUATE TRUE
556600191010             WHEN lncc_sqlSuccessful
556700191010               CONTINUE
556800191010             WHEN lncc_sqlEnd
556900191010               CONTINUE
557000191010             WHEN OTHER
557100191010               SET lncc_Err_42 TO TRUE
557200191010               MOVE lncc_ErrDeletingWKACCIVP TO lc_sqlErrShortDESCR
557300191010               PERFORM SQL_Fail_Process
557400191010           END-EVALUATE.
557500191010
557600191010           EXEC SQL
557700191010            INSERT INTO WKACCIVP
557800191010                   (ACCOUNT_NO,
557900191010                    INVESTMENT_CODE,
558000191010                    INDUSTRY_FUND_CODE,
558100191010                    MARKET_VALUE)
558200191010              (SELECT Accivp.Account_No, Accivp.Investment_Code,
558300191010                    Invp.Industry_Fund_Code,
558400191010                    DEC(ROUND(Accivp.Curr_Unit_Bal *
558500191010                        COALESCE(
558600191010                      CASE WHEN InvuppY.Unit_Price > 0
558700191010                           THEN InvuppY.Unit_Price
558800191010                           ELSE
558900191010                           InvuppS.Unit_Price
559000191010                      END, 0),2),15,2)
559100191010
559200191010               FROM MFAACCIVP Accivp, MFAINVP Invp
559300191010               LEFT OUTER JOIN MFAINVUPP InvuppY
559400191010                 ON InvuppY.Trade_Date = :li_AsAtDate               AND
559500191010                    InvuppY.Investment_Code = Invp.Investment_Code  AND
559600191010                    InvuppY.Distribution_Flag = :lncc_Y
559700191010               LEFT OUTER JOIN Mfainvupp InvuppS
559800191010                 ON InvuppS.Trade_Date = :li_AsAtDate               AND
559900191010                    InvuppS.Investment_Code = Invp.Investment_Code  AND
560000191010                    InvuppS.Distribution_Flag = :lncc_Space
560100191010
560200191010              WHERE Accivp.Investment_Code = Invp.Investment_Code
560300191010                AND Accivp.Account_No      = :ln_SaveAccountNo)
560400191010           END-EXEC.
560500191010
560600191010           MOVE SQLSTATE TO lc_sqlStates.
560700191010           EVALUATE TRUE
560800191010             WHEN lncc_sqlSuccessful
560900191010               CONTINUE
561000191010             WHEN OTHER
561100191010               SET lncc_Err_43 TO TRUE
561200191010               MOVE lncc_ErrInsertingWKACCIVP TO lc_sqlErrShortDESCR
561300191010               PERFORM SQL_Fail_Process
561400191010           END-EVALUATE.
561500191010
561600191010           INITIALIZE  lc_HighestMVInv
561700191010                       lc_IndFundCode
561800191010                       ln_MarketValue.
561900191010
562000191010           EXEC SQL
562100191010             SELECT A.Investment_Code,
562200191010                    A.Industry_Fund_Code,
562300191010                    A.Market_Value
562400191010
562500191010               INTO :lc_HighestMVInv,
562600191010                    :lc_IndFundCode,
562700191010                    :ln_MarketValue
562800191010
562900191010               FROM WKACCIVP A
563000191010              WHERE A.Account_No  = :ln_SaveAccountNo
563100191010              ORDER BY A.Account_No, A.Market_Value DESC
563200191010              FETCH FIRST ROW ONLY
563300191010           END-EXEC.
563400191010
563500191010           MOVE SQLSTATE TO lc_sqlStates.
563600191010           EVALUATE TRUE
563700191010             WHEN lncc_sqlSuccessful
563800191010               CONTINUE
563900191010             WHEN lncc_sqlEnd
564000191010               CONTINUE
564100191010             WHEN OTHER
564200191010               SET lncc_Err_44 TO TRUE
564300191010               MOVE lncc_ErrGettingHighestMV  TO lc_sqlErrShortDESCR
564400191010               PERFORM SQL_Fail_Process
564500191010           END-EVALUATE.
564600191010
564700191010      * _________________________________
564800191010       Check_Unit_Bal.
564900191010      * _________________________________
565000191010           INITIALIZE  ln_UnitBal.
565100191010
565200191010           EXEC SQL
565300191010             SELECT A.Curr_Unit_Bal
565400191010
565500191010               INTO :ln_UnitBal
565600191010
565700191010               FROM MFAACCIVP A
565800191010              WHERE A.Account_No       = :ln_SaveAccountNo
565900191010                AND A.Investment_Code  = :lc_InvCode
566000191010              FETCH FIRST ROW ONLY
566100191010           END-EXEC.
566200191010
566300191010           MOVE SQLSTATE TO lc_sqlStates.
566400191010           EVALUATE TRUE
566500191010             WHEN lncc_sqlSuccessful
566600191010               CONTINUE
566700191010             WHEN lncc_sqlEnd
566800191010               CONTINUE
566900191010             WHEN OTHER
567000191010               SET  lncc_Err_64 TO TRUE
567100191010               MOVE lncc_ErrGettingUnitBal  TO lc_sqlErrShortDESCR
567200191010               PERFORM SQL_Fail_Process
567300191010           END-EVALUATE.
567400191010
567500191010      * _________________________________
567600191010       Get_Header_No.
567700191010      * _________________________________
567800191010           INITIALIZE ln_CurrentHeaderNo.
567900191010           MOVE lncc_AHANumType          TO  Pass-CTLP-Control-Code.
568000191010           SET  PASS-CTLP-ADD-0          TO  TRUE.
568100191010           SET  PASS-CTLP-ACTION-GETDTA  TO  TRUE.
568200191010
568300191010           CALL "FXCTLP" USING  Pass-CTLP-Control-Code,
568400191010                                Pass-CTLP-NEXT-NUMBER,
568500191010                                Pass-CTLP-Add-NUMBER,
568600191010                                Pass-CTLP-Action-Code,
568700191010                                Retn-CTLP-NEXT-NUMBER,
568800191010                                Retn-CTLP-Code.
568900191010
569000191010
569100191010           IF RETN-CTLP-CODE-OK
569200191010              MOVE Retn-CTLP-NEXT-NUMBER TO ln_CurrentHeaderNo
569300191010           ELSE
569400191010              SET lncc_Err_45 TO TRUE
569500191010              STRING lncc_GetAHANum           DELIMITED BY "  "
569600191010                     " "                      DELIMITED BY SIZE
569700191010                     RETN-CTLP-CODE           DELIMITED BY SIZE
569800191010              INTO Ws-Sql-Err-Short-Descr
569900191010              PERFORM SQL_Fail_Process
570000191010           END-IF.
570100191010
570200191010      * _________________________________
570300191010       Update_Header_No.
570400191010      * _________________________________
570500191010           MOVE lncc_AHANumType          TO  Pass-CTLP-Control-Code.
570600191010           MOVE ln_HeaderCnt             TO  Pass-CTLP-Add-NUMBER.
570700191010           SET  PASS-CTLP-ACTION-GETUPD  TO  TRUE.
570800191010
570900191010           CALL "FXCTLP" USING  Pass-CTLP-Control-Code,
571000191010                                Pass-CTLP-NEXT-NUMBER,
571100191010                                Pass-CTLP-Add-NUMBER,
571200191010                                Pass-CTLP-Action-Code,
571300191010                                Retn-CTLP-NEXT-NUMBER,
571400191010                                Retn-CTLP-Code.
571500191010
571600191010           IF NOT RETN-CTLP-CODE-OK
571700191010              SET lncc_Err_46 TO TRUE
571800191010              STRING lncc_UpdateAHANum        DELIMITED BY "  "
571900191010                     " "                      DELIMITED BY SIZE
572000191010                     RETN-CTLP-CODE           DELIMITED BY SIZE
572100191010                     INTO Ws-Sql-Err-Short-Descr
572200191010              PERFORM SQL_Fail_Process
572300191010           END-IF.
572400191010
572500191010      * _________________________________
572600191010       Get_Batch_No.
572700191010      * _________________________________
572800191010           INITIALIZE ln_CurrentBatchNo
572900191010                      Pass-CTLP-Control-Code
573000191010                      Pass-CTLP-NEXT-NUMBER
573100191010                      Pass-CTLP-Add-NUMBER
573200191010                      Pass-CTLP-Action-Code
573300191010                      Retn-CTLP-Code.
573400191010
573500191010           MOVE lncc_SBTNumType          TO  Pass-CTLP-Control-Code.
573600191010           SET  PASS-CTLP-ADD-1          TO  TRUE.
573700191010           SET  PASS-CTLP-ACTION-GETUPD  TO  TRUE.
573800191010
573900191010           CALL "FXCTLP" USING  Pass-CTLP-Control-Code,
574000191010                                Pass-CTLP-NEXT-NUMBER,
574100191010                                Pass-CTLP-Add-NUMBER,
574200191010                                Pass-CTLP-Action-Code,
574300191010                                Retn-CTLP-NEXT-NUMBER,
574400191010                                Retn-CTLP-Code.
574500191010
574600191010           IF RETN-CTLP-CODE-OK
574700191010              MOVE Retn-CTLP-NEXT-NUMBER TO ln_CurrentBatchNo
574800191010           ELSE
574900191010              SET lncc_Err_47 TO TRUE
575000191010              STRING lncc_GetSBTNum           DELIMITED BY "  "
575100191010                     " "                      DELIMITED BY SIZE
575200191010                     RETN-CTLP-CODE           DELIMITED BY SIZE
575300191010              INTO Ws-Sql-Err-Short-Descr
575400191010              PERFORM SQL_Fail_Process
575500191010           END-IF.
575600191010
575700191010      * _________________________________
575800191010       Get_Trans_No.
575900191010      * _________________________________
576000191010           INITIALIZE ln_CurrentTransNo.
576100191010           MOVE lncc_STRNumType          TO  Pass-CTLP-Control-Code.
576200191010           SET  PASS-CTLP-ADD-0          TO  TRUE.
576300191010           SET  PASS-CTLP-ACTION-GETDTA  TO  TRUE.
576400191010
576500191010           CALL "FXCTLP" USING  Pass-CTLP-Control-Code,
576600191010                                Pass-CTLP-NEXT-NUMBER,
576700191010                                Pass-CTLP-Add-NUMBER,
576800191010                                Pass-CTLP-Action-Code,
576900191010                                Retn-CTLP-NEXT-NUMBER,
577000191010                                Retn-CTLP-Code.
577100191010
577200191010
577300191010           IF RETN-CTLP-CODE-OK
577400191010              MOVE Retn-CTLP-NEXT-NUMBER TO ln_CurrentTransNo
577500191010           ELSE
577600191010              SET lncc_Err_48 TO TRUE
577700191010              STRING lncc_GetSTRNum           DELIMITED BY "  "
577800191010                     " "                      DELIMITED BY SIZE
577900191010                     RETN-CTLP-CODE           DELIMITED BY SIZE
578000191010              INTO Ws-Sql-Err-Short-Descr
578100191010              PERFORM SQL_Fail_Process
578200191010           END-IF.
578300191010
578400191010      * _________________________________
578500191010       Update_Trans_No.
578600191010      * _________________________________
578700191010           MOVE lncc_STRNumType         TO  Pass-CTLP-Control-Code.
578800191010           MOVE ln_BatchTransCnt        TO  Pass-CTLP-Add-NUMBER.
578900191010           SET PASS-CTLP-ACTION-GETUPD  TO  TRUE.
579000191010
579100191010           CALL "FXCTLP" USING  Pass-CTLP-Control-Code,
579200191010                                Pass-CTLP-NEXT-NUMBER,
579300191010                                Pass-CTLP-Add-NUMBER,
579400191010                                Pass-CTLP-Action-Code,
579500191010                                Retn-CTLP-NEXT-NUMBER,
579600191010                                Retn-CTLP-Code.
579700191010
579800191010           IF NOT RETN-CTLP-CODE-OK
579900191010              SET lncc_Err_49 TO TRUE
580000191010              STRING lncc_UpdateSTRNum        DELIMITED BY "  "
580100191010                     " "                      DELIMITED BY SIZE
580200191010                     RETN-CTLP-CODE           DELIMITED BY SIZE
580300191010                     INTO Ws-Sql-Err-Short-Descr
580400191010              PERFORM SQL_Fail_Process
580500191010           END-IF.
580600191010
580700191010      * _________________________________
580800191010       Create_Batch_Header.
580900191010      * _________________________________
581000191010           INITIALIZE MFABCHHDP OF lc_MFABCHHDP.
581100191010
581200191010           COMPUTE ln_BatchTotalAmt = ln_BatchTotalAmt * -1.
581300191010
581400191010           MOVE li_AsAtDate        TO Batch-Date       OF lc_MFABCHHDP.
581500191010           MOVE ln_CurrentBatchNo  TO Batch-Code       OF lc_MFABCHHDP.
581600191010           MOVE lncc_SYSAHA        TO Batch-Type-Code  OF lc_MFABCHHDP.
581700191010           MOVE ln_BatchTotalAmt   TO Trans-Dollar-Amt OF lc_MFABCHHDP
581800191010           MOVE ln_BatchTransCnt   TO Match-Total-Transactions
581900191010                                                       OF lc_MFABCHHDP.
582000191010           MOVE lncc_RDSPPRE       TO Batch-Created-By OF lc_MFABCHHDP.
582100191010           MOVE lncc_PEND          TO Batch-Status     OF lc_MFABCHHDP.
582200191010           MOVE lncc_N             TO Batch-Force-Flag OF lc_MFABCHHDP.
582300191010           MOVE lncc_CAD           TO Currency-DDS     OF lc_MFABCHHDP.
582400191010
582500191010           EXEC SQL
582600191010             INSERT INTO MFABCHHDP
582700191010             VALUES :MFABCHHDP
582800191010           END-EXEC.
582900191010
583000191010           MOVE SQLSTATE TO lc_sqlStates.
583100191010           IF NOT lncc_sqlSuccessful
583200191010              SET lncc_Err_50 TO TRUE
583300191010              MOVE lncc_ErrInsertingMFABCHHDP TO lc_sqlErrShortDESCR
583400191010              PERFORM SQL_Fail_Process
583500191010           END-IF.
583600191010
583700191010      * _________________________________
583800191010       Generate_MFATRNP.
583900191010      * _________________________________
584000191010           INITIALIZE MFATRNP OF lc_MFATRNP.
584100191010
584200191010           INITIALIZE li_ParmSysTime.
584300191010           MOVE FUNCTION CURRENT-DATE (9:4) to li_ParmSysTime.
584400191010
584500191010R97154     IF ln_BatchTransCnt NOT = 0
584600191010R97154        ADD 1 TO ln_CurrentTransNo
584700191010R97154     END-IF.
584800191010
584900191010           COMPUTE ln_BatchTransCnt = ln_BatchTransCnt + 1.
585000191010           COMPUTE ln_BatchTotalAmt = ln_BatchTotalAmt  +
585100191010                   ldh_GrossAmt(li_TDidx, li_DAPidx).
585200191010
585300191010R97154*    ADD 1 TO ln_CurrentTransNo
585400191010
585500191010           MOVE  li_AsAtDate          TO  Placement-Date OF lc_MFATRNP
585600191010                                          Batch-Date     OF lc_MFATRNP.
585700191010           MOVE  ln_CurrentTransNo    TO  Trans-No       OF lc_MFATRNP.
585800191010           MOVE  ln_CurrentBatchNo    TO  Batch-Code     OF lc_MFATRNP.
585900191010           MOVE  ln_SELTransProcSeqNo TO  Trans-Seq-No   OF lc_MFATRNP.
586000191010           MOVE  SPACES         TO Rejection-Code        OF lc_MFATRNP.
586100191010           MOVE  lncc_G         TO Settled-Gross-Or-Net  OF lc_MFATRNP.
586200191010           MOVE  lncc_SEL       TO Trans-Type-Code       OF lc_MFATRNP.
586300191010           MOVE  lncc_DIR       TO Trans-Origin-Code     OF lc_MFATRNP.
586400191010           MOVE  lncc_PND       TO Trans-Status-Code     OF lc_MFATRNP .
586500191010      *rfs170212 - begin
586600191010      *    MOVE  lncc_Y         TO Suppress-Confirmation OF lc_MFATRNP.
586700191010           MOVE  lncc_N         TO Suppress-Confirmation OF lc_MFATRNP.
586800191010      *rfs170212 - end
586900191010           MOVE  lncc_RDSPPRE   TO Entered-By            OF lc_MFATRNP.
587000191010           MOVE  li_ParmSystime TO Time-Placed           OF lc_MFATRNP.
587100191010           MOVE  lncc_N  TO Original-Documents-Recvd     OF lc_MFATRNP
587200191010                            Receipted                    OF lc_MFATRNP
587300191010R88074*                     Payment-Type-Code            OF lc_MFATRNP
587400191010                            Hidden-Trans                 OF lc_MFATRNP.
587500191010
587600210719      *RFS186761 Begins
587700210719           IF Lb_DeceasedClosureYes
587800210719              MOVE Lncc_DEAD TO  Reversal-Code OF lc_MFATRNP
587900210719           END-IF.
588000210719      *RFS186761 Ends
588100210719
588200191010           MOVE  ldh_TradeDate      (li_TDidx, li_DAPidx)
588300191010             TO  Trade-Date         OF lc_MFATRNP.
588400191010           MOVE  ldh_GrossOrNet     (li_TDidx, li_DAPidx)
588500191010             TO  Gross-Or-Net       OF lc_MFATRNP.
588600191010           MOVE  ldh_AccountNo      (li_TDidx, li_DAPidx)
588700191010             TO  Account-No         OF lc_MFATRNP.
588800191010           MOVE  ldh_InvCode        (li_TDidx, li_DAPidx)
588900191010             TO  Investment-Code    OF lc_MFATRNP.
589000191010           MOVE  ldh_IndFundCode    (li_TDidx, li_DAPidx)
589100191010             TO  Industry-Fund-Code OF lc_MFATRNP.
589200191010           MOVE  ldh_GrossAmt       (li_TDidx, li_DAPidx)
589300191010             TO  Gross-Amt          OF lc_MFATRNP.
589400191010           MOVE  ldh_NetAmt         (li_TDidx, li_DAPidx)
589500191010             TO  Net-Amt            OF lc_MFATRNP.
589600191010           MOVE  ldh_DealerCode     (li_TDidx, li_DAPidx)
589700191010             TO  Dealer-Code        OF lc_MFATRNP.
589800191010           MOVE  ldh_DealerRepCode  (li_TDidx, li_DAPidx)
589900191010             TO  Dealer-Rep-Code    OF lc_MFATRNP.
590000191010           MOVE  ldh_RedemCode      (li_TDidx, li_DAPidx)
590100191010             TO  Contr-Redem-Code   OF lc_MFATRNP                      .
590200191010           MOVE  ldh_SplitOption    (li_TDidx, li_DAPidx)
590300191010             TO  Split-Option-Code  OF lc_MFATRNP                      .
590400191010R88074     MOVE  ldh_PaymentType    (li_TDidx, li_DAPidx)
590500191010  |          TO  Payment-Type-Code  OF lc_MFATRNP.
590600191010  |
590700191010  |        IF  ldh_DAP(li_TDidx, li_DAPidx)         AND
590800191010  |           (ldh_PayTypeCheque(li_TDidx, li_DAPidx) OR
590900191010  |            ldh_PayTypeEFT   (li_TDidx, li_DAPidx))
591000191010  |            PERFORM Carry_Over_Payment_Info
591100191010R88074     END-IF.
591200191010
591300191010           EXEC SQL
591400191010             INSERT INTO MFATRNP
591500191010             VALUES :MFATRNP
591600191010           END-EXEC.
591700191010
591800191010           MOVE SQLSTATE TO lc_sqlStates.
591900191010           IF NOT lncc_sqlSuccessful
592000191010              SET lncc_Err_51 TO TRUE
592100191010              MOVE lncc_ErrInsertingMFATRNP TO lc_sqlErrShortDESCR
592200191010              PERFORM SQL_Fail_Process
592300191010           END-IF.
592400191010
592500191010      * _________________________________
592600191010       Generate_MFATRNREP.
592700191010      * _________________________________
592800191010           INITIALIZE MFATRNREP OF lc_MFATRNREP.
592900191010
593000191010           MOVE li_AsAtDate       TO  Placement-Date   OF lc_MFATRNREP.
593100191010           MOVE ln_CurrentTransNo TO  Trans-No         OF lc_MFATRNREP.
593200191010           MOVE lncc_N            TO  Treat-Txn-As-AWD OF lc_MFATRNREP
593300191015      *RFS1008981 - Starts.
593400191015      *                               Waive-DSC        OF lc_MFATRNREP
593500191015      *RFS1008981 - Ends.
593600191010                                      Waive-ERF        OF lc_MFATRNREP.
593700191015      *RFS1008981 - Starts.
593800191015           MOVE Lc_WaiveDSC       TO  Waive-DSC        OF lc_MFATRNREP.
593900191015      *RFS1008981 - Ends.
594000191010
594100191010           EXEC SQL
594200191010             INSERT INTO MFATRNREP
594300191010             VALUES :MFATRNREP
594400191010           END-EXEC.
594500191010
594600191010           MOVE SQLSTATE TO lc_sqlStates.
594700191010           IF NOT lncc_sqlSuccessful
594800191010              SET lncc_Err_65 TO TRUE
594900191010              MOVE lncc_ErrInsertingMFATRNREP TO lc_sqlErrShortDESCR
595000191010              PERFORM SQL_Fail_Process
595100191010           END-IF.
595200191010
595300191010      * _________________________________
595400191010       Generate_MFATRHDRP.
595500191010      * _________________________________
595600191010           INITIALIZE MFATRHDRP OF lc_MFATRHDRP.
595700191010
595800191010      *RFS143702 - START
595900191010      *    IF ldh_DetailSeqNo(li_TDidx, li_DAPidx) = 0
596000191010      *       ADD  1 TO ldh_LastDetailSeqNo(li_TDidx)
596100191010      *       MOVE ldh_LastDetailSeqNo(li_TDidx)
596200191010      *         TO ldh_DetailSeqNo(li_TDidx, li_DAPidx)
596300191010      *    END-IF.
596400191010      *RFS143702 - END
596500191010
596600191010           IF ldh_TransNo(li_TDidx, li_DAPidx) NOT = 0
596700191010              MOVE  ldh_PlacementDate(li_TDidx, li_DAPidx)
596800191010                TO  Placement-Date OF lc_MFATRHDRP
596900191010              MOVE  ldh_TransNo(li_TDidx, li_DAPidx)
597000191010                TO  Trans-No OF lc_MFATRHDRP
597100191010           ELSE
597200191010              MOVE li_AsAtDate       TO  Placement-Date OF lc_MFATRHDRP
597300191010              MOVE ln_CurrentTransNo TO  Trans-No       OF lc_MFATRHDRP
597400191010           END-IF.
597500191010
597600191010           MOVE  lncc_AHA            TO  Header-Type OF lc_MFATRHDRP.
597700191010           MOVE  ln_CurrentHeaderNo  TO  Header-No   OF lc_MFATRHDRP.
597800191010      *RFS143702 - START
597900191010      *    MOVE  ldh_DetailSeqNo(li_TDidx, li_DAPidx)
598000191010      *      TO  Detail-Seq-No OF lc_MFATRHDRP.
598100191010           MOVE  li_DAPidx TO
598200191010                 Detail-Seq-No OF lc_MFATRHDRP.
598300191010      *RFS143702 - END
598400191010
598500191010           EXEC SQL
598600191010             INSERT INTO MFATRHDRP
598700191010             VALUES :MFATRHDRP
598800191010           END-EXEC.
598900191010
599000191010           MOVE SQLSTATE TO lc_sqlStates.
599100191010           IF NOT lncc_sqlSuccessful
599200191010              SET lncc_Err_52 TO TRUE
599300191010              MOVE lncc_ErrInsertingMFATRHDRP TO lc_sqlErrShortDESCR
599400191010              PERFORM SQL_Fail_Process
599500191010           END-IF.
599600191010
599700191010      * _________________________________
599800191010       Generate_MFATRNRRP.
599900191010      * _________________________________
600000191010           INITIALIZE MFATRNRRP OF lc_MFATRNRRP.
600100191010
600200191010           MOVE li_AsAtDate       TO  Placement-Date OF lc_MFATRNRRP.
600300191010           MOVE ln_CurrentTransNo TO  Trans-No       OF lc_MFATRNRRP.
600400191010           MOVE ldh_RepaymentReason (li_TDidx, li_DAPidx)
600500191010             TO Repayment-Reason-Code OF lc_MFATRNRRP.
600600191010
600700191010           EXEC SQL
600800191010             INSERT INTO MFATRNRRP
600900191010             VALUES :MFATRNRRP
601000191010           END-EXEC.
601100191010
601200191010           MOVE SQLSTATE TO lc_sqlStates.
601300191010           IF NOT lncc_sqlSuccessful
601400191010              SET lncc_Err_53 TO TRUE
601500191010              MOVE lncc_ErrInsertingMFATRNRRP TO lc_sqlErrShortDESCR
601600191010              PERFORM SQL_Fail_Process
601700191010           END-IF.
601800191010
601900191010      * _________________________________
602000191010       Generate_MFATRNHDP.
602100191010      * _________________________________
602200191010           INITIALIZE MFATRNHDP OF lc_MFATRNHDP.
602300191010
602400191010           IF ldh_TransNo(li_TDidx, li_DAPidx) NOT = 0
602500191010              MOVE  ldh_PlacementDate(li_TDidx, li_DAPidx)
602600191010                TO  Placement-Date OF lc_MFATRNHDP
602700191010              MOVE  ldh_TransNo(li_TDidx, li_DAPidx)
602800191010                TO  Trans-No OF lc_MFATRNHDP
602900191010           ELSE
603000191010              MOVE li_AsAtDate       TO  Placement-Date OF lc_MFATRNHDP
603100191010              MOVE ln_CurrentTransNo TO  Trans-No       OF lc_MFATRNHDP
603200191010           END-IF.
603300191010
603400191010           MOVE  lncc_U        TO RDSP-Approval-Status OF lc_MFATRNHDP.
603500191010           MOVE  ln_SaveAccountNo TO Account-No        OF lc_MFATRNHDP.
603600191010      *    RFS98866 - Begins - DM
603700191010      *               For RDSP DAP's with AHA after same process date SDSP DAP:
603800191010      *               The Grant/Bond as part of the SDSP DAP needs to be added
603900191010      *               to the AHA amounts so that the calculations are correct.
604000191010      *               This will allow for the proper calculation of the breakdow
604100191010      *    MOVE  ldh_TotAHAGrant(li_TDidx, li_DAPidx)
604200191010      *                         TO  DAP-LDAP-AHA-Grant OF lc_MFATRNHDP.
604300191010      *    MOVE  ldh_TotAHABond(li_TDidx, li_DAPidx)
604400191010      *                         TO  DAP-LDAP-AHA-Bond  OF lc_MFATRNHDP.
604500191010      *    RFS 117402 - Begins - Do original activity for all that are not SDSP
604600191010      *    IF ldh_AHA(li_TDidx, li_DAPidx)
604700191010      *    RFS 130936 - DM - Populate proper AHA even if SDSP - begins
604800191010      *    IF NOT ldh_SDSPYes(li_TDidx, li_DAPidx)
604900191010      *    RFS 117402 - Ends
605000191010      *       MOVE  ldh_TotAHAGrant(li_TDidx, li_DAPidx)
605100191010      *                          TO  DAP-LDAP-AHA-Grant OF lc_MFATRNHDP
605200191010      *       MOVE  ldh_TotAHABond(li_TDidx, li_DAPidx)
605300191010      *                          TO  DAP-LDAP-AHA-Bond  OF lc_MFATRNHDP
605400191010      *    ELSE
605500191010      *       COMPUTE  ldh_TotAHAGrant(li_TDidx, li_DAPidx)
605600191010      *              = DAP-LDAP-AHA-Grant OF lc_MFATRNHDP
605700191010      *              + li_TotalDAPGrant
605800191010      *       COMPUTE  ldh_TotAHABond(li_TDidx, li_DAPidx)
605900191010      *              = DAP-LDAP-AHA-Bond  OF lc_MFATRNHDP
606000191010      *              + li_TotalDAPBond
606100191010      *    END-IF.
606200191010           MOVE  ldh_TotAHAGrant(li_TDidx, li_DAPidx)
606300191010                              TO  DAP-LDAP-AHA-Grant OF lc_MFATRNHDP.
606400191010           MOVE  ldh_TotAHABond(li_TDidx, li_DAPidx)
606500191010                              TO  DAP-LDAP-AHA-Bond  OF lc_MFATRNHDP.
606600191010      *    RFS 130936 - Ends
606700191010      *    RFS98866 - Ends - DM
606800191010           MOVE  ldh_AHAGrant(li_TDidx, li_DAPidx)
606900191010                                TO  CDSP-Grant-Amount  OF lc_MFATRNHDP.
607000191010           MOVE  ldh_AHABond(li_TDidx, li_DAPidx)
607100191010                                TO  CDSP-Bond-Amount   OF lc_MFATRNHDP.
607200191010
607300191010           IF ldh_AHA(li_TDidx, li_DAPidx)
607400201118              MOVE  ldh_RepaymentDate(li_TDidx, li_DAPidx)
607500201118                                TO Repayment-Date      OF lc_MFATRNHDP
607600210217      * RFS1110840 - begins
607700210217              MOVE ldh_AHATDFlag (li_TDidx, li_DAPidx)
607800210217                                TO DATE-SEQUENCE OF lc_MFATRNHDP
607900210217      * RFS1110840 - Ends
608000191010      * RFS 68035.37 - begins.
608100191010              MOVE ln_TermAdjustGrant  TO  Total-Grant OF lc_MFATRNHDP
608200191010              MOVE ln_TermAdjustBond   TO  Total-Bond  OF lc_MFATRNHDP
608300191010      * RFS 68035.37 - ends.
608400191010           ELSE
608500191010      *RFS 133572 - Begins.
608600191010      *       MOVE ln_AccountMV TO Total-Market-Value  OF lc_MFATRNHDP
608700191010              IF NOT lb_ProcessedClosureTrue
608800191010               MOVE ln_AccountMV TO Total-Market-Value  OF lc_MFATRNHDP
608900191010              END-IF
609000191010              IF lb_ProcessedClosureTrue
609100191010               COMPUTE Total-Market-Value  OF lc_MFATRNHDP =
609200191010                li_TotalClosureDAPGross +
609300191010                ldh_TotAHAGrant(li_TDidx, li_DAPidx) +
609400191010                ldh_TotAHABond(li_TDidx, li_DAPidx)
609500191010              END-IF
609600191010      *RFS 133572 - Ends.
60970019101084456 *       MOVE ln_TotalGrant    TO  Total-Grant    OF lc_MFATRNHDP
60980019101084456 *       MOVE ln_TotalBond     TO  Total-Bond     OF lc_MFATRNHDP
60990019101084456 *       MOVE ln_TotalCapital  TO  Total-Capital  OF lc_MFATRNHDP
61000019101084456         MOVE  ldh_TotalCapital  (li_TDidx, li_DAPidx)
61010019101084456                               TO  Total-Capital  OF lc_MFATRNHDP
610200191010      *RFS91272 - START
610300191010              MOVE  ldh_TotalRollover (li_TDidx, li_DAPidx)
610400191010                               TO TOTAL-ROLLOVER OF lc_MFATRNHDP
610500191010      *RFS91272 - END
61060019101084456         MOVE  ldh_TotalGrant    (li_TDidx, li_DAPidx)
61070019101084456                               TO  Total-Grant    OF lc_MFATRNHDP
61080019101084456         MOVE  ldh_TotalBond     (li_TDidx, li_DAPidx)
61090019101084456                               TO  Total-Bond     OF lc_MFATRNHDP
61100019101080658         MOVE  lncc_N TO Waive-LDAP-Maximum-Check OF lc_MFATRNHDP
611100191010      *RFS130936 - DM - Set SDSP flag - Begins
611200191010              MOVE ldh_SDSP (li_TDidx, li_DAPidx)
611300191010                TO  SDSP-Flag OF lc_MFATRNHDP
611400191010      *RFS130936 - Ends
611500191010           END-IF.
611600191010      *RFS126482 - Start
611700191010      * RFS134243 - Start
611800191010           IF lb_ProcessedClosureTrue
611900191010             MOVE li_TotalClosureDAPTaxable
612000191010                              TO Taxable-Amount-Base OF lc_MFATRNHDP
612100191010           ELSE
612200191010      * RFS134243 - End
612300191010           MOVE ldh_WHTaxRateBasis (li_TDidx, li_DAPidx)
612400191010                              TO Taxable-Amount-Base OF lc_MFATRNHDP
612500191010134243     END-IF.
612600191010           MOVE ldh_ActualTax      (li_TDidx, li_DAPidx)
612700191010                         TO Adjusted-Taxable-Amount OF lc_MFATRNHDP
612800191010           MOVE ldh_ActualProvTax  (li_TDidx, li_DAPidx)
612900191010                 TO Adjusted-Prov-Taxable-Amount OF lc_MFATRNHDP
613000210122      *RFS1103329 - Starts
613100210122           IF ldh_AHA(li_TDidx, li_DAPidx)
613200210122              INITIALIZE Taxable-Amount-Base          OF lc_MFATRNHDP
613300210122                         Adjusted-Taxable-Amount      OF lc_MFATRNHDP
613400210122                         Adjusted-Prov-Taxable-Amount OF lc_MFATRNHDP
613500210122           END-IF.
613600210122      *RFS1103329 - End
613700191010      *RFS126482 - End
613800191010           EXEC SQL
613900191010             INSERT INTO MFATRNHDP
614000191010             VALUES :MFATRNHDP
614100191010           END-EXEC.
614200191010
614300191010           MOVE SQLSTATE TO lc_sqlStates.
614400191010           IF NOT lncc_sqlSuccessful
614500191010              SET lncc_Err_54 TO TRUE
614600191010              MOVE lncc_ErrInsertingMFATRNHDP TO lc_sqlErrShortDESCR
614700191010              PERFORM SQL_Fail_Process
614800191010           END-IF.
614900191010
615000191010      * _________________________________
615100191010       Update_MFATRNHDP.
615200191010      * _________________________________
615300191010           INITIALIZE ln_GrantPortion
615400191010                      ln_BondPortion
615500191010                      ln_PlacementDate
615600191010126482*               ln_TransNo.
615700191010126482                ln_TransNo
615800191010126482                ln_Whtax
615900191010126482                ln_ActaualTax
616000191010126482                ln_ActaualPTax.
616100191010
616200191010           MOVE  ldh_PlacementDate(li_TDidx, li_DAPidx)
616300191010             TO  ln_PlacementDate.
616400191010           MOVE  ldh_TransNo(li_TDidx, li_DAPidx)
616500191010             TO  ln_TransNo.
616600191010           MOVE  ldh_AHAGrant(li_TDidx, li_DAPidx)  TO ln_GrantPortion.
616700191010           MOVE  ldh_AHABond(li_TDidx, li_DAPidx)   TO ln_BondPortion.
616800191010      *RFS126482 - Start
616900191010           MOVE  ldh_WHTaxRateBasis (li_TDidx, li_DAPidx)
617000191010                                                    TO ln_Whtax.
617100191010           MOVE  ldh_ActualTax      (li_TDidx, li_DAPidx)
617200191010                                                    TO ln_ActaualTax.
617300191010           MOVE  ldh_ActualProvTax  (li_TDidx, li_DAPidx)
617400191010                                                    TO ln_ActaualPTax.
617500210122      *RFS1103329 - Starts
617600210122           IF ldh_AHA(li_TDidx, li_DAPidx)
617700210122              INITIALIZE Taxable-Amount-Base          OF lc_MFATRNHDP
617800210122                         Adjusted-Taxable-Amount      OF lc_MFATRNHDP
617900210122                         Adjusted-Prov-Taxable-Amount OF lc_MFATRNHDP
618000210122           END-IF.
618100210122      *RFS1103329 - End
618200191010      *RFS126482 - End
618300191010
618400191010           EXEC SQL
618500191010             UPDATE MFATRNHDP
618600191010                SET CDSP_Grant_Amount   = :ln_GrantPortion,
618700191010                    CDSP_Bond_Amount    = :ln_BondPortion,
618800191010                    Total_Grant         = :ln_TermAdjustGrant,
618900191010                    Total_Bond          = :ln_TermAdjustBond,
619000191010                    DAP_LDAP_AHA_Grant  = :ln_TotAHAGrant,
619100191010126482*             DAP_LDAP_AHA_Bond   = :ln_TotAHABond
619200191010126482              DAP_LDAP_AHA_Bond   = :ln_TotAHABond,
619300191010126382              Taxable_Amount_Base = :ln_Whtax,
619400191010126482          Adjusted_Taxable_Amount = :ln_ActaualTax,
619500191010126482     Adjusted_Prov_Taxable_Amount = :ln_ActaualPTax
619600191010              WHERE Placement_Date      = :ln_PlacementDate
619700191010                AND Trans_No            = :ln_TransNo
619800191010           END-EXEC.
619900191010
620000191010           MOVE SQLSTATE TO lc_sqlStates.
620100191010           IF NOT lncc_sqlSuccessful
620200191010               SET lncc_Err_55 TO TRUE
620300191010               MOVE lncc_ErrUpdatingMFATRNHDP TO lc_sqlErrShortDESCR
620400191010               PERFORM SQL_Fail_Process
620500191010           END-IF.
620600191010
620700191010      * RFS 80658 - begins.
620800191010      * _________________________________
620900191010       Update_MFATRNHDP_DAP.
621000191010      * _________________________________
621100191010           INITIALIZE ln_PlacementDate
621200191010126482*               ln_TransNo.
621300191010126482                ln_TransNo
621400191010126482                ln_Whtax
621500191010126482                ln_ActaualTax
621600191010133572*               ln_ActaualPTax.
621700191010133572                ln_ActaualPTax
621800191010      *               RFS158078 - Begins (1 5 8 7 3 9)
621900191010                      lc_SDSPFlag
622000191010      *               RFS158078 - Ends
622100191010133572                li_UpdateMV.
622200191010
622300191010           MOVE  ldh_PlacementDate(li_TDidx, li_DAPidx)
622400191010             TO  ln_PlacementDate.
622500191010           MOVE  ldh_TransNo      (li_TDidx, li_DAPidx)
622600191010             TO  ln_TransNo.
622700191010           MOVE  ldh_TotalCapital (li_TDidx, li_DAPidx)
622800191010             TO  ln_TotalCapital.
622900191010      *RFS91272 - START
623000191010           MOVE  ldh_TotalRollover(li_TDidx, li_DAPidx)
623100191010             TO  ln_TotalRollover.
623200191010      *RFS91272 - END
623300191010           MOVE  ldh_TotalGrant   (li_TDidx, li_DAPidx)
623400191010             TO  ln_TotalGrant.
623500191010           MOVE  ldh_TotalBond    (li_TDidx, li_DAPidx)
623600191010             TO  ln_TotalBond.
623700191010           MOVE  ldh_TotAHAGrant  (li_TDidx, li_DAPidx)
623800191010             TO  ln_TotAHAGrant.
623900191010           MOVE  ldh_TotAHABond   (li_TDidx, li_DAPidx)
624000191010             TO  ln_TotAHABond.
624100191010      *RFS126482 - Start
624200191010           MOVE  ldh_WHTaxRateBasis (li_TDidx, li_DAPidx)
624300191010             TO ln_Whtax.
624400191010           MOVE  ldh_ActualTax      (li_TDidx, li_DAPidx)
624500191010             TO ln_ActaualTax.
624600191010           MOVE  ldh_ActualProvTax  (li_TDidx, li_DAPidx)
624700191010             TO ln_ActaualPTax.
624800191010      *RFS126482 - End
624900191010      *RFS158078 - Begins (1 5 8 7 3 9)
625000191010           MOVE ldh_SDSP (li_TDidx, li_DAPidx)
625100191010             TO  lc_SDSPFlag.
625200191010      *RFS158078 - Ends
625300191010      *RFS 133572 - Begins.
625400191010           IF lb_ProcessedClosureTrue
625500191010               COMPUTE li_UpdateMV = li_TotalClosureDAPGross +
625600191010      *RFS181302-Starts.
625700191010      *                ldh_TotAHAGrant(li_TDidx, li_DAPidx)  +
625800191010      *                 ldh_TotAHABond(li_TDidx, li_DAPidx)
625900191010                       li_TotalClosureAHAGross
626000191010      *RFS181302-Ends.
626100191010           ELSE
626200191010               COMPUTE li_UpdateMV = ln_AccountMV
626300191010           END-IF.
626400191010      *RFS 133572 - Ends.
626500210122      *RFS1103329 - Starts
626600210122           IF ldh_AHA(li_TDidx, li_DAPidx)
626700210122               INITIALIZE ln_Whtax
626800210122                          ln_ActaualTax
626900210122                          ln_ActaualPTax
627000210122           END-IF
627100210122      *RFS1103329 - END
627200191010           EXEC SQL
627300191010             UPDATE MFATRNHDP
627400191010      *RFS 133572 - Begins.
627500191010      *         SET Total_Market_Value  = :ln_AccountMV,
627600191010                SET Total_Market_Value  = :li_UpdateMV,
627700191010      *RFS 133572 - Ends.
627800191010                    Total_Capital       = :ln_TotalCapital,
627900191010                    Total_Grant         = :ln_TotalGrant,
628000191010                    Total_Bond          = :ln_TotalBond,
628100191010                    DAP_LDAP_AHA_Grant  = :ln_TotAHAGrant,
628200191010      *RFS91272 - START
628300191010      *             DAP_LDAP_AHA_Bond   = :ln_TotAHABond
628400191010                    DAP_LDAP_AHA_Bond   = :ln_TotAHABond,
628500191010126482*             Total_Rollover      = :ln_TotalRollover
628600191010126482              Total_Rollover      = :ln_TotalRollover,
628700191010126382              Taxable_Amount_Base = :ln_Whtax,
628800191010126482          Adjusted_Taxable_Amount = :ln_ActaualTax,
628900191010126482     Adjusted_Prov_Taxable_Amount = :ln_ActaualPTax
629000191010      *RFS158078 - Begins (1 5 8 7 3 9)
629100191010                   ,SDSP_Flag           = :Lc_SDSPFlag
629200191010      *RFS158078 - Ends
629300191010      *RFS91272 - END
629400191010
629500191010              WHERE Placement_Date      = :ln_PlacementDate
629600191010                AND Trans_No            = :ln_TransNo
629700191010           END-EXEC.
629800191010
629900191010           MOVE SQLSTATE TO lc_sqlStates.
630000191010           IF NOT lncc_sqlSuccessful
630100191010               SET lncc_Err_70 TO TRUE
630200191010               MOVE lncc_ErrUpdatingMFATRNHDP TO lc_sqlErrShortDESCR
630300191010               PERFORM SQL_Fail_Process
630400191010           END-IF.
630500191010      * RFS 80658 - ends.
630600191010
630700191010      *-----------------
630800191010      * RFS 88074 begins
630900191010      *-----------------
631000191010      * _________________________________
631100191010       Carry_Over_Payment_Info.
631200191010      * _________________________________
631300191010           IF ldh_PayTypeCheque(li_TDidx, li_DAPidx)
631400191010              PERFORM Insert_MFATRNCP
631500191010              SET lb_DeleteForCheque TO True
631600191010           ELSE
631700191010            IF ldh_PayTypeEFT   (li_TDidx, li_DAPidx)
631800191010              PERFORM Insert_MFATRNBP
631900191010              SET lb_DeleteForEFT    TO True
632000191010            END-IF
632100191010           END-IF.
632200191010
632300191010      * -----------------------------------------
632400191010      * -- DAP Transactions' payment as Cheque --
632500191010      * -----------------------------------------
632600191010       Insert_MFATRNCP.
632700191010           EXEC SQL
632800191010             INSERT INTO mfatrncp
632900191010             (SELECT :li_AsAtDate,
633000191010                     :ln_CurrentTransNo,
633100191010                     payee_name,
633200191010                     payee_name2,
633300191010                     addr_no
633400191010              FROM mfatrncp trncp
633500191010              WHERE trncp.placement_date = :ln_SavePlacementDate
633600191010                AND trncp.trans_no       = :ln_SaveTransNo)
633700191010           END-EXEC.
633800191010
633900191010           MOVE SQLSTATE TO lc_sqlStates.
634000191010           IF NOT lncc_sqlSuccessful AND NOT lncc_sqlEnd
634100191010               SET lncc_Err_75 TO TRUE
634200191010               MOVE lncc_ErrInsertingMFATRNCP  TO lc_sqlErrShortDESCR
634300191010               PERFORM SQL_Fail_Process
634400191010           END-IF.
634500191010
634600191010      * -------------------------------------------------------
634700191010      * -- Delete cheque info of the original 'AHA' transaction
634800191010      * -------------------------------------------------------
634900191010       Delete_MFATRNCP_Original_Trade.
635000191010           EXEC SQL
635100191010             DELETE FROM mfatrncp trncp
635200191010              WHERE trncp.placement_date = :ln_SavePlacementDate
635300191010                AND trncp.trans_no       = :ln_SaveTransNo
635400191010           END-EXEC.
635500191010
635600191010           MOVE SQLSTATE TO lc_sqlStates.
635700191010           IF NOT lncc_sqlSuccessful AND NOT lncc_sqlEnd
635800191010               SET lncc_Err_76 TO TRUE
635900191010               MOVE lncc_ErrDeletingMFATRNCP  TO lc_sqlErrShortDESCR
636000191010               PERFORM SQL_Fail_Process
636100191010           END-IF.
636200191010
636300191010      * ---------------------------------------
636400191010      * -- DAP Transactions' payment to bank --
636500191010      * ---------------------------------------
636600191010       Insert_MFATRNBP.
636700191010           EXEC SQL
636800191010             INSERT INTO mfatrnbp
636900191010             (SELECT :li_AsAtDate,
637000191010                     :ln_CurrentTransNo,
637100191010                     bank_seq_no,
637200191010                     eft_file_generated,
637300191010                     trans_eft_header_no
637400191010              FROM mfatrnbp trnbp
637500191010              WHERE trnbp.placement_date = :ln_SavePlacementDate
637600191010                AND trnbp.trans_no       = :ln_SaveTransNo)
637700191010           END-EXEC.
637800191010
637900191010           MOVE SQLSTATE TO lc_sqlStates.
638000191010           IF NOT lncc_sqlSuccessful AND NOT lncc_sqlEnd
638100191010               SET lncc_Err_77 TO TRUE
638200191010               MOVE lncc_ErrInsertingMFATRNBP TO lc_sqlErrShortDESCR
638300191010               PERFORM SQL_Fail_Process
638400191010           END-IF.
638500191010
638600191010      * -----------------------------------------------------
638700191010      * -- Delete bank info of the original 'AHA' transaction
638800191010      * -----------------------------------------------------
638900191010       Delete_MFATRNBP_Original_Trade.
639000191010           EXEC SQL
639100191010            DELETE  FROM mfatrnbp trnbp
639200191010              WHERE trnbp.placement_date = :ln_SavePlacementDate
639300191010                AND trnbp.trans_no       = :ln_SaveTransNo
639400191010           END-EXEC.
639500191010
639600191010           MOVE SQLSTATE TO lc_sqlStates.
639700191010           IF NOT lncc_sqlSuccessful AND NOT lncc_sqlEnd
639800191010               SET lncc_Err_78 TO TRUE
639900191010               MOVE lncc_ErrDeletingMFATRNBP  TO lc_sqlErrShortDESCR
640000191010               PERFORM SQL_Fail_Process
640100191010           END-IF.
640200191010      *-----------------
640300191010      * RFS 88074 ends
640400191010      *-----------------
640500191010
640600191010      * _________________________________
640700191010       Declare_Open_C1.
640800191010      * _________________________________
640900191010           SET lb_EndOfC1False TO TRUE.
641000191010
641100191010           EXEC SQL
641200191010            DECLARE C1 CURSOR FOR
641300191010             SELECT Trhdrp.Header_No,
641400191010                    COUNT(*)
641500191010
64160019101084456          FROM MFATRHDRP Trhdrp
64170019101084456
64180019101084456          INNER JOIN MFATRNP Trnp
64190019101084456            ON Trhdrp.Placement_Date  = Trnp.Placement_Date
64200019101084456           AND Trhdrp.Trans_No        = Trnp.Trans_No
642100191010
642200191010              WHERE Trhdrp.Header_Type     = :lncc_AHA
642300191010                AND Trnp.Trans_Status_Code IN
642400191010                    (:lncc_PND, :lncc_UNC, :lncc_VER)
642500191010              GROUP BY Trhdrp.Header_No
642600191010              FOR FETCH ONLY
642700191010              OPTIMIZE FOR ALL ROWS
642800191010           END-EXEC.
642900191010
643000191010           EXEC SQL
643100191010             OPEN C1
643200191010           END-EXEC.
643300191010
643400191010           MOVE SQLSTATE TO lc_sqlStates.
643500191010           IF NOT lncc_sqlSuccessful
643600191010              SET lncc_Err_56 TO TRUE
643700191010              MOVE lncc_ErrOpeningCursor TO lc_sqlErrShortDESCR
643800191010              PERFORM  SQL_Fail_Process
643900191010           END-IF.
644000191010
644100191010      * _________________________________
644200191010       Fetch_C1.
644300191010      * _________________________________
644400191010           INITIALIZE lc_C1Vars.
644500191010
644600191010           EXEC SQL
644700191010             FETCH NEXT FROM C1
644800191010              INTO :lc_C1Vars
644900191010           END-EXEC.
645000191010
645100191010           MOVE SQLSTATE TO lc_sqlStates.
645200191010           EVALUATE TRUE
645300191010             WHEN lncc_sqlSuccessful
645400191010               CONTINUE
645500191010             WHEN lncc_sqlEnd
645600191010               SET lb_EndOfC1True TO TRUE
645700191010             WHEN OTHER
645800191010               SET lncc_Err_57 TO TRUE
645900191010               MOVE lncc_ErrFetchingCursor  TO lc_sqlErrShortDESCR
646000191010               PERFORM SQL_Fail_Process
646100191010           END-EVALUATE.
646200191010
646300191010      * _________________________________
646400191010       Close_C1.
646500191010      * _________________________________
646600191010           EXEC SQL
646700191010             CLOSE C1
646800191010           END-EXEC.
646900191010
647000191010           MOVE SQLSTATE TO lc_sqlStates.
647100191010           IF NOT lncc_sqlSuccessful
647200191010              SET lncc_Err_58 TO TRUE
647300191010              MOVE lncc_ErrClosingCursor TO lc_sqlErrShortDESCR
647400191010              PERFORM SQL_Fail_Process
647500191010           END-IF.
647600191010
647700191010      * _________________________________
647800191010       Declare_Open_C2.
647900191010      * _________________________________
648000191010           SET lb_EndOfC2False TO TRUE.
648100191010           EXEC SQL
648200191010            DECLARE C2 CURSOR FOR
648300191010             SELECT Trnp.Placement_Date,
648400191010                    Trnp.Trans_No,
648500191010                    Trnp.Process_Date,
648600191010                    Trnp.Trade_Date,
648700191010                    Trnp.Trans_Type_Code,
648800191010                    Trnp.Trans_Origin_Code,
648900191010                    Trnp.Account_No,
649000191010                    Trnp.Investment_Code,
649100191010                    Trnp.Industry_Fund_Code,
649200191010                    Trnp.Dealer_Code,
649300191010                    Trnp.Dealer_Rep_Code,
649400191010                    Trnp.Gross_Amt,
649500191010                    Trnp.Net_Amt,
649600191010                    Trnp.Unit_Amt,
649700191010                    Trnp.Percent_Amt,
649800191010                    Trnp.Gross_or_Net,
649900191010                    Trnp.Split_Option_Code,
650000191010                    Trnp.Contr_Redem_Code,
650100191010R88074              Trnp.Payment_Type_Code,
650200191010                    Cntrrp.Contr_Redem_Code_Rule,
650300191010                    COALESCE(Trnrep.Waive_DSC, "N"),
650400191010                    COALESCE(Trnrep.Waive_ERF, "N"),
650500191010                    COALESCE(Trnrep.Treat_Txn_As_AWD, "N"),
65060019101080658               COALESCE(Trnhdp.Repayment_Date, 0),
65070019101080658               CASE WHEN Trnhdp.Waive_LDAP_Maximum_Check IS NULL
65080019101080658                    THEN "X"
65090019101080658               ELSE Trnhdp.Waive_LDAP_Maximum_Check END ,
651000191010      * RFS143313 - Begin
65110019101080658 *             COALESCE(Trnrrp.Repayment_Reason_Code, 0)
651200191010                    COALESCE(Trnrrp.Repayment_Reason_Code, 0),
651300191010                    COALESCE(Trnhdp.Date_Sequence,:Lncc_space)
651400191010      * RFS143313 - End
651500191010
65160019101084456          FROM MFAACCDSP Accdsp
65170019101084456
65180019101084456          INNER JOIN MFAACCNTP Accntp
65190019101084456             ON Accntp.Account_No = Accdsp.Account_No
65200019101084456
65210019101084456           INNER JOIN MFAACCTYP Acctyp
65220019101084456            ON Accntp.Account_Type_Code = Acctyp.Account_Type_Code
65230019101084456
65240019101084456           INNER JOIN MFATRNP  Trnp
65250019101084456              ON Trnp.Account_No = Accdsp.Account_No
65260019101084456
65270019101084456           INNER JOIN MFACNTRRP Cntrrp
65280019101084456            ON Cntrrp.Account_Type_Code = Accntp.Account_Type_Code
65290019101084456           AND Cntrrp.Contr_Redem_Code  = Trnp.Contr_Redem_Code
653000191010
653100191010                    EXCEPTION JOIN MFATRHDRP Trhdrp
653200191010                      ON Trnp.Placement_Date =
653300191010                         Trhdrp.Placement_Date AND
653400191010                         Trnp.Trans_No = Trhdrp.Trans_No
65350019101091990                AND Trhdrp.HEADER_TYPE  = :lncc_AHA
653600191010
653700191010                    LEFT OUTER JOIN MFATRNREP Trnrep
653800191010                      ON Trnp.Placement_Date =
653900191010                         Trnrep.Placement_Date AND
654000191010                         Trnp.Trans_No = Trnrep.Trans_No
654100191010
65420019101080658               LEFT OUTER JOIN MFATRNHDP Trnhdp
65430019101080658                 ON Trnp.Placement_Date =
65440019101080658                    Trnhdp.Placement_Date AND
65450019101080658                    Trnp.Trans_No = Trnhdp.Trans_No
654600191010
65470019101080658               LEFT OUTER JOIN MFATRNRRP Trnrrp
65480019101080658                 ON Trnp.Placement_Date =
65490019101080658                    Trnrrp.Placement_Date AND
65500019101080658                    Trnp.Trans_No = Trnrrp.Trans_No
655100191010
655200191010              WHERE Acctyp.Account_Type_Rule = :lnci_0
655300191010                AND Trnp.Trade_Date         <= :li_AsAtDate
655400191010                AND Trnp.Trans_Type_Code    IN
655500191010                    (:lncc_SEL, :lncc_SWO, :lncc_TRO)
655600191010                AND Trnp.Trans_Status_Code  IN
655700191010                    (:lncc_PND, :lncc_UNC, :lncc_VER)
655800191010      *         RFS 68035.22 - Begins
655900191010                AND Trnp.Rejection_Code      = " "
656000191010      *         RFS 68035.22 - Ends
656100191010               ORDER BY Trnp.Account_No,
656200191010                        Trnp.Trade_Date,
656300191010126482                  Cntrrp.Contr_Redem_Code,
656400191010                        Trnp.Trans_Seq_No,
656500191010                        Trnp.Investment_Code,
656600191010                        Trnp.Placement_Date,
656700191010                        Trnp.Trans_No
656800191010               FOR FETCH ONLY
656900191010               OPTIMIZE FOR ALL ROWS
657000191010           END-EXEC.
657100191010
657200191010           EXEC SQL
657300191010             OPEN C2
657400191010           END-EXEC.
657500191010
657600191010           MOVE SQLSTATE TO lc_sqlStates.
657700191010           IF NOT lncc_sqlSuccessful
657800191010              SET lncc_Err_59 TO TRUE
657900191010              MOVE lncc_ErrOpeningCursor TO lc_sqlErrShortDESCR
658000191010              PERFORM  SQL_Fail_Process
658100191010           END-IF.
658200191010
658300191010      * _________________________________
658400191010       Fetch_C2.
658500191010      * _________________________________
658600191010           INITIALIZE lc_C2Vars.
658700191010           EXEC SQL
658800191010             FETCH NEXT FROM C2
658900191010              INTO :lc_C2Vars
659000191010           END-EXEC.
659100191010
659200191010           MOVE SQLSTATE TO lc_sqlStates.
659300191010           EVALUATE TRUE
659400191010             WHEN lncc_sqlSuccessful
659500191010               CONTINUE
659600191010             WHEN lncc_sqlEnd
659700191010               SET lb_EndOfC2True TO TRUE
659800191010             WHEN OTHER
659900191010               SET lncc_Err_60 TO TRUE
660000191010               MOVE lncc_ErrFetchingCursor  TO lc_sqlErrShortDESCR
660100191010               PERFORM SQL_Fail_Process
660200191010           END-EVALUATE.
660300191010
660400191010      * _________________________________
660500191010       Close_C2.
660600191010      * _________________________________
660700191010           EXEC SQL
660800191010             CLOSE C2
660900191010           END-EXEC.
661000191010
661100191010           MOVE SQLSTATE TO lc_sqlStates.
661200191010           IF NOT lncc_sqlSuccessful
661300191010              SET lncc_Err_61 TO TRUE
661400191010              MOVE lncc_ErrClosingCursor TO lc_sqlErrShortDESCR
661500191010              PERFORM SQL_Fail_Process
661600191010           END-IF.
661700191010
661800191010?     * RFS 85040 - begins.                                                  ?
661900191010      * _________________________________
662000191010       Reject_Incorrect_Backdates.
662100191010      * _________________________________
662200191010           SET lb_EndOfC3False TO TRUE.
662300191010      *RFS1000873 begins
662400191010      *    PERFORM Get_ProcessDate
662500191010      *RFS1000873 ends
662600191010
662700191010           PERFORM Declare_Open_C3
662800191010           PERFORM Fetch_C3
662900191010           PERFORM Check_Each_Backdated_Trade  UNTIL lb_EndOfC3True
663000191010           PERFORM Close_C3.
663100191010
663200191010      * _________________________________
663300191010       Get_ProcessDate.
663400191010      * _________________________________
663500191010           INITIALIZE li_AsAtDate.
663600191010           CALL "FXPRCDTP" USING Cpwprcdtp-Linkage
663700191010                                 Comm-Cpprcdtp-Parameters.
663800191010           MOVE PRCDTP-AS-AT-DATE OF CPWPRCDTP-LINKAGE  TO li_AsAtDate.
663900191010
664000191010      * _________________________________
664100191010       Declare_Open_C3.
664200191010      * _________________________________
664300191010      ** Get all "PND" and "UNC" status transactions backdated into RDSP
664400191010           EXEC SQL
664500191010            DECLARE C3 CURSOR FOR
664600191010             SELECT Trnp.Placement_Date,
664700191010                    Trnp.Trans_No,
664800191010                    Trnp.Trade_Date,
664900191010                    Trnp.Trans_Type_Code,
665000191010                    Trnp.Account_No,
665100191010                    Trnp.Investment_Code,
665200191010                    Trnp.Gross_Amt,
665300191010                    Trnp.Contr_Redem_Code,
665400191010                    Cntrrp.Contr_Redem_Code_Rule
665500191010
665600191010               FROM MFAACCDSP Accdsp
665700191010
665800191010               INNER JOIN MFAACCNTP Accntp
665900191010                  ON Accntp.Account_No = Accdsp.Account_No
666000191010
666100191010                INNER JOIN MFAACCTYP Acctyp
666200191010                 ON Accntp.Account_Type_Code = Acctyp.Account_Type_Code
666300191010
666400191010                INNER JOIN MFATRNP  Trnp
666500191010                   ON Trnp.Account_No = Accdsp.Account_No
666600191010
666700191010                INNER JOIN MFACNTRRP Cntrrp
666800191010                 ON Cntrrp.Account_Type_Code = Accntp.Account_Type_Code
666900191010                AND Cntrrp.Contr_Redem_Code  = Trnp.Contr_Redem_Code
667000191010
667100191010              WHERE Acctyp.Account_Type_Rule = :lnci_0
667200191010                AND Trnp.Trade_Date          < :li_AsAtDate
667300191010                AND Trnp.Trans_Status_Code  IN
667400191010                    (:lncc_PND, :lncc_UNC)
667500191010                AND Trnp.Rejection_Code      = " "
667600191010               ORDER BY Trnp.Account_No,
667700191010                        Trnp.Trade_Date,
667800191010                        Trnp.Trans_Seq_No,
667900191010                        Trnp.Investment_Code,
668000191010                        Trnp.Placement_Date,
668100191010                        Trnp.Trans_No
668200191010               FOR FETCH ONLY
668300191010               OPTIMIZE FOR ALL ROWS
668400191010           END-EXEC.
668500191010
668600191010           EXEC SQL
668700191010             OPEN C3
668800191010           END-EXEC.
668900191010
669000191010           MOVE SQLSTATE TO lc_sqlStates.
669100191010           IF NOT lncc_sqlSuccessful
669200191010              SET lncc_Err_72 TO TRUE
669300191010              MOVE lncc_ErrOpeningCursor TO lc_sqlErrShortDESCR
669400191010              PERFORM  SQL_Fail_Process
669500191010           END-IF.
669600191010
669700191010      * _________________________________
669800191010       Fetch_C3.
669900191010      * _________________________________
670000191010           INITIALIZE lc_C3Vars.
670100191010           EXEC SQL
670200191010             FETCH NEXT FROM C3
670300191010              INTO :lc_C3Vars
670400191010           END-EXEC.
670500191010
670600191010           MOVE SQLSTATE TO lc_sqlStates.
670700191010           EVALUATE TRUE
670800191010             WHEN lncc_sqlSuccessful
670900191010               CONTINUE
671000191010             WHEN lncc_sqlEnd
671100191010               SET lb_EndOfC3True TO TRUE
671200191010             WHEN OTHER
671300191010               SET lncc_Err_73 TO TRUE
671400191010               MOVE lncc_ErrFetchingCursor  TO lc_sqlErrShortDESCR
671500191010               PERFORM SQL_Fail_Process
671600191010           END-EVALUATE.
671700191010
671800191010      * _________________________________
671900191010       Check_Each_Backdated_Trade.
672000191010      * _________________________________
672100191010           MOVE lc3_AccountNo         TO pi_RDSPCHKAccountNo
672200191010           MOVE ZEROES                TO pi_RDSPCHKTransactionAmt
672300191010           MOVE lc3_TradeDate         TO pi_RDSPCHKTransactionDate
672400191010           MOVE "B"                   TO pc_RDSPCHKMode
672500191010           MOVE lc3_ContRedCode_Rule  TO pc_RDSPCHKContrRule
672600191010
672700191010           MOVE ZEROES TO  pc_RDSPCHKReturnCode
672800191010
672900191010           MOVE SPACES TO  pc_RDSPCHKAgeLimit
673000191010                           pc_RDSPCHKResidency
673100191010                           pc_RDSPCHKContrLimit
673200191010                           pc_RDSPCHKErrorCode
673300191010                           pc_RDSPCHKErrorType
673400191010                           pc_RDSPCHKErrorMessage
673500191010      * RFS 98866 - Start
673600191010           MOVE ZEROES TO  pi_RDSPCHKSDSPDAPTaxableAmt
673700191010           MOVE ZEROES TO  pi_RDSPCHKSDSPDAPTaxableMax
673800191010           MOVE SPACES TO  pc_RDSPCHKSDSPFlag
673900191010127070     MOVE ZEROES TO  pi_RDSPCHKSDSPTaxablePortion
674000191010
674100191010      * RFS 98866 - Moved the call to FXRDSPCHK to a separate routine
674200191010      *    CALL "FXRDSPCHK" USING  pi_RDSPCHKAccountNo
674300191010      *                            pi_RDSPCHKTransactionAmt
674400191010      *                            pi_RDSPCHKTransactionDate
674500191010      *                            pc_RDSPCHKMode
674600191010      *                            pc_RDSPCHKContrRule
674700191010      *                            pc_RDSPCHKAgeLimit
674800191010      *                            pc_RDSPCHKResidency
674900191010      *                            pc_RDSPCHKContrLimit
675000191010      *                            pc_RDSPCHKReturnCode
675100191010      *                            pc_RDSPCHKErrorCode
675200191010      *                            pc_RDSPCHKErrorType
675300191010      *                            pc_RDSPCHKErrorMessage
675400191010
675500191010           PERFORM CallFXRDSPCHK.
675600191010      * RFS 98866 - End
675700191010
675800191010           IF pc_RDSPCHKErrorCode  = "DSB"
675900191010              PERFORM Set_RejectionFor_BkdtTrade
676000191010           END-IF.
676100191010
676200191010           PERFORM Fetch_C3.
676300191010
676400191010      * _________________________________
676500191010       Set_RejectionFor_BkdtTrade.
676600191010      * _________________________________
676700191010           EXEC SQL
676800191010             UPDATE MFATRNP A
676900191010                SET A.Rejection_Code = :lncc_DSB
677000191010      *RFS1000873 begins
677100191010                ,A.Process_date  = :li_AsAtDate
677200191010      *RFS1000873 ends
677300191010              WHERE A.Placement_Date = :lc3_PlacementDate
677400191010                AND A.Trans_No       = :lc3_TransNo
677500191010           END-EXEC.
677600191010
677700191010           MOVE SQLSTATE TO lc_sqlStates.
677800191010           IF NOT lncc_sqlSuccessful
677900191010               SET lncc_Err_74 TO TRUE
678000191010               MOVE lncc_ErrUpdatingMFATRNP  TO lc_sqlErrShortDESCR
678100191010               PERFORM SQL_Fail_Process
678200191010           END-IF.
678300191010
678400191010      * _________________________________
678500191010       Close_C3.
678600191010      * _________________________________
678700191010           EXEC SQL
678800191010             CLOSE C3
678900191010           END-EXEC.
679000191010
679100191010           MOVE SQLSTATE TO lc_sqlStates.
679200191010           IF NOT lncc_sqlSuccessful
679300191010              SET lncc_Err_61 TO TRUE
679400191010              MOVE lncc_ErrClosingCursor TO lc_sqlErrShortDESCR
679500191010              PERFORM SQL_Fail_Process
679600191010           END-IF.
679700191010?     * RFS 85040 - ends.
679800191010
679900191010      * RFS 98866 - Start
680000191010      * _________________________________
680100191010       Set_RDSDATA.
680200191010      * _________________________________
680300191010
680400191010           MOVE  Pass-CDSC-Account TO  pi_GETMVAccountNo.
680500191010      *    RFS117402 - Begins - DM - for all investments, not just the DAP one
680600191010      *    MOVE  Pass-CDSC-Investment
680700191010           MOVE  SPACES
680800191010      *    RFS117402 - Ends
680900191010                                   TO  pc_GETMVInvestmentCode.
681000191010           MOVE  Pass-CDSC-Trade-Date
681100191010                                   TO  ld-PrevDate.
681200210929      *RFS1116830 Begins
681300210929           MOVE  Pass-CDSC-Trade-Date
681400210929                                   TO  pi_GETMVTradeDate.
681500210929      *    MOVE FUNCTION SUBTRACT-DURATION
681600210929      *          (ld-PrevDate DAYS lnci_1)
681700210929      *                            TO  pi_GETMVTradeDate.
681800210929      *RFS1116830 Ends
681900191010           MOVE  Pass-CDSC-Trade-Date
682000191010                                   TO  pi_GETMVPriceDate.
682100191010           PERFORM CALL_FXGETMKVT.
682200191010           MOVE  ZEROES            TO  pi_RDSPGross.
682300191010           MOVE  ln_TotalCapital   TO  pi_RDSPTotCapital.
682400191010           MOVE  ln_TotalGrant     TO  pi_RDSPTotGrant.
682500191010           MOVE  ln_AccountMV      TO  pi_RDSPTotMV.
682600191010           MOVE  ln_TotalBond      TO  pi_RDSPTotBond.
682700191010      *    RFS126482 - Begins - D.Mielke set values for AHAGrant/Bond
682800191010      *    MOVE  ZEROES            TO  pi_RDSPAHAGrant.
682900191010      *    MOVE  ZEROES            TO  pi_RDSPAHABond.
683000191010           MOVE  ln_TotAHAGrant    TO  pi_RDSPAHAGrant.
683100191010           MOVE  ln_TotAHABond     TO  pi_RDSPAHABond.
683200191010      *    RFS126482 - Ends
683300191010      *RFS132353 - begin
683400191010           PERFORM VARYING li_TDidx
683500191010                   FROM 1 BY 1 UNTIL
683600191010                   li_TDidx > li_LastTDidx
683700191010                IF ldd_TD(li_TDidx) IS NOT NUMERIC
683800191010                   MOVE 0 TO ldd_TD(li_TDidx)
683900191010                END-IF
684000191010           END-PERFORM
684100191010161743     IF ln_SaveTradeDate NOT = 0
684200191010           PERFORM VARYING li_TDidx
684300191010                   FROM 1 BY 1 UNTIL
684400191010                   ldd_TD(li_TDidx) = ln_SaveTradeDate  OR
684500191010                   li_TDidx = li_LastTDidx
684600191010                CONTINUE
684700191010           END-PERFORM
684800191010161743     END-IF
684900191010      *RFS132353 - end
685000191010           IF li_TRNidx  = li_LastTRNidx
685100191010             SET pb_GroupAdjustYes TO TRUE
685200191010           ELSE
685300191010             SET pb_GroupAdjustNo  TO TRUE
685400191010           END-IF.
685500191010      *RFS126482 - Start
685600191010           INITIALIZE pi_LDAPPeriods,
685700191010                      pi_DTC_BPA,
685800191010                      pi_Prov_DTC_BPA,
685900191010                      pi_YTDDAPLDAPTaxable,
686000191010      * RFS130936 - START
686100191010      *               pc_PassedFromRDSPPRE.
686200191010                      pc_PassedFromRDSPPRE,
686300191010                      Pc_SDSPFlag.
686400191010      * RFS130936 - END
686500191010           MOVE  li_PayPerAnnum    TO pi_LDAPPeriods.
686600191010           MOVE  li_DTCBPA         TO pi_DTC_BPA.
686700191010           MOVE  li_ProvDTCBPA     TO pi_Prov_DTC_BPA.
686800191010           MOVE  li_YTDDAPLDAPTaxable TO pi_YTDDAPLDAPTaxable.
686900191010           MOVE  li_YTDLDAPTaxable   TO pi_YTDLDAPTaxable.
687000191010      *RFS132353 - begin
687100191010           INITIALIZE pi_TDTotalDAPLDAP
687200191010      *RFS132353 - ends
687300191010      *    A stand-alone AHA transation may be processed
687400191010           IF ltr_RedemRule(li_TRNidx) = Lncc_11
687500191010              MOVE ldd_TotalDAP(li_TDidx)  TO pi_TDTotalDAPLDAP
687600191010130936        MOVE Ltr_SDSP(li_TRNidx)     TO Pc_SDSPFlag
687700191010           END-IF
687800191010           IF ltr_RedemRule(li_TRNidx) = Lncc_12
687900191010              MOVE ldd_TotalLDAP(li_TDidx) TO pi_TDTotalDAPLDAP
688000191010130936        MOVE Ltr_SDSP(li_TRNidx)     TO Pc_SDSPFlag
688100191010           END-IF
688200191010           MOVE lncc_Y              TO pc_PassedFromRDSPPRE.
688300191010
688400191010      *RFS126482 - End
688500191010      * _________________________________
688600191010       SetToCallFXRDSPCHK.
688700191010      * _________________________________
688800191010           MOVE  ln_SaveAccountNo  TO  pi_RDSPCHKAccountNo.
688900191010           MOVE  ZEROES            TO  pi_RDSPCHKTransactionAmt.
689000191010           MOVE  ln_AHAStartDate   TO  pi_RDSPCHKTransactionDate.
689100191010           MOVE  lncc_B            TO  pc_RDSPCHKMode.
689200191010           MOVE  ltr_RedemRule(li_TRNidx)
689300191010                                   TO  pc_RDSPCHKContrRule.
689400191010
689500191010      * _________________________________
689600191010       CallFXRDSPCHK.
689700191010      * _________________________________
689800191010
689900191010           CALL "FXRDSPCHK" USING  pi_RDSPCHKAccountNo
690000191010                                   pi_RDSPCHKTransactionAmt
690100191010                                   pi_RDSPCHKTransactionDate
690200191010                                   pc_RDSPCHKMode
690300191010                                   pc_RDSPCHKContrRule
690400191010                                   pc_RDSPCHKAgeLimit
690500191010                                   pc_RDSPCHKResidency
690600191010                                   pc_RDSPCHKContrLimit
690700191010                                   pc_RDSPCHKReturnCode
690800191010                                   pc_RDSPCHKErrorCode
690900191010                                   pc_RDSPCHKErrorType
691000191010                                   pc_RDSPCHKErrorMessage
691100191010      * RFS 98866 - Added new fields
691200191010                                   pi_RDSPCHKSDSPDAPTaxableAmt
691300191010                                   pi_RDSPCHKSDSPDAPTaxableMax
691400191010      *RFS127070 - Start.
691500191010      *                            pc_RDSPCHKSDSPFlag.
691600191010                                   pc_RDSPCHKSDSPFlag
691700191010                                   pi_RDSPCHKSDSPTaxablePortion.
691800191010      *RFS127070 - End.
691900191010      * _________________________________
692000191010       Reduce_AHA_With_DAP.
692100191010      * _________________________________
692200191010
692300191010           INITIALIZE li_TotalDAPGrant
692400191010                      li_TotalDAPBond.
692500191010
692600191010           PERFORM VARYING li_Idx FROM 1 BY 1 UNTIL
692700191010                   li_Idx  > li_LastTRNidx
692800191010
692900191010             COMPUTE li_TotalDAPBond  = li_TotalDAPBond +
693000191010                                          ltr_DAPBond(li_Idx)
693100191010             COMPUTE li_TotalDAPGrant = li_TotalDAPGrant +
693200191010                                          ltr_DAPGrant(li_Idx)
693300191010
693400191010           END-PERFORM.
693500191010
693600191010           SUBTRACT li_TotalDAPBond FROM ln_AHABondLeft.
693700191010           IF ln_AHABondLeft < 0
693800191010             INITIALIZE ln_AHABondLeft
693900191010           END-IF.
694000191010
694100191010           SUBTRACT li_TotalDAPBond FROM ln_TotAHABond.
694200191010           IF ln_TotAHABond < 0
694300191010             INITIALIZE ln_TotAHABond
694400191010           END-IF.
694500191010
694600191010           SUBTRACT li_TotalDAPBond FROM ln_TotalAHA
694700191010           IF ln_TotalAHA < 0
694800191010             INITIALIZE ln_TotalAHA
694900191010           END-IF.
695000191010
695100191010           SUBTRACT li_TotalDAPGrant FROM ln_AHAGrantLeft.
695200191010           IF ln_AHAGrantLeft < 0
695300191010             INITIALIZE ln_AHAGrantLeft
695400191010           END-IF.
695500191010
695600191010           SUBTRACT li_TotalDAPGrant FROM ln_TotAHAGrant.
695700191010           IF ln_TotAHAGrant < 0
695800191010             INITIALIZE ln_TotAHAGrant
695900191010           END-IF.
696000191010
696100191010           SUBTRACT li_TotalDAPGrant FROM ln_TotalAHA.
696200191010           IF ln_TotalAHA < 0
696300191010             INITIALIZE ln_TotalAHA
696400191010           END-IF.
696500191010
696600191010      *RFS108486 Starts
696700191010       Clawback_CDSC_Charged.
696800191010           COMPUTE li_Counter = 1.
696900191010           PERFORM VARYING li_Counter FROM 1 BY 1
697000191010                   UNTIL ldh_InvCode(li_TDidx, li_Counter) = SPACES
697100191010147652*               OR ln_TotalAHA = 0
697200191010147652                OR Li_DescendingClawback = 0
697300191010                IF ldh_CDSC_Charged(li_TDidx, li_Counter) NOT = 0
697400191010147652*              IF ln_TotalAHA <=
697500191010147652               IF Li_DescendingClawback <=
697600191010                        ldh_CDSC_Charged(li_TDidx, li_Counter)
697700191010147652*                 COMPUTE li_CDSCClawedBack = ln_TotalAHA
697800191010147652                  COMPUTE li_CDSCClawedBack
697900191010147652                        = Li_DescendingClawback
698000191010                     ELSE
698100191010                        COMPUTE li_CDSCClawedBack =
698200191010                        ldh_CDSC_Charged(li_TDidx, li_Counter)
698300191010                     END-IF
698400191010                     COMPUTE ldh_CDSC_ToCharge(li_TDidx, li_Counter) =
698500191010                        ldh_CDSC_Charged(li_TDidx, li_Counter) -
698600191010                        li_CDSCClawedBack
698700191010      *RFS1002416 starts
698800191010      *               MOVE Li_CDSCClawedBack TO Pass-CDSC-Net
698900191010                      ADD Li_CDSCClawedBack TO Pass-CDSC-Net
699000191010      *RFS1002416 ends
699100191010147652               IF NOT ldh_TRO(li_TDidx, li_Counter)
699200191010      *RFS1002416 starts
699300191010                     COMPUTE ln_AHAToApply = Li_CDSCClawedBack
699400191010      *RFS1002416 ends
699500191010                        PERFORM Recalculate_AHA_Amounts
699600191010      *RFS1002416 starts
699700191010      *                  COMPUTE ldh_AHAGrant(li_TDidx, li_Counter) =
699800191010      *                          ldh_AHAGrant(li_TDidx, li_Counter) +
699900191010      *                          ln_GrantPortion
700000191010      *                  COMPUTE ldh_AHABond(li_TDidx, li_Counter) =
700100191010      *                          ldh_AHABond(li_TDidx, li_Counter) +
700200191010      *                          ln_BondPortion
700300191010      *RFS1002416 ends
700400191010147652               ELSE
700500191010147652                  SUBTRACT Li_CDSCClawedBack
700600191010147652                      FROM Li_DescendingClawback
700700191010147652               END-IF
700800191010                END-IF
700900191010                END-PERFORM.
701000191010
701100191010       Generate_WKRDSPDSC.
701200191010           INITIALIZE WKRDSPDSC OF lc_WKRDSPDSC.
701300191010           IF ldh_TransNo(li_TDidx, li_DAPidx) NOT = 0
701400191010              MOVE  ldh_PlacementDate(li_TDidx, li_DAPidx)
701500191010                TO  Placement-Date OF lc_WKRDSPDSC
701600191010              MOVE  ldh_TransNo(li_TDidx, li_DAPidx)
701700191010                TO  Trans-No OF lc_WKRDSPDSC
701800191010           ELSE
701900191010              MOVE li_AsAtDate
702000191010                TO Placement-Date OF lc_WKRDSPDSC
702100191010              MOVE ln_CurrentTransNo
702200191010                TO Trans-No OF lc_WKRDSPDSC
702300191010           END-IF.
702400191010
702500191010           MOVE  ldh_CDSC_ToCharge(li_TDidx, li_DAPidx)
702600191010             TO  Charge OF lc_WKRDSPDSC.
702700191010      *RFS181302-STARTS.
702800191010           MOVE Lncc_N to Trigger-Interest-gen OF lc_WKRDSPDSC.
702900191010      *RFS181302-ENDS.
703000191010
703100191010           EXEC SQL
703200191010             INSERT INTO WKRDSPDSC
703300191010             VALUES :WKRDSPDSC
703400191010           END-EXEC.
703500191010
703600191010           MOVE SQLSTATE TO lc_sqlStates.
703700191010           IF NOT lncc_sqlSuccessful
703800191010              SET lncc_Err_82 TO TRUE
703900191010              MOVE lncc_ErrInsertingWKRDSPDSC TO lc_sqlErrShortDESCR
704000191010              PERFORM SQL_Fail_Process
704100191010           END-IF.
704200191010      *RFS181302-STARTS.
704300191010           PERFORM Generate_WKRDSP.
704400191010
704500191010      *----------------*
704600191010       Generate_WKRDSP.
704700191010      *----------------*
704800191010           INITIALIZE lc_WKRDSP.
704900191010           MOVE Placement-Date OF lc_WKRDSPDSC
705000191010                TO lc5_PlacementDate OF lc_WKRDSP
705100191010           MOVE Trans-No OF lc_WKRDSPDSC
705200191010                TO lc5_TransNo  OF lc_WKRDSP
705300191010           MOVE  Charge OF lc_WKRDSPDSC
705400191010                TO lc5_Charge OF lc_WKRDSP
705500191010           MOVE Trigger-Interest-gen OF lc_WKRDSPDSC
705600191010                TO lc5_TriggerInterestGen OF lc_WKRDSP
705700191010           MOVE ldh_InvCode (li_TDidx, li_DAPidx)
705800191010                TO lc5_InvestmentCode OF lc_WKRDSP
705900191010           MOVE ldh_AccountNo (li_TDidx, li_DAPidx)
706000191010                TO lc5_AccountNO  OF lc_WKRDSP
706100191010           MOVE 0  TO lc5_DetailSeqNO OF lc_WKRDSP
706200191010           MOVE Lncc_N to lc5_TRHDRPExists  OF lc_WKRDSP.
706300191010
706400191010
706500191010           EXEC SQL
706600191010             INSERT INTO WKRDSP
706700191010             VALUES :lc_WKRDSP
706800191010           END-EXEC.
706900191010
707000191010      *RFS 108486 Ends
707100191010      * _________________________________
707200191010       CALL_FXGETMKVT.
707300191010      * _________________________________
707400191010
707500210226      *RFS1101968 - Start
707600210226           MOVE lncc_O         TO Pc_GETMVMode
707700210226      *RFS1101968 - End
707800210226
707900191010           CALL "FXGETMKVT" USING  pi_GETMVTradeDate
708000191010                                   pi_GETMVPriceDate
708100210226      *RFS1101968 - Start
708200210226                                   Pc_GETMVMode
708300210226      *RFS1101968 - End
708400191010                                   pi_GETMVAccountNo
708500191010                                   pc_GETMVInvestmentCode
708600191010                                   pn_GETMVMarketValue.
708700191010
708800191010           MOVE pn_GETMVMarketValue  TO  ln_AccountMV.
708900191010      * RFS 98866 - End
709000191010
709100191010      * _________________________________
709200191010       SQL_Fail_Process.
709300191010      * _________________________________
709400191010           PERFORM Dsp-Error.
709500191010           PERFORM Force-Msgw.
709600191010
709700191010      * _________________________________
709800191010       End_Of_Program.
709900191010      * _________________________________
710000191010           IF ln_BatchTransCnt > 0
710100191010              PERFORM Create_Batch_Header
710200191010              PERFORM Update_Trans_No
710300191010108826*       PERFORM Update_Header_No
710400191010           END-IF.
710500191010      * RFS 108826 - Start
710600191010           IF ln_HeaderCnt > 0
710700191010               PERFORM Update_Header_No
710800191010           END-IF.
710900191010      * RFS 108826 - End
711000191010
711100191010      *RFS126482-Start
711200191010           CLOSE Account-Type-Parms.
711300191010           MOVE lncc_N TO  Pc_PassedFromRDSPPRE.
711400191010           DISPLAY pc_WKRDSPData UPON WS-DTAARA-WKRDSPDATA
711500191010                                       FOR "WKRDSPDATA".
711600191010
711700191010      *----------------------------
711800191010       Load-Account-Type-Parm-Array.
711900191010      *----------------------------
712000200914      *RFS1103281 Begins
712100200914           Initialize lc_PrevAccTypCde.
712200200914      *RFS1103281 Ends
712300191010           PERFORM Fetch-Account-Type-Code.
712400191010           MOVE lncc_N  TO lc_EndOfMFaaccpmp.
712500191010           MOVE lnc_500 TO li_ArraySize.
712600191010           SET ATPIDX TO 1.
712700191010           SET ATPIDX DOWN BY 1.
712800200914      *RFS1103281 Begins
712900200914           PERFORM WITH TEST AFTER UNTIL
713000200914                          lc_AccTypCde  = SPACES
713100200914             MOVE lc_AccTypCde  TO lc_PrevAccTypcde
713200200914             MOVE lncc_N  TO lc_EndOfMFaaccpmp
713300200914             IF lc_AccTypCde NOT = SPACES
713400200914              PERFORM Load-Specific-Account-Type
713500200914             END-IF
713600200914             PERFORM Fetch-Account-Type-Code
713700200914           END-PERFORM.
713800200914      *----------------------------
713900200914       Load-Specific-Account-Type.
714000200914      *----------------------------
714100200914      *RFS1103281 Ends
714200191010           INITIALIZE MFAACCPMP OF Account-Type-Parms.
714300191010           MOVE lc_AccTypCde TO Account-Type-Code OF
714400191010                Account-Type-Parms.
714500191010           START Account-Type-Parms
714600191010              KEY IS NOT LESS THAN EXTERNALLY-DESCRIBED-KEY
714700191010              INVALID KEY
714800191010                 MOVE lncc_Y  TO lc_EndOfMFaaccpmp
714900191010              NOT INVALID KEY
715000191010                 PERFORM Read-Account-Type-Parms UNTIL
715100191010                         lb_EndOfMfaaccpmpYes
715200191010           END-START.
715300191010
715400191010      *----------------------------
715500191010       Read-Account-Type-Parms.
715600191010      *----------------------------
715700191010           READ Account-Type-Parms NEXT RECORD
715800191010              NOT AT END
715900191010                 PERFORM Load-Account-Type-Data
716000191010              AT END
716100191010                 MOVE lncc_Y TO lc_EndOfMFaaccpmp
716200191010           END-READ.
716300191010
716400191010      *----------------------------
716500191010       Load-Account-Type-Data.
716600191010      *----------------------------
716700191010           IF lb_EndOfMfaaccpmpNo AND Account-Type-Code OF
716800191010              Account-Type-Parms-Rec = lc_AccTypCde
716900191010              SET ATPIDX UP BY 1
717000191010              INITIALIZE lr_AccountTypeParm(ATPIDX)
717100191010              MOVE Account-Type-Code OF Account-Type-Parms-Rec TO
717200191010                   lc_ATPAccountTypeCode(ATPIDX)
717300191010              MOVE Tax-Year OF Account-Type-Parms-Rec          TO
717400191010                   lc_ATPTaxYear(ATPIDX)
717500191010              MOVE Province-Code OF Account-Type-Parms-Rec     TO
717600191010                   lc_ATPProvinceCode(ATPIDX)
717700191010              MOVE Disability-Tax-Credit OF Account-Type-Parms-Rec
717800191010                   TO lc_ATPDTCAmt(ATPIDX)
717900191010              MOVE Basic-Personal-Amount OF Account-Type-Parms-Rec
718000191010                   TO lc_ATPBPAAmt(ATPIDX)
718100200914      *RFS1103281 Begins
718200200914            ELSE
718300200914              MOVE lncc_Y to lc_EndOfMfaaccpmp
718400200914      *RFS1103281 Ends
718500191010           END-IF.
718600191010
718700191010      *----------------------------
718800191010       Fetch-Account-Type-Code.
718900191010      *----------------------------
719000191010           INITIALIZE lc_AccTypCde.
719100191010           EXEC SQL
719200191010              SELECT Account_Type_Code
719300191010              INTO   :lc_AccTypCde
719400191010              FROM   MFAACCTYP
719500191010              WHERE  ACCOUNT_TYPE_RULE = :lnci_0
719600200914      *RFS1103181 Begins
719700200914              AND Account_Type_Code > :lc_PrevAccTypCde
719800200914              ORDER BY Account_Type_Code
719900200914      *RFS1103281 Ends
720000191010              FETCH FIRST ROW ONLY
720100191010           END-EXEC.
720200191010           MOVE SQLSTATE TO lc_sqlStates.
720300200914      *RFS1103281 Begins
720400200914      *    IF NOT lncc_sqlSuccessful
720500200914           IF lncc_sqlSuccessful OR lncc_sqlEnd OR lncc_sqlWarning
720600200914              CONTINUE
720700200914           ELSE
720800200914      *RFS1103281 Ends
720900191010               SET lncc_Err_83 TO TRUE
721000191010               MOVE lncc_ErrGettingAccntTyp TO lc_sqlErrShortDESCR
721100191010               PERFORM SQL_Fail_Process
721200191010           END-IF.
721300191010
721400191010      *----------------------------
721500191010       Get-DTC-BPA-Amt.
721600191010      *----------------------------
721700200914      *RFS1103281 Begins
721800200914           INITIALIZE li_DTCBPA
721900200914                      li_ProvDTCBPA.
722000200914      *RFS1103281 Ends
722100191010           PERFORM Get-Account-Type-Code.
722200191010           INITIALIZE li_Year.
722300191010           COMPUTE li_Year = ln_SaveTradeDate / 10000.
722400191010           MOVE    lncc_FED TO lc_Province.
722500191010           PERFORM Check-Acnt-Typ-Prm-Arr.
722600191010           PERFORM Fetch-Prov-code-DTC-BPA.
722700191010           PERFORM Check-Acnt-Typ-Prm-Arr.
722800191010
722900191010      *----------------------------
723000191010       Get-Account-Type-Code.
723100191010      *----------------------------
723200191010           INITIALIZE lc_AccntpAccTypCde
723300191010           EXEC SQL
723400191010              SELECT Account_Type_Code
723500191010              INTO   :lc_AccntpAccTypCde
723600191010              FROM   MFAACCNTP
723700191010              WHERE  Account_no = :ln_SaveAccountNo
723800191010           END-EXEC
723900191010           MOVE SQLSTATE TO lc_sqlStates.
724000191010           IF NOT lncc_sqlSuccessful
724100191010               SET lncc_Err_84 TO TRUE
724200191010               MOVE lncc_ErrGettingAccntTypCde TO lc_sqlErrShortDESCR
724300191010               PERFORM SQL_Fail_Process
724400191010           END-IF.
724500191010
724600191010      *----------------------------
724700191010       Fetch-Prov-code-DTC-BPA.
724800191010      *----------------------------
724900191010           INITIALIZE lc_ProvinceCode
725000191010           EXEC SQL
725100191010              SELECT CASE WHEN Accbnp.Tax_Province IS NOT NULL AND
725200191010                               Accbnp.Tax_Province <> " "
725300191010                     THEN Accbnp.Tax_Province
725400191010                     ELSE Addp.Province_code
725500191010                     END
725600191010              INTO   :lc_Province
725700191010              FROM   Mfaaccbnp Accbnp
725800191010              INNER JOIN Mfaaddp Addp
725900191010              ON Accbnp.Addr_no = Addp.Addr_no
726000191010              WHERE  Accbnp.Account_no = :ln_SaveAccountNo
726100191010              Fetch First Row Only
726200191010           END-EXEC.
726300191010           MOVE SQLSTATE TO lc_sqlStates.
726400191010           IF NOT lncc_sqlSuccessful
726500191010               SET lncc_Err_85 TO TRUE
726600191010               MOVE lncc_ErrGettingProvCode TO lc_sqlErrShortDESCR
726700191010               PERFORM SQL_Fail_Process
726800191010           END-IF.
726900191010
727000191010      *----------------------------
727100191010       Check-Acnt-Typ-Prm-Arr.
727200191010      *----------------------------
727300191010           INITIALIZE li_DTCAmt
727400191010                      li_BPAAmt.
727500191010           SET ATPIDX TO 1.
727600191010           SEARCH lr_AccountTypeParm VARYING ATPIDX
727700191010              AT END
727800191010                 INITIALIZE li_DTCAmt
727900191010                            li_BPAAmt
728000191010              WHEN lc_ATPAccountTypeCode(ATPIDX)  = lc_AccntpAccTypCde
728100191010                   AND lc_ATPTaxYear(ATPIDX)      = li_Year
728200191010                   AND lc_ATPProvinceCode(ATPIDX) = lc_Province
728300191010                 MOVE lc_ATPDTCAmt(ATPIDX) TO li_DTCAmt
728400191010                 MOVE lc_ATPBPAAmt(ATPIDX) TO li_BPAAmt
728500191010                 INITIALIZE li_TempDTCBPA
728600191010                 COMPUTE li_TempDTCBPA =
728700191010                         (li_DTCAmt + li_BPAAmt)
728800191010                 IF lc_Province = lncc_FED
728900191010                    INITIALIZE li_DTCBPA
729000191010                    COMPUTE li_DTCBPA = li_TempDTCBPA
729100191010                 ELSE
729200191010                    INITIALIZE li_ProvDTCBPA
729300191010                    COMPUTE li_ProvDTCBPA = li_TempDTCBPA
729400191010                 END-IF
729500191010           END-SEARCH.
729600191010
729700191010      *----------------------------
729800191010       Get-AWD-Info.
729900191010      *----------------------------
730000191010
730100191010           INITIALIZE lc_FreCode.
730200191010           EXEC SQL
730300191010              SELECT ACCAWP.Frequency_Code
730400191010              INTO   :lc_FreCode
730500191010              FROM   Mfaaccawp Accawp
730600191010                     INNER JOIN Mfafrecdp Frecdp ON
730700191010                     Frecdp.Frequency_Code = Accawp.Frequency_Code
730800191010                     INNER JOIN Mfaaccaip Accaip ON
730900191010                     Accaip.Account_no = Accawp.Account_no AND
731000191010                     Accaip.Awd_Seq_No = Accawp.Awd_Seq_No
731100191010                     INNER JOIN Mfaaccntp Accntp ON
731200191010                     Accntp.Account_no = Accawp.Account_no
731300191010                     INNER JOIN Mfaacctyp Acctyp ON
731400191010                     Acctyp.Account_Type_Code = Accntp.Account_Type_Code
731500191010                     INNER JOIN MFACNTRRP Cntrrp ON
731600191010                     Cntrrp.Account_type_code =
731700191010                     Acctyp.Account_type_code AND
731800191010                     Cntrrp.Contr_Redem_Code = Accaip.Contr_Redem_Code
731900191010              WHERE  Accawp.Account_No = :ln_SaveAccountNo AND
732000191010                     Acctyp.Account_Type_Rule = :lnci_0 AND
732100191010                     Accawp.Awd_Status = :lnc_Ac  AND
732200191010                     Cntrrp.Contr_Redem_Code_Rule = :lncc_12
732300191010              FETCH FIRST ROW ONLY
732400191010           END-EXEC.
732500191010           MOVE SQLSTATE TO lc_sqlStates.
732600191010           EVALUATE TRUE
732700191010              WHEN lncc_sqlSuccessful
732800191010                 PERFORM Get-Remaining-Nbr-Pays
732900191010              WHEN lncc_sqlEnd
733000191010                 INITIALIZE li_PayPerAnnum
733100191010              WHEN OTHER
733200191010                 SET lncc_Err_86 TO TRUE
733300191010                 MOVE lncc_ErrGettingAwdInfo TO lc_sqlErrShortDESCR
733400191010                 PERFORM SQL_Fail_Process
733500191010           END-EVALUATE.
733600191010
733700191010
733800191010      * RFS 132349 - Start
733900191010      *--------------------*
734000191010       Calculate-Gross-Amt.
734100191010      *--------------------*
734200191010
734300191010           IF ltr_SplitOption(li_TRNidx) =  lncc_Percent OR lncc_A
734400191010             EXEC SQL
734500191010                SELECT CURR_UNIT_BAL
734600191010                INTO   :ln_UntBal
734700191010                FROM   MFAACCIVP
734800191010                WHERE  ACCOUNT_NO  = :li_AcctNo
734900191010                AND    INVESTMENT_CODE = :lc_InvCde
735000191010             END-EXEC
735100191010             MOVE SQLSTATE TO lc_sqlStates
735200191010             EVALUATE TRUE
735300191010                WHEN lncc_sqlSuccessful
735400191010                   CONTINUE
735500191010                WHEN lncc_sqlEnd
735600191010                   INITIALIZE ln_UntBal
735700191010                WHEN OTHER
735800191010                   SET lncc_Err_89 TO TRUE
735900191010                   MOVE lncc_ErrReadCurrUntBal TO lc_sqlErrShortDESCR
736000191010                   PERFORM SQL_Fail_Process
736100191010             END-EVALUATE
736200191010             IF lc_SplOption = lncc_A
736300191010               COMPUTE ln_UntAmt = ln_UntBal
736400191010             END-IF
736500191010             IF lc_SplOption = lncc_Percent
736600191010               COMPUTE ln_UntAmt = (ln_PerAmt * ln_UntBal) / 100
736700191010             END-IF
736800191010           END-IF
736900191010
737000191010      * Calculate Gross amount
737100191010             EXEC SQL
737200191010                SELECT UNIT_PRICE
737300191010                INTO   :ln_UntPric
737400191010                FROM   MFAINVUPP
737500191010                WHERE  INVESTMENT_CODE = :lc_InvCde
737600191010                AND    TRADE_DATE      = :li_TradDat
737700191010                ORDER BY DISTRIBUTION_FLAG
737800191010                FETCH FIRST ROW ONLY
737900191010             END-EXEC
738000191010             MOVE SQLSTATE TO lc_sqlStates
738100191010             EVALUATE TRUE
738200191010                WHEN lncc_sqlSuccessful
738300191010                   CONTINUE
738400191010                WHEN lncc_sqlEnd
738500191010                   INITIALIZE ln_UntPric
738600191010                WHEN OTHER
738700191010                   SET lncc_Err_90 TO TRUE
738800191010                   MOVE lncc_ErrReadUnitprice TO lc_sqlErrShortDESCR
738900191010                   PERFORM SQL_Fail_Process
739000191010             END-EVALUATE
739100191010
739200191010             COMPUTE ln_CalGross ROUNDED = (ln_UntAmt * ln_UntPric)
739300191010           .
739400191010      /
739500191010      * RFS 132349 - End
739600191010      *----------------------------
739700191010       Get-Remaining-Nbr-Pays.
739800191010      *----------------------------
739900191010           INITIALIZE li_StartDate
740000191010                      li_AccountNo
740100191010                      lc_Frequency
740200191010                      li_PayPerAnnum.
740300191010           MOVE li_AsAtDate      TO li_StartDate.
740400191010           MOVE ln_SaveAccountNo TO li_AccountNo.
740500191010           MOVE lc_FreCode       TO lc_Frequency.
740600191010           CALL "FXREMPAY" USING li_StartDate,
740700191010                                 li_AccountNo,
740800191010                                 lc_Frequency,
740900191010                                 li_PayPerAnnum.
741000191010
741100191010      *----------------------------
741200191010       Get-historical-Payment-Amt.
741300191010      *----------------------------
741400191010           INITIALIZE li_year
741500191010                      li_historyDAPLDAPtotal
741600191010                      li_historyDAPLDAPNTtotal
741700191010                      li_historyLDAPtotal
741800191010                      li_historyLDAPNTtotal
741900191010                      li_YTDDAPLDAPTaxable
742000191010                      li_YTDLDAPTaxable.
742100191010           COMPUTE li_year = li_AsAtDate / lnc_10000.
742200191010           EXEC SQL
742300191010              SELECT COALESCE(
742400191010                     SUM(CASE WHEN
742500191010                                 Cntrpp.Contr_Redem_Code_Rule
742600191010                                 IN("11","12")
742700191010                              THEN Trnp.Gross_Amt
742800191010                              ELSE 0
742900191010                         END), 0 ),
743000191010                    COALESCE(
743100191010                     SUM(CASE WHEN
743200191010                                 Cntrpp.Contr_Redem_Code_Rule
743300191010                                 IN("11","12")
743400191010                              THEN Trnhdp.Non_Taxable_Amount
743500191010                              ELSE 0
743600191010                         END), 0 ),
743700191010                    COALESCE(
743800191010                     SUM(CASE WHEN
743900191010                                 Cntrpp.Contr_Redem_Code_Rule = "12"
744000191010                              THEN Trnp.Gross_Amt
744100191010                              ELSE 0
744200191010                         END), 0 ),
744300191010                    COALESCE(
744400191010                     SUM(CASE WHEN
744500191010                                 Cntrpp.Contr_Redem_Code_Rule = "12"
744600191010                              THEN Trnhdp.Non_Taxable_Amount
744700191010                              ELSE 0
744800191010                         END), 0 )
744900191010              INTO  :li_historyDAPLDAPtotal,
745000191010                    :li_historyDAPLDAPNTtotal,
745100191010                    :li_historyLDAPtotal,
745200191010                    :li_historyLDAPNTtotal
745300191010              FROM  Mfatrnp Trnp
745400191010                    JOIN MFATRNHDP Trnhdp ON
745500191010                    Trnp.Placement_date = Trnhdp.Placement_date AND
745600191010                    Trnp.Trans_no = Trnhdp.Trans_no
745700191010                    JOIN Mfaaccntp Accntp ON
745800191010                    Accntp.account_no = Trnp.account_no
745900191010                    JOIN Mfacntrrp Cntrpp ON
746000191010                    Cntrpp.account_type_code
746100191010                    = Accntp.account_type_code AND
746200191010                    Cntrpp.contr_redem_code = Trnp.contr_redem_code
746300191010              WHERE Trnp.Account_no = :ln_SaveAccountNo AND
746400191010                    Trnp.Trans_Status_Code IN (:lncc_HST, :lncc_PND)
746500191010                    AND
746600191010                    Trnp.process_date <> 0 AND
746700191010                    Trnp.reverse <> :lncc_Y AND
746800191010                    Trnp.Trade_date between :li_year * 10000 + 101
746900191010                                         AND :li_AsAtDate  AND
747000191010                    Cntrpp.contr_redem_code_rule IN ("11", "12") AND
747100191010                    Trnhdp.Vendor_Transaction_Id =
747200191010                    (SELECT COALESCE(MAX(
747300191010                          COALESCE(Trnhdp2.Vendor_Transaction_Id," ")
747400191010                            )," ")
747500191010                     FROM   Mfatrnhdp Trnhdp2
747600191010                     WHERE
747700191010                     Trnhdp2.Placement_date = Trnhdp.Placement_date AND
747800191010                     Trnhdp2.Trans_no = Trnhdp.Trans_no AND
747900191010                     Trnhdp2.Rdsp_Record_Type = "401"   AND
748000191010                     Trnhdp2.Rdsp_Trans_Type IN(" ", "20", "21"))
748100191010           END-EXEC.
748200191010           MOVE SQLSTATE TO lc_sqlStates.
748300191010           EVALUATE TRUE
748400191010              WHEN lncc_sqlSuccessful
748500191010      *RFS126482 -start Defect fix QC-34863
748600191010      *          COMPUTE li_YTDDAPLDAPTaxable = li_historyDAPLDAPtotal +
748700191010                 COMPUTE li_YTDDAPLDAPTaxable = li_historyDAPLDAPtotal -
748800191010                         li_historyDAPLDAPNTtotal
748900191010
749000191010      *          COMPUTE li_YTDLDAPTaxable   =  li_historyLDAPtotal +
749100191010                 COMPUTE li_YTDLDAPTaxable   =  li_historyLDAPtotal -
749200191010                         li_historyLDAPNTtotal
749300191010      *RFS126482 -End Defect fix QC-34863
749400191010              WHEN lncc_sqlEnd
749500191010                 CONTINUE
749600191010              WHEN OTHER
749700191010                 SET lncc_Err_87 TO TRUE
749800191010                 MOVE lncc_ErrGethstclPymtAmt TO lc_sqlErrShortDESCR
749900191010                 PERFORM SQL_Fail_Process
750000191010           END-EVALUATE.
750100191010
750200191010      *RFS127070 - Start.
750300191010
750400191010           IF lb_RdspTsfYes
750500191010              PERFORM Get-historical-from-transfer
750600191010           END-IF.
750700191010
750800191010      *----------------------------
750900191010       Get-historical-from-transfer.
751000191010      *----------------------------
751100191010           INITIALIZE li_historyDAPLDAPtotal,
751200191010                      li_historyDAPLDAPNTtotal,
751300191010                      li_historyLDAPtotal,
751400191010                      li_historyLDAPNTtotal.
751500191010
751600191010           EXEC SQL
751700191010              SELECT COALESCE(
751800191010                     SUM(CASE WHEN
751900191010                                 Tntp.Contr_Redem_Code_Rule
752000191010                                 IN("11","12")
752100191010                              THEN Tntp.Transaction_Amt
752200191010                              ELSE 0
752300191010                         END), 0 ),
752400191010                    COALESCE(
752500191010                     SUM(CASE WHEN
752600191010                                 Tntp.Contr_Redem_Code_Rule
752700191010                                 IN("11","12")
752800191010                              THEN Tntp.Capital_Amt
752900191010                              ELSE 0
753000191010                         END), 0 ),
753100191010                    COALESCE(
753200191010                     SUM(CASE WHEN
753300191010                                 Tntp.Contr_Redem_Code_Rule = "12"
753400191010                              THEN Tntp.Transaction_Amt
753500191010                              ELSE 0
753600191010                         END), 0 ),
753700191010                    COALESCE(
753800191010                     SUM(CASE WHEN
753900191010                                 Tntp.Contr_Redem_Code_Rule = "12"
754000191010                              THEN Tntp.Capital_Amt
754100191010                              ELSE 0
754200191010                         END), 0 )
754300191010
754400191010             INTO :li_historyDAPLDAPtotal,
754500191010                  :li_historyDAPLDAPNTtotal,
754600191010                  :li_historyLDAPtotal,
754700191010                  :li_historyLDAPNTtotal
754800191010
754900191010             FROM MFAADTNTP Tntp
755000191010             INNER JOIN MFAADTNP Dtnp ON
755100191010             Tntp.Account_No = Dtnp.Account_No  AND
755200191010             Tntp.Transfer_Seq_No = Dtnp.Transfer_Seq_No
755300191010             WHERE Tntp.Account_No = :ln_SaveAccountNo
755400191010               AND Dtnp.Transfer_Status = :lnc_C
755500191010               AND Dtnp.Transfer_Contr_Or_Redem = :lnc_C
755600191010               AND Tntp.Activity_date between
755700191010               ((:li_year * 10000) + 101) AND :li_AsAtDate
755800191010           END-EXEC.
755900191010
756000191010           MOVE SQLSTATE TO lc_sqlStates.
756100191010           EVALUATE TRUE
756200191010              WHEN lncc_sqlSuccessful
756300191010
756400191010                 COMPUTE li_YTDDAPLDAPTaxable = li_YTDDAPLDAPTaxable +
756500191010                         li_historyDAPLDAPtotal -
756600191010                                            li_historyDAPLDAPNTtotal
756700191010
756800191010                 COMPUTE li_YTDLDAPTaxable = li_YTDLDAPTaxable +
756900191010                         li_historyLDAPtotal - li_historyLDAPNTtotal
757000191010147652     END-EVALUATE.
757100191010      *RFS127070 - End.
757200191010
757300191010      *RFS126482-End
757400191010
757500191010      *  RFS147652 - Begins - New procedure
757600191010      * _________________________________
757700191010       Get_Accrual.
757800191010      * _________________________________
757900191010           INITIALIZE  ln_InvestmentAccrual.
758000191010           MOVE Pass-CDSC-Account TO li_Pass_CDSC_Account.
758100191010           MOVE Pass-CDSC-Investment TO lc_Pass-CDSC-Investment.
758200191010
758300191010           EXEC SQL
758400191010             SELECT IFNULL(Accrual_Amt,0)
758500191010
758600191010               INTO :ln_InvestmentAccrual
758700191010
758800191010               FROM MFAACCIAP A
758900191010
759000191010              WHERE A.Account_no = :li_Pass_CDSC_Account
759100191010                AND A.Investment_code = :lc_Pass-CDSC-Investment
759200191010           END-EXEC.
759300191010
759400191010           MOVE SQLSTATE TO lc_sqlStates.
759500191010           EVALUATE TRUE
759600191010             WHEN lncc_sqlSuccessful
759700191010               CONTINUE
759800191010             WHEN lncc_sqlEnd
759900191010               CONTINUE
760000191010             WHEN OTHER
760100191010               SET lncc_Err_91 TO TRUE
760200191010               MOVE lncc_ErrGetAccrual         TO lc_sqlErrShortDESCR
760300191010               PERFORM SQL_Fail_Process
760400191010           END-EVALUATE.
760500191010
760600191010      * _________________________________
760700191010       Reject_SameDay_DAPLDAP_TRO.
760800191010      * _________________________________
760900191010           INITIALIZE ln_DSE_AccountNo,
761000191010                      ln_DSE_tradedate.
761100191010           SET lb_EndOfC4False TO TRUE.
761200191010           PERFORM Declare_Open_C4.
761300191010           PERFORM Fetch_C4 UNTIL lb_EndOfC4True.
761400191010           PERFORM Close_C4.
761500191010      * _________________________________
761600191010       Declare_Open_C4.
761700191010      * _________________________________
761800191010           EXEC SQL
761900191010            DECLARE C4 CURSOR FOR
762000191010             SELECT TRNP.PLACEMENT_DATE,
762100191010                    TRNP.TRANS_NO,
762200191010                    TRNP.TRADE_DATE,
762300191010                    TRNP.ACCOUNT_NO,
762400191010                    CNTRRP.CONTR_REDEM_CODE_RULE
762500191010               FROM MFATRNP TRNP
762600191010               INNER JOIN MFAACCNTP ACCNTP
762700191010                  ON TRNP.ACCOUNT_NO = ACCNTP.ACCOUNT_NO
762800191010               INNER JOIN MFAACCTYP ACCTYP
762900191010                  ON ACCNTP.ACCOUNT_TYPE_CODE =
763000191010                     ACCTYP.ACCOUNT_TYPE_CODE
763100191010               INNER JOIN MFACNTRRP CNTRRP
763200191010                  ON ACCNTP.ACCOUNT_TYPE_CODE =
763300191010                     CNTRRP.ACCOUNT_TYPE_CODE
763400191010                 AND TRNP.CONTR_REDEM_CODE    =
763500191010                     CNTRRP.CONTR_REDEM_CODE
763600191010               INNER JOIN MFATRNCRP TRNCRP
763700191010                  ON CNTRRP.CONTR_REDEM_CODE  =
763800191010                     TRNCRP.CONTR_REDEM_CODE
763900191010               WHERE CNTRRP.CONTR_REDEM_CODE_RULE
764000191010                     IN (:lncc_11, :lncc_12, :lncc_15)
764100191010                 AND TRNP.TRANS_STATUS_CODE
764200191010                   IN (:lncc_PND, :lncc_UNC, :lncc_VER)
764300191010                 AND ACCTYP.ACCOUNT_TYPE_RULE = :lnci_0
764400191010                 AND TRNCRP.CONTR_OR_REDEMPTION = :lncc_R
764500191010                ORDER BY Trnp.Account_No,
764600191010                         Trnp.Trade_Date
764700191010                FOR FETCH ONLY
764800191010                OPTIMIZE FOR ALL ROWS
764900191010           END-EXEC.
765000191010           EXEC SQL
765100191010             OPEN C4
765200191010           END-EXEC.
765300191010           MOVE SQLSTATE TO lc_sqlStates.
765400191010           IF NOT lncc_sqlSuccessful
765500191010              SET lncc_Err_93 TO TRUE
765600191010              MOVE lncc_ErrOpeningCursor TO lc_sqlErrShortDESCR
765700191010              PERFORM  SQL_Fail_Process
765800191010           END-IF.
765900191010      * _________________________________
766000191010       Fetch_C4.
766100191010      * _________________________________
766200191010           INITIALIZE lc_C4Vars.
766300191010           EXEC SQL
766400191010             FETCH NEXT FROM C4
766500191010              INTO :lc_C4Vars
766600191010           END-EXEC.
766700191010           MOVE SQLSTATE TO lc_sqlStates.
766800191010           EVALUATE TRUE
766900191010             WHEN lncc_sqlSuccessful
767000191010               PERFORM Check_Each_Sameday_DAPLDAP_TRO
767100191010             WHEN lncc_sqlEnd
767200191010               SET lb_EndOfC4True TO TRUE
767300191010             WHEN OTHER
767400191010               SET lncc_Err_94 TO TRUE
767500191010               MOVE lncc_ErrFetchingCursor  TO lc_sqlErrShortDESCR
767600191010               PERFORM SQL_Fail_Process
767700191010           END-EVALUATE.
767800191010      * _________________________________
767900191010       Check_Each_Sameday_DAPLDAP_TRO.
768000191010      * _________________________________
768100191010
768200191010           IF (ln_C4_DSE_AccountNo NOT = ln_DSE_AccountNo And
768300191010               ln_C4_DSE_tradedate NOT = ln_DSE_tradedate)
768400191010                COMPUTE ln_DSE_tradedate = ln_C4_DSE_tradedate
768500191010                COMPUTE ln_DSE_AccountNo = ln_C4_DSE_AccountNo
768600191010                PERFORM SetFlags
768700191010           END-IF.
768800191010
768900191010           IF (ln_C4_DSE_AccountNo  = ln_DSE_AccountNo And
769000191010               ln_C4_DSE_tradedate = ln_DSE_tradedate)
769100191010              PERFORM EvaluateDSE
769200191010           END-IF.
769300191010      * _________________________________
769400191010       SetFlags.
769500191010      * _________________________________
769600191010           INITIALIZE lc_DSEDAPFlag,
769700191010                      lc_DSEXFRFlag.
769800191010           EXEC SQL
769900191010            SELECT MAX(CASE
770000191010                       WHEN CNTRRP.CONTR_REDEM_CODE_RULE
770100191010                         IN (:lncc_11, :lncc_12)
770200191010                       THEN :lncc_Y
770300191010                       ELSE :lncc_N
770400191010                       END
770500191010                      ),
770600191010                   MAX(CASE
770700191010                       WHEN CNTRRP.CONTR_REDEM_CODE_RULE
770800191010                            = :lncc_15
770900191010                       THEN :lncc_Y
771000191010                       ELSE :lncc_N
771100191010                       END
771200191010                      )
771300191010              INTO :lc_DSEDAPFlag,
771400191010                   :lc_DSEXFRFlag
771500191010              FROM MFATRNP TRNP
771600191010              INNER JOIN MFAACCNTP ACCNTP
771700191010               ON TRNP.ACCOUNT_NO = ACCNTP.ACCOUNT_NO
771800191010              INNER JOIN MFAACCTYP ACCTYP
771900191010               ON ACCNTP.ACCOUNT_TYPE_CODE = ACCTYP.ACCOUNT_TYPE_CODE
772000191010              INNER JOIN MFACNTRRP CNTRRP
772100191010               ON ACCTYP.ACCOUNT_TYPE_CODE = CNTRRP.ACCOUNT_TYPE_CODE
772200191010              AND TRNP.CONTR_REDEM_CODE  = CNTRRP.CONTR_REDEM_CODE
772300191010              WHERE TRNP.REVERSE <> :lncc_Y
772400191010                AND TRNP.ACCOUNT_NO = :ln_DSE_AccountNo
772500191010                AND TRNP.TRADE_DATE = :ln_DSE_tradedate
772600191010           END-EXEC.
772700191010
772800191010           MOVE SQLSTATE TO lc_sqlStates.
772900191010           EVALUATE TRUE
773000191010             WHEN lncc_sqlSuccessful
773100191010               CONTINUE
773200191010             WHEN lncc_sqlEnd
773300191010               CONTINUE
773400191010             WHEN OTHER
773500191010               SET lncc_Err_95 TO TRUE
773600191010               MOVE lncc_ErrSelectRule      TO lc_sqlErrShortDESCR
773700191010               PERFORM SQL_Fail_Process
773800191010           END-EVALUATE.
773900191010      * _________________________________
774000191010       EvaluateDSE.
774100191010      * _________________________________
774200191010           IF ((lc_C4_DSE_Rule = lncc_11 OR lncc_12)
774300191010               AND (lc_DSEXFRFlag = lncc_Y)
774400191010              )
774500191010              PERFORM UpdateDSE
774600191010           END-IF.
774700191010           IF (lc_C4_DSE_Rule = lncc_15
774800191010               AND lc_DSEDAPFlag  = lncc_Y
774900191010              )
775000191010              PERFORM UpdateDSE
775100191010           END-IF.
775200191010      * _________________________________
775300191010       UpdateDSE.
775400191010      * _________________________________
775500191010           EXEC SQL
775600191010            UPDATE MFATRNP SET REJECTION_CODE = :lncc_DSE
775700191010      *RFS1000873 begins
775800191010             ,Process_date  = :li_AsAtDate
775900191010      *RFS1000873 ends
776000191010             WHERE PLACEMENT_DATE = :ln_C4_DSEPlacement_Date
776100191010               AND TRANS_NO       = :ln_C4_DSETrans_No
776200191010           END-EXEC.
776300191010
776400191010           MOVE SQLSTATE TO lc_sqlStates.
776500191010           EVALUATE TRUE
776600191010             WHEN lncc_sqlSuccessful
776700191010               CONTINUE
776800191010             WHEN lncc_sqlEnd
776900191010               CONTINUE
777000191010             WHEN OTHER
777100191010               SET lncc_Err_92 TO TRUE
777200191010               MOVE lncc_ErrUpdatingMFATRNP  TO lc_sqlErrShortDESCR
777300191010               PERFORM SQL_Fail_Process
777400191010           END-EVALUATE.
777500191010      * _________________________________
777600191010       Close_C4.
777700191010      * _________________________________
777800191010           EXEC SQL
777900191010             CLOSE C4
778000191010           END-EXEC.
778100191010
778200191010           MOVE SQLSTATE TO lc_sqlStates.
778300191010           IF NOT lncc_sqlSuccessful
778400191010              SET lncc_Err_96 TO TRUE
778500191010              MOVE lncc_ErrClosingCursor TO lc_sqlErrShortDESCR
778600191010              PERFORM SQL_Fail_Process
778700191010           END-IF.
778800191010      * RFS147652 - END
778900191010
779000191010
779100191010      * DSP-ERROR and FORCE-MSGW Routines
779200191010          COPY CPYSQLRTN.
